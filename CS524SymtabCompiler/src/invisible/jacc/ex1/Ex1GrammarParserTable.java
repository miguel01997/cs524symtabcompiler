// File generated by Invisible Jacc version 1.1.
// Invisible Jacc is Copyright 1997-1998 Invisible Software, Inc.

package invisible.jacc.ex1;

import invisible.jacc.parse.ParserTable;
import invisible.jacc.util.ArrayRLE;

public class Ex1GrammarParserTable extends ParserTable
{

    // The number of symbols.

    private static final int gen_symbolCount = 24;

    // The number of productions.

    private static final int gen_productionCount = 24;

    // The symbol on the left hand side of each production.

    private static final int[] gen_productionLHSSymbol = 
    {1, 17, 17, 18, 18, 18, 20, 20, 21, 21, 22, 22, 19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 23};

    // The length of the right hand side of each production.

    private static final int[] gen_productionRHSLength = 
    {1, 0, 2, 1, 4, 3, 0, 1, 1, 3, 1, 1, 1, 1, 3, 2, 3, 3, 3, 2,
    2, 3, 3, 2};

    // The parameter for each production.

    private static final int[] gen_productionParam = 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7,
    8, 9, 10, 0};

    // The maximum number of insertions during error repair.

    private static final int gen_maxInsertion = 100;

    // The maximum number of deletions during error repair.

    private static final int gen_maxDeletion = 200;

    // The validation length for error repair.

    private static final int gen_validationLength = 5;

    // The number of single-point insertions for error repair.

    private static final int gen_singlePointInsertionCount = 15;

    // The list of symbols for single-point insertions.

    private static final int[] gen_singlePointInsertions = 
    {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

    // The goal production.

    private static final int gen_goalProduction = 23;

    // The end-of-file symbol.

    private static final int gen_eofSymbol = 0;

    // Insertion cost of each symbol for error repair.

    private static final int[] gen_insertionCost = 
    {1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 10, 10, 10, 0, 0, 0,
    0, 0, 0, 0};

    // Deletion cost of each symbol for error repair.

    private static final int[] gen_deletionCost = 
    {1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 20, 20, 20, 0, 0, 0,
    0, 0, 0, 0};

    // The number of LR(1) states.

    private static final int gen_stateCount = 29;

    // Parsing action table.

    private static short[][] gen_actionTable = null;
    private static short[] rle_actionTable = 
    {29, 25, 1, 49, 1, -32504, 48, 1, 48, 1, -32511, 48, 50, -32507, 48, 1, 25, 23, -32490, 48,
    51, 25, 0, 48, 27, -32504, 48, 52, 48, 53, -32510, 48, 26, -32508, 48, 0, 25, -32489, 48, 23,
    25, -32511, 48, 6, -32511, 48, 54, 48, 55, 56, -32509, 48, 57, 37, 36, 35, -32511, 48, 58, 59,
    60, 32, 48, 6, 25, -32509, 48, 61, -32494, 48, 61, 25, -32508, 48, 54, 48, 55, 56, -32509, 48,
    57, 37, 36, -32510, 48, 62, -32509, 48, 36, 25, -32508, 48, 54, 48, 55, 56, -32509, 48, 57, 37,
    36, -32510, 48, 63, -32509, 48, 36, 25, -32508, 48, 54, 48, 55, 56, -32509, 48, 57, 37, 36, -32510,
    48, 64, -32509, 48, 36, 25, -32508, 48, 54, 48, 55, 56, -32509, 48, 57, 37, 36, -32510, 48, 39,
    -32509, 48, 36, 25, -32511, 48, -32511, 10, -32510, 48, 65, 66, 67, 68, 69, -32501, 48, 10, 25, -32511,
    48, 29, -32492, 48, 29, 25, -32511, 48, 7, 70, -32493, 48, 7, 25, -32508, 48, 54, 48, 55, 56,
    -32509, 48, 57, 37, 36, -32510, 48, 71, -32509, 48, 36, 25, -32507, 48, 38, 65, 66, 67, 68, 69,
    -32501, 48, 38, 25, -32511, 48, -32511, 19, -32511, 48, -32510, 19, 67, 68, 69, -32501, 48, 19, 25, -32511,
    48, -32511, 20, -32511, 48, -32510, 20, 67, 68, 69, -32501, 48, 20, 25, -32508, 48, 54, 48, 55, 56,
    -32509, 48, 57, 37, 36, -32510, 48, 72, -32509, 48, 36, 25, -32508, 48, 54, 48, 55, 56, -32509, 48,
    57, 37, 36, -32510, 48, 73, -32509, 48, 36, 25, -32508, 48, 54, 48, 55, 56, -32509, 48, 57, 37,
    36, -32510, 48, 74, -32509, 48, 36, 25, -32508, 48, 54, 48, 55, 56, -32509, 48, 57, 37, 36, -32510,
    48, 75, -32509, 48, 36, 25, -32508, 48, 54, 48, 55, 56, -32509, 48, 57, 37, 36, -32510, 48, 76,
    -32509, 48, 36, 25, -32508, 48, 54, 48, 55, 56, -32509, 48, 57, 37, 36, 35, -32511, 48, 58, -32511,
    48, 33, 48, 35, 25, -32511, 48, 28, -32509, 48, 65, 66, 67, 68, 69, -32501, 48, 28, 25, -32511,
    48, -32511, 21, -32511, 48, -32510, 21, 67, 68, 69, -32501, 48, 21, 25, -32511, 48, -32511, 22, -32511, 48,
    -32510, 22, 67, 68, 69, -32501, 48, 22, 25, -32511, 48, -32511, 17, -32511, 48, -32508, 17, 69, -32501, 48,
    17, 25, -32511, 48, -32511, 18, -32511, 48, -32508, 18, 69, -32501, 48, 18, 25, -32511, 48, -32511, 16, -32511,
    48, -32508, 16, 69, -32501, 48, 16};

    // Unwinding action table for error repair.

    private static final int[] gen_unwindingTable = 
    {1, 24, 0, 23, 6, 28, 39, 39, 39, 39, 10, 26, 7, 39, 30, 19, 20, 39, 39, 39,
    39, 39, 40, 26, 21, 22, 17, 18, 16};

    // The names of symbols.

    private static final String[] gen_symbols = 
    {
        "%%EOF",
        "Goal",
        ";",
        ",",
        "=",
        "(",
        ")",
        "+",
        "-",
        "*",
        "/",
        "^",
        "print",
        "sqrt",
        "identifier",
        "number",
        "string",
        "StatementList",
        "Statement",
        "Expr",
        "OptionalPrintItemList",
        "PrintItemList",
        "PrintItem",
        "%%Goal"
    };

    // The link name for each production.

    private static final String[] gen_productionLink = 
    {
        "",
        "",
        "",
        "empty",
        "assign",
        "print",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
    };




    // RLE decoding function

    private static synchronized void decodeRLE ()
    {
        if (gen_actionTable == null)
        {
            gen_actionTable = ArrayRLE.shortRLEToShort2D (rle_actionTable);
            rle_actionTable = null;
        }

        return;
    }




    // Constructor installs the generated tables into the ParserTable

    public Ex1GrammarParserTable ()
    {
        super ();

        // Decode the run-length-encoded tables

        decodeRLE ();

        // Copy parsing tables into the ParserTable superclass

        _symbolCount = gen_symbolCount;
        _productionCount = gen_productionCount;
        _productionLHSSymbol = gen_productionLHSSymbol;
        _productionRHSLength = gen_productionRHSLength;
        _productionParam = gen_productionParam;
        _maxInsertion = gen_maxInsertion;
        _maxDeletion = gen_maxDeletion;
        _validationLength = gen_validationLength;
        _singlePointInsertionCount = gen_singlePointInsertionCount;
        _singlePointInsertions = gen_singlePointInsertions;
        _goalProduction = gen_goalProduction;
        _eofSymbol = gen_eofSymbol;
        _insertionCost = gen_insertionCost;
        _deletionCost = gen_deletionCost;
        _stateCount = gen_stateCount;
        _actionTable = gen_actionTable;
        _unwindingTable = gen_unwindingTable;

        // Copy dynamic-link tables into the ParserTable superclass

        _symbols = gen_symbols;
        _productionLink = gen_productionLink;

        return;
    }


}

