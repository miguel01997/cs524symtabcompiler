// File generated by Invisible Jacc version 1.1.
// Invisible Jacc is Copyright 1997-1998 Invisible Software, Inc.

package invisible.jacc.ex1;

import invisible.jacc.parse.ScannerTable;
import invisible.jacc.util.ArrayRLE;

public class Ex1GrammarScannerTable extends ScannerTable
{

    // The number of different character categories.

    private static final int gen_categoryCount = 52;

    // The character set size.

    private static final int gen_charSetSize = 65536;

    // The character category table.

    private static byte[] gen_categoryTable = null;
    private static short[] rle_categoryTable = 
    {-32767, 0, 2048, 49, 44, 0, 49, 51, 2816, 50, 1024, 47, 48, 42, 1072, 30, 31, 34, 32, 28,
    33, 41, 35, 2342, 48, 27, 45, 29, 46, 304, 805, 40, 5157, 48, 43, 48, 36, 304, 1, 2,
    3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
    23, 24, 25, 26, 11824, 37, 2352, 37, 816, 37, 1072, 5669, 48, 7717, 48, -731, 816, 7461, 14128, 22565,
    1584, 2085, 304, 1573, 3376, 293, 3376, 1061, -27600, 37, 2608, 37, 48, 549, 48, 37, 48, 4901, 48, 11045,
    48, 1573, 560, 37, 48, 37, 48, 37, 48, 37, 48, 4389, 3120, 2853, 48, 16677, 48, 2853, 48, 8997,
    3376, 13349, 304, 293, 304, 293, 560, 6949, 304, 1829, 304, 293, 13872, 9509, 304, 37, 1584, 9765, 18224, 6693,
    1072, 549, 11568, 6437, 1072, 2597, 5168, 2343, 1584, 17957, 304, 1061, 48, 3621, 48, 805, 48, 37, 3632, 293,
    2096, 2343, -208, -208, 2608, 13349, 560, 37, 6448, 2341, 816, 2343, 5168, 1829, 304, 293, 304, 5413, 48, 1573,
    48, 37, 560, 805, 8496, 293, 48, 549, 816, 2343, 293, 4656, 1317, 816, 293, 304, 5413, 48, 1573, 48,
    293, 48, 293, 48, 293, 7728, 805, 48, 37, 1584, 2343, 304, 549, 3888, 1573, 48, 37, 48, 549, 48,
    5413, 48, 1573, 48, 293, 48, 1061, 560, 37, 8496, 37, 1072, 2343, 5168, 1829, 304, 293, 304, 5413, 48,
    1573, 48, 293, 304, 805, 560, 37, 7472, 293, 48, 549, 816, 2343, 5168, 1317, 560, 549, 48, 805, 560,
    293, 48, 37, 48, 293, 560, 293, 560, 549, 560, 1829, 48, 549, 11312, 2087, 5168, 1829, 48, 549, 48,
    5669, 48, 2341, 48, 1061, 9520, 293, 816, 2343, 5168, 1829, 48, 549, 48, 5669, 48, 2341, 48, 1061, 9008,
    37, 48, 293, 816, 2343, 5168, 1829, 48, 549, 48, 5669, 48, 3877, 9520, 293, 816, 2343, -28624, 11557, 48,
    37, 48, 293, 2864, 1573, 2096, 2343, 9776, 293, 48, 37, 304, 293, 48, 37, 304, 37, 1328, 805, 48,
    1573, 48, 549, 48, 37, 48, 37, 304, 293, 48, 293, 48, 37, 48, 293, 2096, 37, 304, 1061, 48,
    37, 2096, 2343, 304, 293, 16688, 2343, 5424, 1829, 48, 8229, -208, 13616, 9509, 2352, 9765, 2096, 22821, 1072, 17189,
    1072, 20773, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, 1328, -25819, 816, 22821, 1328, 5413,
    304, 1317, 304, 9509, 304, 1317, 304, 1829, 48, 37, 48, 37, 48, 37, 48, 7717, 304, 13349, 48, 1573,
    48, 37, 560, 549, 48, 1573, 560, 805, 304, 1317, 816, 3109, 1072, 549, 48, 1573, -32464, 37, -32464, 37,
    816, 37, 304, 2341, 48, 37, 304, 1317, 1328, 37, 48, 37, 48, 37, 48, 1829, 48, 1317, -208, -208,
    -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -13520, 37, 10800, 1061, 2608, 21285, 1328, 805,
    304, 22821, 48, 549, 1328, 10021, 816, 23845, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208,
    -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, 28720, -219, -219, -219,
    -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
    -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
    -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
    -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -23259, -208,
    -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, 22832, -219, -219, -219, -219, -219, -219, -219, -219,
    -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
    -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -219, -23771, -208, -208, -208, -208,
    -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208, -208,
    -208, -208, -208, -208, -208, -208, -208, -208, -208, 23344, -219, 11557, -11984, 1573, 2864, 1061, 1584, 2341, 48, 3109,
    48, 1061, 48, 37, 48, 293, 48, 293, 48, 27429, 8240, -219, 27173, 4400, 16165, 304, 13605, 10032, 2853, 29488,
    549, 48, 37, 48, -31195, 4656, 2343, 1584, 6437, 1328, 6437, 2608, 22565, 560, 1317, 304, 1317, 304, 1317, 304,
    549, 8752};

    // The number of tokens.

    private static final int gen_tokenCount = 30;

    // The token parameters.

    private static final int[] gen_tokenParam = 
    {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 15, 15, 16, 16,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    // The number of tokens that have a right context.

    private static final int gen_contextCount = 4;

    // Context number table.

    private static final int[] gen_contextNumber = 
    {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 1, 2, 4, 4, 4,
    4, 4, 4, 4, 3, 4, 4, 4, 4, 4};

    // The number of start conditions for the forward DFA.

    private static final int gen_conditionCount = 2;

    // The number of states in the forward DFA.

    private static final int gen_fwdStateCount = 91;

    // The number of recognition codes in the forward DFA.

    private static final int gen_fwdRecognitionCount = 43;

    // Forward DFA initial state table.

    private static final int[] gen_fwdInitialState = 
    {1, 2};

    // Forward DFA transition table.

    private static short[][] gen_fwdTransitionTable = null;
    private static short[] rle_fwdTransitionTable = 
    {91, 52, -32461, 91, 52, 21, -32505, 14, 15, -32507, 14, 13, -32511, 14, 16, -32506, 14, 3, 4, 5,
    6, 7, 8, 9, 10, 11, 12, 14, 17, 18, 14, 19, 20, 21, 24, -32511, 21, 22, 21, 22,
    23, 25, 52, -32479, 26, 27, -32504, 26, 24, -32507, 26, 25, 52, -32461, 91, 52, -32461, 91, 52, -32461,
    91, 52, -32461, 91, 52, -32461, 91, 52, -32461, 91, 52, -32461, 91, 52, -32461, 91, 52, -32479, 91, 28,
    29, -32497, 91, 52, -32461, 91, 52, 91, -32496, 30, 31, -32505, 30, -32503, 91, -32509, 30, 32, -32503, 91,
    52, 91, -32487, 30, -32503, 91, -32509, 30, 32, -32503, 91, 52, 91, -32500, 30, 33, -32501, 30, -32503, 91,
    -32509, 30, 32, -32503, 91, 52, 91, -32497, 30, 34, -32504, 30, -32503, 91, -32509, 30, 32, -32503, 91, 52,
    91, -32509, 35, 36, -32492, 35, -32503, 91, 35, 37, 35, 36, 38, -32503, 91, 52, 91, -32487, 35, -32503,
    91, -32509, 35, 32, -32503, 91, 52, -32475, 91, 39, 35, -32501, 91, 52, -32471, 40, 41, 42, 91, -32507,
    40, 91, 52, -32461, 91, 52, -32478, 91, 43, -32502, 91, 44, 91, 44, -32511, 91, 52, -32461, 45, 52,
    -32461, 91, 52, -32469, 91, 46, -32506, 91, 52, -32479, 47, 48, -32504, 47, 91, -32507, 47, 91, 52, -32479,
    47, 48, 49, -32505, 47, 91, -32507, 47, 91, 52, -32479, 28, 50, -32504, 28, 91, -32507, 28, 91, 52,
    -32469, 29, 91, -32507, 29, 91, 52, 91, -32487, 30, -32503, 91, -32509, 30, 32, -32503, 91, 52, 91, -32505,
    30, 51, -32496, 30, -32503, 91, -32509, 30, 32, -32503, 91, 52, -32475, 91, -32511, 35, -32501, 91, 52, 91,
    -32511, 30, 52, -32490, 30, -32503, 91, -32509, 30, 32, -32503, 91, 52, 91, -32496, 30, 53, -32505, 30, -32503,
    91, -32509, 30, 32, -32503, 91, 52, 91, -32487, 35, -32503, 91, -32509, 35, 32, -32503, 91, 52, 91, -32487,
    35, -32508, 91, -32511, 54, -32510, 91, 35, 55, -32511, 35, 56, -32503, 91, 52, 91, -32509, 35, 36, -32492,
    35, -32503, 91, 35, 37, 35, 36, 38, -32503, 91, 52, 91, -32509, 35, 36, -32492, 35, -32503, 91, 35,
    39, 35, 36, 57, -32503, 91, 52, 91, -32509, 35, 36, -32492, 35, -32503, 91, 35, 39, 35, 36, 58,
    -32503, 91, 52, -32471, 40, 41, 42, 91, -32507, 40, 91, 52, -32461, 91, 52, -32469, 40, 91, -32507, 40,
    91, 52, -32479, 91, 28, 29, -32497, 91, 52, -32478, 91, 43, -32502, 91, 44, 91, 44, -32511, 91, 52,
    -32461, 91, 52, -32461, 91, 52, -32479, 47, 48, -32504, 47, 91, -32507, 47, 91, 52, -32479, 47, 48, 49,
    -32505, 47, 91, -32507, 47, 91, 52, -32478, 91, 59, -32502, 91, 49, 91, 49, -32511, 91, 52, -32479, 28,
    50, 44, -32505, 28, 91, -32507, 28, 91, 52, 91, -32500, 30, 60, -32501, 30, -32503, 91, -32509, 30, 32,
    -32503, 91, 52, 91, -32502, 30, 61, -32499, 30, -32503, 91, -32509, 30, 32, -32503, 91, 52, 91, -32494, 30,
    62, -32507, 30, -32503, 91, -32509, 30, 32, -32503, 91, 52, 91, -32487, 35, -32503, 91, 35, 55, -32511, 35,
    56, -32503, 91, 52, 91, -32487, 35, -32503, 91, 35, 55, -32511, 35, 63, -32503, 91, 52, 91, -32487, 35,
    -32503, 91, -32509, 35, -32502, 91, 52, -32461, 91, 52, 91, -32487, 35, -32503, 91, -32509, 35, 64, -32503, 91,
    52, -32479, 91, 47, 65, -32497, 91, 52, 91, -32494, 30, 66, -32507, 30, -32503, 91, -32509, 30, 32, -32503,
    91, 52, 91, -32493, 30, 67, -32508, 30, -32503, 91, -32509, 30, 32, -32503, 91, 52, 91, -32487, 30, -32503,
    91, -32509, 30, 32, -32503, 91, 52, 91, -32487, 35, -32503, 91, -32509, 35, 68, -32503, 91, 52, -32461, 91,
    52, -32469, 65, 91, -32507, 65, 91, 52, 91, -32487, 30, -32503, 91, -32509, 30, 32, -32503, 91, 52, 91,
    -32510, 30, 69, -32491, 30, -32503, 91, -32509, 30, 32, -32503, 91, 52, -32461, 91, 52, 91, -32509, 30, 70,
    -32492, 30, -32503, 91, -32509, 30, 32, -32503, 91, 52, 75, -32487, 73, -32505, 71, 72, 71, -32509, 73, 74,
    -32511, 71, 91, 76, 77, 78, 71, 78, 75, 91, 52, 75, -32470, 71, 91, 75, 77, 75, 71, -32511,
    75, 91, 52, 75, -32480, 71, 79, -32504, 71, 91, 75, 77, 75, 71, -32511, 75, 91, 52, 75, -32487,
    73, -32503, 71, -32509, 73, 74, -32511, 71, 91, 75, 77, 75, 71, -32511, 75, 91, 52, 75, -32476, 71,
    -32511, 80, -32509, 71, 91, 75, 77, 75, 71, -32511, 75, 91, 52, -32469, 75, 91, 75, 77, -32509, 75,
    91, 52, 75, -32470, 81, 91, 75, 77, 76, 81, 76, 75, 91, 52, -32461, 91, 52, 75, -32479, 71,
    72, -32505, 71, 91, 76, 77, 78, 71, 78, 75, 91, 52, 83, -32480, 79, 82, -32504, 79, 91, 83,
    84, 83, 79, -32511, 83, 91, 52, 75, -32487, 80, -32503, 71, -32509, 80, 74, -32511, 71, 91, 75, 77,
    75, 71, -32511, 75, 91, 52, 75, -32470, 81, 91, 75, 85, 86, 81, 87, 75, 91, 52, 83, -32480,
    79, 82, 78, -32505, 79, 91, 83, 84, 83, 79, -32511, 83, 91, 52, -32479, 83, 88, -32504, 83, 91,
    83, 84, -32509, 83, 91, 52, -32479, 89, 90, -32504, 89, 91, -32507, 89, 91, 52, -32461, 91, 52, 75,
    -32470, 86, 91, 75, 85, -32511, 86, 87, 75, 91, 52, -32469, 75, 91, 75, 85, 87, 75, 87, 75,
    91, 52, -32479, 83, 88, 78, -32505, 83, 91, 83, 84, -32509, 83, 91, 52, -32479, 89, 90, -32504, 89,
    91, -32507, 89, 91, 52, -32479, 89, 90, 78, -32505, 89, 91, -32507, 89, 91};

    // Forward DFA recognition table.

    private static final int[] gen_fwdRecognitionTable = 
    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13, 13, 13, 14, 15, 16,
    17, 16, 18, 19, 20, 20, 21, 21, 22, 1, 23, 23, 0, 23, 23, 24, 0, 25, 26, 27,
    28, 29, 28, 0, 1, 30, 31, 2, 2, 32, 22, 23, 23, 23, 0, 33, 24, 34, 24, 0,
    23, 23, 35, 24, 36, 32, 37, 23, 38, 23, 39, 40, 40, 39, 40, 0, 40, 40, 40, 40,
    41, 40, 40, 0, 40, 42, 0, 0, 0, 0, 0};

    // Forward DFA token list.

    private static final int[] gen_fwdTokenListLength = 
    {0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2,
    2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
    1, 2, 2};

    private static final int[][] gen_fwdTokenList = 
    {
        {},
        {22},
        {27},
        {0, 29},
        {1, 29},
        {2, 29},
        {3, 29},
        {4, 29},
        {5, 29},
        {6, 29},
        {7, 29},
        {8, 29},
        {9, 29},
        {12, 29},
        {13, 29},
        {17, 29},
        {29},
        {19, 29},
        {22, 29},
        {25, 29},
        {28, 29},
        {27, 29},
        {23},
        {12},
        {17},
        {13},
        {14},
        {15},
        {19},
        {18},
        {24},
        {28},
        {26},
        {16},
        {13},
        {11, 12},
        {15},
        {10, 12},
        {16},
        {12, 21},
        {21},
        {17, 21},
        {20, 21}
    };

    // Forward DFA context split table.

    private static boolean[][] gen_fwdContextSplit = null;
    private static byte[] rle_fwdContextSplit = 
    {0, 43, 0, 4, 3, 0, 4, 3, 0, 4, 3, 0, 4, 3, 0, 4, 3, 0, 4, 3,
    0, 4, 3, 0, 4, 3, 0, 4, 3, 0, 4, 3, 0, 4, 3, 0, 4, 3, 0, 4,
    3, 0, 4, 3, 0, 4, -128, 2, 0, 4, 3, 0, 4, 3, 0, 4, 3, 0, 4, 3,
    0, 4, 2, -128, 0, 4, 3, 0, 4, 3, 0, 4, 3, 0, 4, 3, 0, 4, 3, 0,
    4, -128, 2, 0, 4, 3, 0, 4, 0, -128, 1, 0, 4, 3, 0, 4, 3, 0, 4, 3,
    0, 4, 3, 0, 4, 3, 0, 4, 1, -128, 0, 0, 4, 3, 0, 4, 3, 0, 4, 3,
    0, 4, 3, 0, 4, 3, 0, 4, 3, 0, 4, 3, 0, 4, 3, 0, 4, 3};

    // The number of states in the reverse DFA.

    private static final int gen_revStateCount = 4;

    // The number of recognition codes in the reverse DFA.

    private static final int gen_revRecognitionCount = 3;

    // Reverse DFA transition table.

    private static short[][] gen_revTransitionTable = null;
    private static short[] rle_revTransitionTable = 
    {4, 52, -32472, 2, 1, -32503, 2, 52, -32472, 4, 3, -32503, 4, 52, -32461, 4, 52, -32461, 4};

    // Reverse DFA recognition table.

    private static final int[] gen_revRecognitionTable = 
    {1, 2, 2, 1};

    // Reverse DFA context split table.

    private static boolean[][] gen_revContextSplit = null;
    private static byte[] rle_revContextSplit = 
    {0, 3, 0, 4, 3, 0, 4, -126, 0, 0, 4, 2, -128};

    // The names of start conditions.

    private static final String[] gen_conditionNames = 
    {
        "notInComment",
        "inComment"
    };

    // The names of tokens.

    private static final String[] gen_tokenNames = 
    {
        ";",
        ",",
        "=",
        "(",
        ")",
        "+",
        "-",
        "*",
        "/",
        "^",
        "print",
        "sqrt",
        "identifier",
        "number",
        "number",
        "number",
        "number",
        "number",
        "string",
        "string",
        "include",
        "illegalInclude",
        "whiteSpace",
        "beginComment",
        "illegalChar",
        "whiteSpace",
        "endComment",
        "whiteSpace",
        "lineEnd",
        "illegalChar"
    };

    // The link name for each token.

    private static final String[] gen_tokenLink = 
    {
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "illegal",
        "",
        "runOn",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
    };




    // RLE decoding function

    private static synchronized void decodeRLE ()
    {
        if (gen_categoryTable == null)
        {
            gen_categoryTable = ArrayRLE.byteRLEToByte1D (rle_categoryTable);
            rle_categoryTable = null;
        }

        if (gen_fwdTransitionTable == null)
        {
            gen_fwdTransitionTable = ArrayRLE.shortRLEToShort2D (rle_fwdTransitionTable);
            rle_fwdTransitionTable = null;
        }

        if (gen_fwdContextSplit == null)
        {
            gen_fwdContextSplit = ArrayRLE.booleanRLEToBoolean2D (rle_fwdContextSplit);
            rle_fwdContextSplit = null;
        }

        if (gen_revTransitionTable == null)
        {
            gen_revTransitionTable = ArrayRLE.shortRLEToShort2D (rle_revTransitionTable);
            rle_revTransitionTable = null;
        }

        if (gen_revContextSplit == null)
        {
            gen_revContextSplit = ArrayRLE.booleanRLEToBoolean2D (rle_revContextSplit);
            rle_revContextSplit = null;
        }

        return;
    }




    // Constructor installs the generated tables into the ScannerTable

    public Ex1GrammarScannerTable ()
    {
        super ();

        // Decode the run-length-encoded tables

        decodeRLE ();

        // Copy scanning tables into the ScannerTable superclass

        _categoryCount = gen_categoryCount;
        _charSetSize = gen_charSetSize;
        _categoryTable = gen_categoryTable;
        _tokenCount = gen_tokenCount;
        _tokenParam = gen_tokenParam;
        _contextCount = gen_contextCount;
        _contextNumber = gen_contextNumber;
        _conditionCount = gen_conditionCount;
        _fwdStateCount = gen_fwdStateCount;
        _fwdRecognitionCount = gen_fwdRecognitionCount;
        _fwdInitialState = gen_fwdInitialState;
        _fwdTransitionTable = gen_fwdTransitionTable;
        _fwdRecognitionTable = gen_fwdRecognitionTable;
        _fwdTokenListLength = gen_fwdTokenListLength;
        _fwdTokenList = gen_fwdTokenList;
        _fwdContextSplit = gen_fwdContextSplit;
        _revStateCount = gen_revStateCount;
        _revRecognitionCount = gen_revRecognitionCount;
        _revTransitionTable = gen_revTransitionTable;
        _revRecognitionTable = gen_revRecognitionTable;
        _revContextSplit = gen_revContextSplit;

        // Copy dynamic-link tables into the ScannerTable superclass

        _conditionNames = gen_conditionNames;
        _tokenNames = gen_tokenNames;
        _tokenLink = gen_tokenLink;

        return;
    }


}

