// File generated by Invisible Jacc version 1.1.
// Invisible Jacc is Copyright 1997-1998 Invisible Software, Inc.

package invisible.jacc.gen;

import invisible.jacc.parse.ParserTable;
import invisible.jacc.util.ArrayRLE;

public class JaccGrammarParserTable extends ParserTable
{

    // The number of symbols.

    private static final int gen_symbolCount = 88;

    // The number of productions.

    private static final int gen_productionCount = 95;

    // The symbol on the left hand side of each production.

    private static final int[] gen_productionLHSSymbol = 
    {47, 46, 46, 48, 48, 48, 48, 48, 48, 49, 50, 50, 61, 61, 61, 61, 61, 61, 61, 62,
    63, 64, 65, 66, 67, 67, 68, 51, 52, 52, 69, 69, 70, 71, 53, 54, 54, 72, 73, 73,
    74, 74, 75, 75, 76, 76, 76, 77, 77, 55, 56, 56, 78, 79, 80, 80, 80, 80, 80, 80,
    80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 57, 58, 58, 81, 82, 59, 83, 83, 60, 60,
    84, 84, 85, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 87};

    // The length of the right hand side of each production.

    private static final int[] gen_productionRHSLength = 
    {1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 5, 3, 3, 3, 1,
    1, 1, 1, 1, 1, 3, 1, 2, 0, 2, 2, 4, 1, 1, 2, 0, 2, 7, 0, 3,
    0, 2, 0, 2, 0, 3, 3, 0, 2, 2, 0, 2, 4, 1, 1, 1, 3, 3, 1, 1,
    1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 2, 0, 2, 2, 1, 3, 0, 2, 0, 2,
    6, 8, 1, 1, 3, 2, 2, 2, 2, 3, 3, 3, 3, 3, 2};

    // The parameter for each production.

    private static final int[] gen_productionParam = 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    // The maximum number of insertions during error repair.

    private static final int gen_maxInsertion = 100;

    // The maximum number of deletions during error repair.

    private static final int gen_maxDeletion = 200;

    // The validation length for error repair.

    private static final int gen_validationLength = 5;

    // The number of single-point insertions for error repair.

    private static final int gen_singlePointInsertionCount = 45;

    // The list of symbols for single-point insertions.

    private static final int[] gen_singlePointInsertions = 
    {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42, 43, 44, 45};

    // The goal production.

    private static final int gen_goalProduction = 94;

    // The end-of-file symbol.

    private static final int gen_eofSymbol = 0;

    // Insertion cost of each symbol for error repair.

    private static final int[] gen_insertionCost = 
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0};

    // Deletion cost of each symbol for error repair.

    private static final int[] gen_deletionCost = 
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0};

    // The number of LR(1) states.

    private static final int gen_stateCount = 87;

    // Parsing action table.

    private static short[][] gen_actionTable = null;
    private static short[] rle_actionTable = 
    {87, 89, -32492, 190, 191, 192, 193, 194, 195, -32511, 190, 196, -32496, 190, 197, 198, 96, 199, 190, 200,
    190, 201, 190, 202, 190, 203, 190, 204, -32485, 190, 196, 89, -32504, 190, 76, -32479, 190, 76, -32475, 190,
    205, -32509, 190, 76, 89, -32504, 190, 144, -32435, 190, 144, 89, -32504, 190, 165, -32435, 190, 165, 89, -32504,
    190, 122, -32435, 190, 122, 89, -32504, 190, 129, -32435, 190, 129, 89, -32504, 190, 104, -32435, 190, 104, 89,
    0, -32493, 190, 191, 192, 193, 194, 195, -32511, 190, 196, -32494, 190, 97, 199, 190, 200, 190, 201, 190,
    202, 190, 203, 190, 204, -32485, 190, 0, 89, 94, -32426, 190, 206, 89, 10, -32493, 190, -32508, 10, -32511,
    190, -32508, 10, -32505, 190, -32510, 10, -32507, 190, 207, -32476, 190, 10, 89, 28, -32493, 190, -32508, 28, -32511,
    190, 28, -32498, 190, 28, -32506, 190, 208, -32478, 190, 28, 89, 35, -32493, 190, -32508, 35, -32511, 190, 35,
    -32498, 190, 35, -32504, 190, 209, -32480, 190, 35, 89, 50, -32493, 190, -32508, 50, -32511, 190, 50, -32498, 190,
    50, -32502, 190, 210, -32482, 190, 50, 89, 71, -32493, 190, -32508, 71, -32511, 190, 71, -32498, 190, 71, -32500,
    190, 211, -32484, 190, 71, 89, 78, -32493, 190, -32508, 78, -32511, 190, 78, -32498, 190, 78, -32498, 190, 212,
    -32486, 190, 78, 89, -32504, 190, 170, -32479, 190, 169, -32476, 190, 172, -32508, 190, 170, 89, -32425, 190, 94,
    89, 3, -32493, 190, -32508, 3, -32511, 190, 3, 213, 214, 215, 216, -32505, 190, 217, 218, 219, -32496, 190,
    106, -32487, 190, 3, 89, 4, -32493, 190, -32508, 4, -32511, 190, 4, -32498, 190, 118, -32492, 190, 220, -32511,
    190, 124, -32495, 190, 4, 89, 5, -32493, 190, -32508, 5, -32511, 190, 5, -32498, 190, 118, -32492, 190, 221,
    -32508, 190, 131, -32498, 190, 5, 89, 6, -32493, 190, -32508, 6, -32511, 190, 6, -32498, 190, 148, -32480, 190,
    146, 222, -32505, 190, 6, 89, 7, -32493, 190, -32508, 7, -32511, 190, 7, -32498, 190, 169, -32477, 190, 167,
    223, -32508, 190, 7, 89, 8, -32493, 190, -32508, 8, -32511, 190, 8, -32498, 190, 177, -32474, 190, 174, 224,
    -32511, 190, 8, 89, -32468, 190, 114, -32497, 190, 225, -32488, 190, 114, 89, -32503, 190, 107, -32436, 190, 107,
    89, -32503, 190, 108, -32436, 190, 108, 89, -32503, 190, 109, -32436, 190, 109, 89, -32468, 190, 117, -32494, 190,
    226, -32491, 190, 117, 89, -32469, 190, 118, -32492, 190, 227, -32492, 190, 118, 89, -32469, 190, 121, -32491, 190,
    228, 119, -32494, 190, 121, 89, -32503, 190, 125, -32479, 190, 127, -32489, 190, 229, -32496, 190, 125, 89, -32499,
    190, 230, -32511, 190, 38, 190, 38, -32460, 190, 231, -32499, 190, 38, 89, -32502, 190, 232, -32437, 190, 232,
    89, -32503, 190, 168, -32436, 190, 168, 89, -32502, 190, 38, -32511, 190, 230, -32511, 190, 38, -32458, 190, 233,
    -32499, 190, 38, 89, -32468, 190, 115, -32496, 190, 234, -32489, 190, 115, 89, -32503, 190, 111, -32436, 190, 111,
    89, -32503, 190, 112, -32436, 190, 112, 89, -32503, 190, 113, -32506, 190, 235, -32444, 190, 113, 89, -32468, 190,
    128, -32488, 190, 236, -32497, 190, 128, 89, -32469, 190, 237, -32470, 190, 237, 89, -32496, 190, 238, 190, 40,
    -32459, 190, 239, -32500, 190, 40, 89, -32501, 190, 240, -32493, 190, 153, 154, 155, 156, 157, 158, 159, 160,
    -32510, 190, 241, 242, -32479, 190, 243, -32506, 190, 153, 89, -32502, 190, 40, -32508, 190, 238, -32457, 190, 244,
    -32500, 190, 40, 89, -32468, 190, 116, -32495, 190, 245, -32490, 190, 116, 89, -32469, 190, 121, -32490, 190, 120,
    -32494, 190, 121, 89, -32503, 190, 126, -32436, 190, 126, 89, -32498, 190, 134, -32441, 190, 134, 89, -32468, 190,
    136, -32471, 190, 136, 89, -32494, 190, 246, -32445, 190, 246, 89, -32501, 190, 240, -32493, 190, 153, 154, 155,
    156, 157, 158, 159, 160, -32510, 190, 241, 242, -32479, 190, 247, -32506, 190, 153, 89, 190, 55, 190, 55,
    -32507, 190, 55, -32511, 190, 55, -32511, 190, 55, -32510, 190, 248, -32446, 190, 55, 89, 190, 54, 190, 54,
    -32507, 190, 54, -32511, 190, 54, -32511, 190, 54, -32510, 190, 249, -32446, 190, 54, 89, 190, 250, 190, 251,
    -32507, 190, 147, -32508, 190, 252, -32442, 190, 147, 89, -32502, 190, 253, -32437, 190, 253, 89, -32503, 190, 110,
    -32436, 190, 110, 89, -32503, 190, 42, -32498, 190, -32511, 42, -32497, 190, 42, -32483, 190, 254, -32501, 190, 42,
    89, 190, 250, 190, 251, -32504, 190, 161, -32511, 190, 252, -32442, 190, 161, 89, -32469, 190, 152, -32470, 190,
    152, 89, -32468, 190, 151, -32471, 190, 151, 89, -32501, 190, 240, -32493, 190, 153, 154, 155, 156, 157, 158,
    159, 160, -32510, 190, 241, 242, -32479, 190, 162, -32506, 190, 153, 89, -32501, 190, 240, -32493, 190, 153, 154,
    155, 156, 157, 158, 159, 160, -32510, 190, 241, 242, -32479, 190, 163, -32506, 190, 153, 89, -32501, 190, 240,
    -32493, 190, 153, 154, 155, 156, 157, 158, 159, 160, -32510, 190, 241, 242, -32479, 190, 255, -32506, 190, 153,
    89, -32501, 190, 256, -32482, 190, 148, -32479, 190, 178, -32507, 190, 257, 190, 148, 89, -32503, 190, 44, -32498,
    190, -32511, 44, -32497, 190, 118, -32492, 190, 138, -32504, 190, 258, -32502, 190, 44, 89, 190, 250, 190, 251,
    -32507, 190, 69, -32511, 190, 69, -32511, 190, 69, -32442, 190, 69, 89, -32501, 190, 256, -32482, 190, 148, -32479,
    190, 178, -32507, 190, 259, 190, 148, 89, 190, 260, 261, 262, 263, 180, 181, 182, 264, 190, 175, 190,
    256, -32510, 190, 265, -32486, 190, 148, -32479, 190, 178, -32507, 190, 266, 190, 175, 89, -32503, 190, 132, -32498,
    190, 267, 268, -32453, 190, 132, 89, 190, 260, 261, 262, 263, 180, 181, 182, -32509, 190, 256, 179, -32511,
    190, 265, -32486, 190, 148, -32479, 190, 178, -32507, 190, 266, 190, 179, 89, -32501, 190, 256, -32482, 190, 148,
    -32479, 190, 178, -32507, 190, 269, 190, 148, 89, -32501, 190, 256, -32482, 190, 148, -32479, 190, 178, -32507, 190,
    270, 190, 148, 89, -32501, 190, 256, -32482, 190, 148, -32479, 190, 178, -32507, 190, 271, 190, 148, 89, -32501,
    190, 256, -32482, 190, 148, -32479, 190, 178, -32507, 190, 272, 190, 148, 89, -32501, 190, 256, -32482, 190, 148,
    -32479, 190, 178, -32507, 190, 273, 190, 148, 89, -32501, 190, 256, -32482, 190, 148, -32479, 190, 178, -32507, 190,
    274, 190, 148, 89, 190, -32509, 88, 180, 181, 182, 88, 190, 88, 190, -32511, 88, -32511, 190, 88, -32486,
    190, 88, -32479, 190, 178, -32507, 190, 266, 190, 88, 89, -32503, 190, 47, -32498, 190, -32511, 47, -32497, 190,
    47, -32481, 190, 275, -32503, 190, 47, 89, -32503, 190, 47, -32498, 190, -32511, 47, -32497, 190, 47, -32481, 190,
    276, -32503, 190, 47, 89, 190, -32509, 89, 180, 181, 182, 89, 190, 89, 190, 256, 89, -32511, 190, 89,
    -32486, 190, 148, -32479, 190, 178, -32507, 190, 266, 190, 89, 89, 190, -32509, 91, 180, 181, 182, 91, 190,
    91, 190, 256, 91, -32511, 190, 91, -32486, 190, 148, -32479, 190, 178, -32507, 190, 266, 190, 91, 89, 190,
    -32509, 90, 180, 181, 182, 90, 190, 90, 190, 256, 90, -32511, 190, 90, -32486, 190, 148, -32479, 190, 178,
    -32507, 190, 266, 190, 90, 89, 190, -32509, 92, 180, 181, 182, 92, 190, 92, 190, 256, 92, -32511, 190,
    92, -32486, 190, 148, -32479, 190, 178, -32507, 190, 266, 190, 92, 89, 190, 260, 261, 262, 263, 180, 181,
    182, -32511, 190, 176, 190, 256, -32510, 190, 265, -32486, 190, 148, -32479, 190, 178, -32507, 190, 266, 190, 176,
    89, 190, 260, 261, 262, 263, 180, 181, 182, 93, 190, 93, 190, 256, 93, -32511, 190, 93, -32486, 190,
    148, -32479, 190, 178, -32507, 190, 266, 190, 93, 89, -32503, 190, 45, -32498, 190, -32511, 45, -32497, 190, 118,
    -32492, 190, 143, -32492, 190, 45, 89, -32503, 190, 46, -32498, 190, -32511, 46, -32497, 190, 118, -32492, 190, 143,
    -32492, 190, 46};

    // Unwinding action table for error repair.

    private static final int[] gen_unwindingTable = 
    {123, 76, 104, 104, 104, 104, 104, 0, 95, 10, 28, 35, 50, 71, 78, 104, 94, 3, 4, 5,
    6, 7, 8, 140, 105, 105, 105, 140, 139, 139, 105, 38, 106, 105, 38, 140, 105, 105, 105, 140,
    139, 40, 128, 40, 140, 139, 105, 110, 140, 114, 128, 55, 54, 105, 106, 105, 42, 108, 139, 140,
    128, 128, 128, 139, 44, 69, 139, 105, 105, 108, 139, 139, 139, 139, 139, 139, 88, 47, 47, 89,
    91, 90, 92, 105, 93, 45, 46};

    // The names of symbols.

    private static final String[] gen_symbols = 
    {
        "%%EOF",
        "-",
        "~",
        "&",
        "@",
        "*",
        "+",
        "?",
        "/",
        ":",
        ";",
        "=",
        "(",
        ")",
        "{",
        "}",
        "|",
        "#",
        ".",
        "->",
        "..",
        "%tokens",
        "%categories",
        "%conditions",
        "%terminals",
        "%productions",
        "%shift",
        "%reduce",
        "%options",
        "%repair",
        "%lr1",
        "%plr1",
        "%lalr1",
        "%any",
        "%none",
        "%unicode",
        "%uppercase",
        "%lowercase",
        "%titlecase",
        "%letter",
        "%digit",
        "%charsetsize",
        "%goal",
        "%java",
        "identifier",
        "number",
        "SectionList",
        "Goal",
        "Section",
        "OptionHeader",
        "OptionDefList",
        "TerminalHeader",
        "TerminalDefList",
        "ProductionHeader",
        "ProductionDefList",
        "CategoryHeader",
        "CategoryDefList",
        "ConditionHeader",
        "ConditionDefList",
        "TokenHeader",
        "TokenDefList",
        "OptionDefinition",
        "MaxInsertions",
        "MaxDeletions",
        "ValidationLength",
        "CharSetSize",
        "Symbol",
        "JavaName",
        "JavaIdentifier",
        "TerminalDefinition",
        "InsertionCost",
        "DeletionCost",
        "ProductionDefinition",
        "LinkName",
        "Parameter",
        "SymbolList",
        "ProductionPrec",
        "SymbolSet",
        "CategoryDefinition",
        "Category",
        "CatExp",
        "ConditionDefinition",
        "Condition",
        "ConditionSet",
        "TokenDefinition",
        "Token",
        "RegExp",
        "%%Goal"
    };

    // The link name for each production.

    private static final String[] gen_productionLink = 
    {
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "LR1",
        "PLR1",
        "LALR1",
        "repair",
        "charsetsize",
        "goal",
        "java",
        "",
        "",
        "",
        "",
        "",
        "simple",
        "qualified",
        "",
        "",
        "",
        "",
        "defaultCost",
        "withCost",
        "",
        "",
        "",
        "",
        "",
        "",
        "empty",
        "identifier",
        "empty",
        "number",
        "empty",
        "append",
        "empty",
        "appendShift",
        "appendReduce",
        "empty",
        "append",
        "",
        "",
        "",
        "",
        "",
        "number",
        "identifier",
        "numberRange",
        "identifierRange",
        "any",
        "none",
        "unicode",
        "uppercase",
        "lowercase",
        "titlecase",
        "letter",
        "digit",
        "paren",
        "difference",
        "intersection",
        "union",
        "",
        "",
        "",
        "",
        "",
        "",
        "empty",
        "append",
        "",
        "",
        "noContext",
        "rightContext",
        "",
        "oneChar",
        "paren",
        "KleeneClosure",
        "positiveClosure",
        "optionalClosure",
        "catenation",
        "difference",
        "intersection",
        "excluding",
        "including",
        "alternation",
        ""
    };




    // RLE decoding function

    private static synchronized void decodeRLE ()
    {
        if (gen_actionTable == null)
        {
            gen_actionTable = ArrayRLE.shortRLEToShort2D (rle_actionTable);
            rle_actionTable = null;
        }

        return;
    }




    // Constructor installs the generated tables into the ParserTable

    public JaccGrammarParserTable ()
    {
        super ();

        // Decode the run-length-encoded tables

        decodeRLE ();

        // Copy parsing tables into the ParserTable superclass

        _symbolCount = gen_symbolCount;
        _productionCount = gen_productionCount;
        _productionLHSSymbol = gen_productionLHSSymbol;
        _productionRHSLength = gen_productionRHSLength;
        _productionParam = gen_productionParam;
        _maxInsertion = gen_maxInsertion;
        _maxDeletion = gen_maxDeletion;
        _validationLength = gen_validationLength;
        _singlePointInsertionCount = gen_singlePointInsertionCount;
        _singlePointInsertions = gen_singlePointInsertions;
        _goalProduction = gen_goalProduction;
        _eofSymbol = gen_eofSymbol;
        _insertionCost = gen_insertionCost;
        _deletionCost = gen_deletionCost;
        _stateCount = gen_stateCount;
        _actionTable = gen_actionTable;
        _unwindingTable = gen_unwindingTable;

        // Copy dynamic-link tables into the ParserTable superclass

        _symbols = gen_symbols;
        _productionLink = gen_productionLink;

        return;
    }


}

