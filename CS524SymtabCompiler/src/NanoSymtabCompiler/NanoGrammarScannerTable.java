// File generated by Invisible Jacc version 1.1.
// Invisible Jacc is Copyright 1997-1998 Invisible Software, Inc.

package NanoSymtabCompiler;

import invisible.jacc.parse.ScannerTable;
import invisible.jacc.util.ArrayRLE;

public class NanoGrammarScannerTable extends ScannerTable
{

    // The number of different character categories.

    private static final int gen_categoryCount = 48;

    // The character set size.

    private static final int gen_charSetSize = 256;

    // The character category table.

    private static byte[] gen_categoryTable = null;
    private static short[] rle_categoryTable = 
    {256, 2048, 47, 46, 0, 47, 45, 4352, 47, 0, 30, 1024, 34, 35, 27, 38, 31, 39, 0, 28,
    2348, 33, 32, 41, 40, 42, 256, 6443, 36, 0, 37, 0, 29, 0, 1, 2, 3, 4, 5, 6,
    7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
    -31744};

    // The number of tokens.

    private static final int gen_tokenCount = 56;

    // The token parameters.

    private static final int[] gen_tokenParam = 
    {0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
    18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
    38, 39, 40, 41, 43, 42, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    // The number of tokens that have a right context.

    private static final int gen_contextCount = 3;

    // Context number table.

    private static final int[] gen_contextNumber = 
    {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 1, 2, 3, 3};

    // The number of start conditions for the forward DFA.

    private static final int gen_conditionCount = 3;

    // The number of states in the forward DFA.

    private static final int gen_fwdStateCount = 131;

    // The number of recognition codes in the forward DFA.

    private static final int gen_fwdRecognitionCount = 63;

    // Forward DFA initial state table.

    private static final int[] gen_fwdInitialState = 
    {1, 3, 2};

    // Forward DFA transition table.

    private static short[][] gen_fwdTransitionTable = null;
    private static short[] rle_fwdTransitionTable = 
    {131, 48, -32465, 131, 48, 131, 13, 15, 7, 18, 16, 20, -32511, 10, 17, -32509, 10, 9, 8, 19,
    10, 14, 10, 11, 10, 12, -32509, 10, 6, 5, 131, 34, 21, 22, 23, 24, 25, 26, 27, 28,
    29, 30, 31, 32, 10, 33, 36, 35, 4, 48, -32468, 37, 39, 38, 37, 48, -32486, 40, 42, 41,
    -32497, 40, 44, 43, 40, 48, -32466, 131, 4, 48, -32486, 131, 46, 45, -32494, 131, 48, -32465, 131, 48,
    131, 48, -32500, 10, 47, -32502, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32496, 10,
    49, -32505, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32499, 10, 50, -32502, 10, -32511,
    131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32487, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510,
    131, 48, 131, -32506, 10, 53, -32507, 10, 51, -32511, 10, 52, -32505, 10, -32511, 131, 10, -32500, 131, -32511,
    10, -32510, 131, 48, 131, 54, -32488, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32500,
    10, 55, -32501, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32509, 10, 56, -32492, 10,
    -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32509, 10, 58, -32504, 10, 57, -32502, 10, -32511,
    131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32502, 10, 60, 10, 59, -32501, 10, -32511, 131, 10,
    -32500, 131, -32511, 10, -32510, 131, 48, 131, -32508, 10, 62, -32506, 10, 61, -32501, 10, -32511, 131, 10, -32500,
    131, -32511, 10, -32510, 131, 48, 131, -32499, 10, 63, -32502, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510,
    131, 48, 131, -32496, 10, 64, -32505, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, 66,
    -32500, 10, 65, -32502, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, -32465, 131, 48, -32465, 131,
    48, -32473, 131, 67, -32506, 131, 48, -32465, 131, 48, -32465, 131, 48, -32465, 131, 48, -32465, 131, 48, -32465,
    131, 48, -32465, 131, 48, -32473, 131, 68, -32506, 131, 48, -32473, 131, 69, 131, 70, -32508, 131, 48, -32473,
    131, 71, -32506, 131, 48, -32469, 131, 33, -32510, 131, 48, -32483, 34, 72, -32499, 34, 74, 73, 34, 48,
    -32465, 131, 48, -32467, 131, 35, 131, 48, -32468, 37, 131, -32511, 37, 48, -32468, 37, 131, -32511, 37, 48,
    -32467, 131, 75, 131, 48, -32486, 40, 131, -32496, 40, 131, -32511, 40, 48, -32486, 76, 77, -32496, 76, 77,
    -32511, 76, 48, -32485, 78, 79, -32494, 78, 48, -32486, 40, 131, -32496, 40, 131, -32511, 40, 48, -32467, 131,
    80, 131, 48, -32465, 131, 48, -32465, 131, 48, 131, -32500, 10, 81, -32501, 10, -32511, 131, 10, -32500, 131,
    -32511, 10, -32510, 131, 48, 131, -32502, 10, 82, -32499, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131,
    48, 131, -32487, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32494, 10, 83, -32507, 10,
    -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32487, 10, -32511, 131, 10, -32500, 131, -32511, 10,
    -32510, 131, 48, 131, -32493, 10, 84, -32508, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131,
    -32509, 10, 85, -32492, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32496, 10, 86, -32505,
    10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32510, 10, 87, -32491, 10, -32511, 131, 10,
    -32500, 131, -32511, 10, -32510, 131, 48, 131, 89, -32495, 10, 88, -32507, 10, -32511, 131, 10, -32500, 131, -32511,
    10, -32510, 131, 48, 131, -32499, 10, 90, -32502, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48,
    131, -32507, 10, 91, -32494, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32510, 10, 92,
    -32491, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32495, 10, 93, -32506, 10, -32511, 131,
    10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32494, 10, 94, -32507, 10, -32511, 131, 10, -32500, 131, -32511,
    10, -32510, 131, 48, 131, -32487, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32487, 10,
    -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32505, 10, 96, -32508, 10, 95, -32502, 10, -32511,
    131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32496, 10, 97, -32505, 10, -32511, 131, 10, -32500, 131,
    -32511, 10, -32510, 131, 48, 131, -32502, 10, 98, -32499, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131,
    48, -32465, 131, 48, -32465, 131, 48, -32465, 131, 48, -32465, 131, 48, -32465, 131, 48, -32483, 131, 99, -32496,
    131, 48, -32483, 34, 72, -32499, 34, 74, 73, 34, 48, -32483, 100, 131, -32499, 100, -32511, 74, 100, 48,
    -32465, 131, 48, -32486, 40, 131, -32496, 40, 131, -32511, 40, 48, -32465, 131, 48, -32465, 131, 48, -32465, 131,
    48, -32465, 131, 48, 131, -32495, 10, 101, -32506, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48,
    131, -32502, 10, 102, -32499, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32487, 10, -32511,
    131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32509, 10, 103, -32492, 10, -32511, 131, 10, -32500, 131,
    -32511, 10, -32510, 131, 48, 131, -32500, 10, 104, -32501, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131,
    48, 131, -32487, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32487, 10, -32511, 131, 10,
    -32500, 131, -32511, 10, -32510, 131, 48, 131, -32493, 10, 105, -32508, 10, -32511, 131, 10, -32500, 131, -32511, 10,
    -32510, 131, 48, 131, -32510, 10, 106, -32491, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131,
    -32502, 10, 107, -32499, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32505, 10, 108, -32496,
    10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32487, 10, -32511, 131, 10, -32500, 131, -32511,
    10, -32510, 131, 48, 131, -32509, 10, 109, -32492, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48,
    131, -32509, 10, 110, -32492, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32511, 10, 111,
    -32490, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32500, 10, 112, -32501, 10, -32511, 131,
    10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32487, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131,
    48, 131, -32495, 10, 113, -32506, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, -32483, 99, 72,
    -32499, 99, 131, -32511, 99, 48, -32483, 100, 131, -32499, 100, -32511, 74, 100, 48, 131, -32494, 10, 114, -32507,
    10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32487, 10, -32511, 131, 10, -32500, 131, -32511,
    10, -32510, 131, 48, 131, -32487, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32487, 10,
    -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32496, 10, 115, -32505, 10, -32511, 131, 10, -32500,
    131, -32511, 10, -32510, 131, 48, 131, -32487, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131,
    -32509, 10, 116, -32492, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32500, 10, 117, -32501,
    10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32487, 10, -32511, 131, 10, -32500, 131, -32511,
    10, -32510, 131, 48, 131, -32507, 10, 118, -32494, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48,
    131, -32509, 10, 119, -32492, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32494, 10, 120,
    -32507, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32509, 10, 121, -32492, 10, -32511, 131,
    10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32487, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131,
    48, 131, -32500, 10, 122, -32501, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, 123, -32488,
    10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32487, 10, -32511, 131, 10, -32500, 131, -32511,
    10, -32510, 131, 48, 131, -32509, 10, 124, -32492, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48,
    131, -32510, 10, 125, -32491, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32487, 10, -32511,
    131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32487, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510,
    131, 48, 131, -32487, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32500, 10, 126, -32501,
    10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32496, 10, 127, -32505, 10, -32511, 131, 10,
    -32500, 131, -32511, 10, -32510, 131, 48, 131, -32493, 10, 128, -32508, 10, -32511, 131, 10, -32500, 131, -32511, 10,
    -32510, 131, 48, 131, -32487, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32487, 10, -32511,
    131, 10, -32500, 131, -32511, 10, -32510, 131, 48, 131, -32496, 10, 129, -32505, 10, -32511, 131, 10, -32500, 131,
    -32511, 10, -32510, 131, 48, 131, -32509, 10, 130, -32492, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131,
    48, 131, -32487, 10, -32511, 131, 10, -32500, 131, -32511, 10, -32510, 131};

    // Forward DFA recognition table.

    private static final int[] gen_fwdRecognitionTable = 
    {0, 1, 2, 3, 1, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 2, 22, 23,
    3, 24, 25, 26, 27, 28, 29, 6, 6, 30, 6, 31, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 32, 33, 6, 6, 6, 34, 35, 36, 37, 38, 39, 40, 40, 23, 41, 42, 43, 44,
    27, 6, 6, 45, 6, 6, 46, 47, 6, 6, 6, 6, 48, 6, 6, 6, 6, 49, 6, 0,
    20, 6, 50, 51, 52, 6, 53, 6, 6, 54, 6, 6, 6, 6, 55, 6, 6, 56, 6, 6,
    57, 58, 59, 6, 6, 6, 60, 61, 6, 6, 62};

    // Forward DFA token list.

    private static final int[] gen_fwdTokenListLength = 
    {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    0, 1, 3, 2, 1, 0, 3, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
    1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2};

    private static final int[][] gen_fwdTokenList = 
    {
        {},
        {0},
        {48},
        {50},
        {35},
        {34},
        {45},
        {25},
        {26},
        {27},
        {28},
        {29},
        {30},
        {31},
        {32},
        {33},
        {37},
        {40},
        {42},
        {44},
        {},
        {55},
        {48, 49, 55},
        {49, 55},
        {50},
        {},
        {50, 51, 55},
        {51, 55},
        {1},
        {2},
        {22, 45},
        {16, 45},
        {12, 45},
        {17, 45},
        {36},
        {38},
        {41},
        {39},
        {43},
        {46},
        {47},
        {50, 53},
        {53},
        {52},
        {54},
        {20, 45},
        {4, 45},
        {21, 45},
        {6, 45},
        {15, 45},
        {19, 45},
        {23, 45},
        {13, 45},
        {11, 45},
        {14, 45},
        {3, 45},
        {5, 45},
        {10, 45},
        {24, 45},
        {18, 45},
        {8, 45},
        {7, 45},
        {9, 45}
    };

    // Forward DFA context split table.

    private static boolean[][] gen_fwdContextSplit = null;
    private static byte[] rle_fwdContextSplit = 
    {0, 63, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2,
    0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3,
    2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0,
    3, 2, 0, 3, -128, 1, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 1, -128, 0,
    3, 0, -128, 0, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0,
    3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2,
    0, 3, 2, 0, 3, 2, 0, 3, -128, 1, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0,
    3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2,
    0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3,
    2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2};

    // The number of states in the reverse DFA.

    private static final int gen_revStateCount = 6;

    // The number of recognition codes in the reverse DFA.

    private static final int gen_revRecognitionCount = 5;

    // Reverse DFA transition table.

    private static short[][] gen_revTransitionTable = null;
    private static short[] rle_revTransitionTable = 
    {6, 48, -32485, 3, 4, -32497, 3, 1, 2, 3, 48, -32465, 6, 48, -32468, 6, 5, -32511, 6, 48,
    -32465, 6, 48, -32465, 6, 48, -32465, 6};

    // Reverse DFA recognition table.

    private static final int[] gen_revRecognitionTable = 
    {0, 1, 1, 2, 3, 4};

    // Reverse DFA context split table.

    private static boolean[][] gen_revContextSplit = null;
    private static byte[] rle_revContextSplit = 
    {0, 5, 0, 3, 2, 0, 3, -126, 0, 3, 0, -127, 0, 3, 1, -128, 0, 3, -128, 1};

    // The names of start conditions.

    private static final String[] gen_conditionNames = 
    {
        "notInComment",
        "inBracketedComment",
        "inLineComment"
    };

    // The names of tokens.

    private static final String[] gen_tokenNames = 
    {
        "whiteSpace",
        "beginLineComment",
        "beginBracketedComment",
        "const",
        "var",
        "begin",
        "end",
        "integer",
        "boolean",
        "procedure",
        "print",
        "read",
        "if",
        "then",
        "else",
        "for",
        "to",
        "do",
        "return",
        "call",
        "not",
        "and",
        "or",
        "true",
        "false",
        "comma",
        "semicolon",
        "colon",
        "lparen",
        "rparen",
        "lbracket",
        "rbracket",
        "plus",
        "minus",
        "star",
        "slash",
        "assign",
        "constEquals",
        "isEquals",
        "notEquals",
        "lessThan",
        "lessThanEquals",
        "greaterThan",
        "greaterThanEquals",
        "intConst",
        "id",
        "stringConst",
        "stringConstRunOn",
        "lineCommentContents",
        "endLineComment",
        "bracketedCommentContents",
        "bracketedCommentLineEnd",
        "embeddedStar",
        "embeddedSlash",
        "endBracketedComment",
        "lineEnd"
    };

    // The link name for each token.

    private static final String[] gen_tokenLink = 
    {
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
    };




    // RLE decoding function

    private static synchronized void decodeRLE ()
    {
        if (gen_categoryTable == null)
        {
            gen_categoryTable = ArrayRLE.byteRLEToByte1D (rle_categoryTable);
            rle_categoryTable = null;
        }

        if (gen_fwdTransitionTable == null)
        {
            gen_fwdTransitionTable = ArrayRLE.shortRLEToShort2D (rle_fwdTransitionTable);
            rle_fwdTransitionTable = null;
        }

        if (gen_fwdContextSplit == null)
        {
            gen_fwdContextSplit = ArrayRLE.booleanRLEToBoolean2D (rle_fwdContextSplit);
            rle_fwdContextSplit = null;
        }

        if (gen_revTransitionTable == null)
        {
            gen_revTransitionTable = ArrayRLE.shortRLEToShort2D (rle_revTransitionTable);
            rle_revTransitionTable = null;
        }

        if (gen_revContextSplit == null)
        {
            gen_revContextSplit = ArrayRLE.booleanRLEToBoolean2D (rle_revContextSplit);
            rle_revContextSplit = null;
        }

        return;
    }




    // Constructor installs the generated tables into the ScannerTable

    public NanoGrammarScannerTable ()
    {
        super ();

        // Decode the run-length-encoded tables

        decodeRLE ();

        // Copy scanning tables into the ScannerTable superclass

        _categoryCount = gen_categoryCount;
        _charSetSize = gen_charSetSize;
        _categoryTable = gen_categoryTable;
        _tokenCount = gen_tokenCount;
        _tokenParam = gen_tokenParam;
        _contextCount = gen_contextCount;
        _contextNumber = gen_contextNumber;
        _conditionCount = gen_conditionCount;
        _fwdStateCount = gen_fwdStateCount;
        _fwdRecognitionCount = gen_fwdRecognitionCount;
        _fwdInitialState = gen_fwdInitialState;
        _fwdTransitionTable = gen_fwdTransitionTable;
        _fwdRecognitionTable = gen_fwdRecognitionTable;
        _fwdTokenListLength = gen_fwdTokenListLength;
        _fwdTokenList = gen_fwdTokenList;
        _fwdContextSplit = gen_fwdContextSplit;
        _revStateCount = gen_revStateCount;
        _revRecognitionCount = gen_revRecognitionCount;
        _revTransitionTable = gen_revTransitionTable;
        _revRecognitionTable = gen_revRecognitionTable;
        _revContextSplit = gen_revContextSplit;

        // Copy dynamic-link tables into the ScannerTable superclass

        _conditionNames = gen_conditionNames;
        _tokenNames = gen_tokenNames;
        _tokenLink = gen_tokenLink;

        return;
    }


}

