// File generated by Invisible Jacc version 1.1.
// Invisible Jacc is Copyright 1997-1998 Invisible Software, Inc.

package NanoSymtabCompiler;

import invisible.jacc.parse.ScannerTable;
import invisible.jacc.util.ArrayRLE;

public class NanoGrammarScannerTable extends ScannerTable
{

    // The number of different character categories.

    private static final int gen_categoryCount = 48;

    // The character set size.

    private static final int gen_charSetSize = 256;

    // The character category table.

    private static byte[] gen_categoryTable = null;
    private static short[] rle_categoryTable = 
    {256, 2048, 47, 46, 0, 47, 45, 4352, 47, 0, 30, 1024, 34, 35, 27, 38, 31, 39, 0, 28,
    2348, 33, 32, 41, 40, 42, 256, 6443, 36, 0, 37, 0, 29, 0, 1, 2, 3, 4, 5, 6,
    7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
    -31744};

    // The number of tokens.

    private static final int gen_tokenCount = 55;

    // The token parameters.

    private static final int[] gen_tokenParam = 
    {0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
    18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
    38, 39, 40, 41, 41, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    // The number of tokens that have a right context.

    private static final int gen_contextCount = 3;

    // Context number table.

    private static final int[] gen_contextNumber = 
    {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 1, 2, 3, 3};

    // The number of start conditions for the forward DFA.

    private static final int gen_conditionCount = 3;

    // The number of states in the forward DFA.

    private static final int gen_fwdStateCount = 128;

    // The number of recognition codes in the forward DFA.

    private static final int gen_fwdRecognitionCount = 60;

    // Forward DFA initial state table.

    private static final int[] gen_fwdInitialState = 
    {1, 3, 2};

    // Forward DFA transition table.

    private static short[][] gen_fwdTransitionTable = null;
    private static short[] rle_fwdTransitionTable = 
    {128, 48, -32465, 128, 48, 128, 13, 15, 7, 18, 16, 20, -32511, 10, 17, -32509, 10, 9, 8, 19,
    10, 14, 10, 11, 10, 12, -32509, 10, 6, 5, 128, 34, 21, 22, 23, 24, 25, 26, 27, 28,
    29, 30, 31, 32, 10, 33, 35, 128, 4, 48, -32468, 36, 37, -32511, 36, 48, -32486, 38, 40, 39,
    -32497, 38, 41, -32511, 38, 48, -32466, 128, 4, 48, -32486, 128, 43, 42, -32494, 128, 48, -32465, 128, 48,
    128, 45, -32500, 10, 44, -32502, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32496, 10,
    46, -32505, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32499, 10, 47, -32502, 10, -32511,
    128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32487, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510,
    128, 48, 128, -32506, 10, 50, -32507, 10, 48, -32511, 10, 49, -32505, 10, -32511, 128, 10, -32500, 128, -32511,
    10, -32510, 128, 48, 128, 51, -32488, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32500,
    10, 52, -32501, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32509, 10, 53, -32492, 10,
    -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32509, 10, 55, -32504, 10, 54, -32502, 10, -32511,
    128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32502, 10, 57, 10, 56, -32501, 10, -32511, 128, 10,
    -32500, 128, -32511, 10, -32510, 128, 48, 128, -32508, 10, 59, -32506, 10, 58, -32501, 10, -32511, 128, 10, -32500,
    128, -32511, 10, -32510, 128, 48, 128, -32499, 10, 60, -32502, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510,
    128, 48, 128, -32496, 10, 61, -32505, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, 63,
    -32500, 10, 62, -32502, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, -32465, 128, 48, -32465, 128,
    48, -32473, 128, 64, -32506, 128, 48, -32465, 128, 48, -32465, 128, 48, -32465, 128, 48, -32465, 128, 48, -32465,
    128, 48, -32465, 128, 48, -32465, 128, 48, -32473, 128, 65, 128, 66, -32508, 128, 48, -32473, 128, 67, -32506,
    128, 48, -32469, 128, 33, -32510, 128, 48, -32483, 34, 68, -32499, 34, 69, -32511, 34, 48, -32467, 128, 70,
    128, 48, -32468, 36, 128, -32511, 36, 48, -32467, 128, 71, 128, 48, -32486, 38, 128, -32496, 38, 128, -32511,
    38, 48, -32486, 72, 73, -32496, 72, 73, -32511, 72, 48, -32485, 74, 75, -32494, 74, 48, -32467, 128, 76,
    128, 48, -32465, 128, 48, -32465, 128, 48, 128, -32500, 10, 77, -32501, 10, -32511, 128, 10, -32500, 128, -32511,
    10, -32510, 128, 48, 128, -32502, 10, 78, -32499, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48,
    128, -32487, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32494, 10, 79, -32507, 10, -32511,
    128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32487, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510,
    128, 48, 128, -32493, 10, 80, -32508, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32509,
    10, 81, -32492, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32496, 10, 82, -32505, 10,
    -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32510, 10, 83, -32491, 10, -32511, 128, 10, -32500,
    128, -32511, 10, -32510, 128, 48, 128, 85, -32495, 10, 84, -32507, 10, -32511, 128, 10, -32500, 128, -32511, 10,
    -32510, 128, 48, 128, -32499, 10, 86, -32502, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128,
    -32507, 10, 87, -32494, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32510, 10, 88, -32491,
    10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32495, 10, 89, -32506, 10, -32511, 128, 10,
    -32500, 128, -32511, 10, -32510, 128, 48, 128, -32494, 10, 90, -32507, 10, -32511, 128, 10, -32500, 128, -32511, 10,
    -32510, 128, 48, 128, -32487, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32487, 10, -32511,
    128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32505, 10, 92, -32508, 10, 91, -32502, 10, -32511, 128,
    10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32496, 10, 93, -32505, 10, -32511, 128, 10, -32500, 128, -32511,
    10, -32510, 128, 48, 128, -32502, 10, 94, -32499, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48,
    -32465, 128, 48, -32465, 128, 48, -32465, 128, 48, -32465, 128, 48, -32483, 128, 95, -32496, 128, 48, -32483, 96,
    128, -32499, 96, 69, 97, 96, 48, -32465, 128, 48, -32465, 128, 48, -32486, 38, 128, -32496, 38, 128, -32511,
    38, 48, -32465, 128, 48, -32465, 128, 48, -32465, 128, 48, -32465, 128, 48, 128, -32495, 10, 98, -32506, 10,
    -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32502, 10, 99, -32499, 10, -32511, 128, 10, -32500,
    128, -32511, 10, -32510, 128, 48, 128, -32487, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128,
    -32509, 10, 100, -32492, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32500, 10, 101, -32501,
    10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32487, 10, -32511, 128, 10, -32500, 128, -32511,
    10, -32510, 128, 48, 128, -32487, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32493, 10,
    102, -32508, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32510, 10, 103, -32491, 10, -32511,
    128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32502, 10, 104, -32499, 10, -32511, 128, 10, -32500, 128,
    -32511, 10, -32510, 128, 48, 128, -32505, 10, 105, -32496, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128,
    48, 128, -32487, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32509, 10, 106, -32492, 10,
    -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32509, 10, 107, -32492, 10, -32511, 128, 10, -32500,
    128, -32511, 10, -32510, 128, 48, 128, -32511, 10, 108, -32490, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510,
    128, 48, 128, -32500, 10, 109, -32501, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32487,
    10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32495, 10, 110, -32506, 10, -32511, 128, 10,
    -32500, 128, -32511, 10, -32510, 128, 48, -32483, 95, 68, -32499, 95, 128, -32511, 95, 48, -32483, 96, 128, -32499,
    96, 69, -32511, 96, 48, -32483, 96, 128, -32499, 96, 69, -32511, 96, 48, 128, -32494, 10, 111, -32507, 10,
    -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32487, 10, -32511, 128, 10, -32500, 128, -32511, 10,
    -32510, 128, 48, 128, -32487, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32487, 10, -32511,
    128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32496, 10, 112, -32505, 10, -32511, 128, 10, -32500, 128,
    -32511, 10, -32510, 128, 48, 128, -32487, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32509,
    10, 113, -32492, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32500, 10, 114, -32501, 10,
    -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32487, 10, -32511, 128, 10, -32500, 128, -32511, 10,
    -32510, 128, 48, 128, -32507, 10, 115, -32494, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128,
    -32509, 10, 116, -32492, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32494, 10, 117, -32507,
    10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32509, 10, 118, -32492, 10, -32511, 128, 10,
    -32500, 128, -32511, 10, -32510, 128, 48, 128, -32487, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48,
    128, -32500, 10, 119, -32501, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, 120, -32488, 10,
    -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32487, 10, -32511, 128, 10, -32500, 128, -32511, 10,
    -32510, 128, 48, 128, -32509, 10, 121, -32492, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128,
    -32510, 10, 122, -32491, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32487, 10, -32511, 128,
    10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32487, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128,
    48, 128, -32487, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32500, 10, 123, -32501, 10,
    -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32496, 10, 124, -32505, 10, -32511, 128, 10, -32500,
    128, -32511, 10, -32510, 128, 48, 128, -32493, 10, 125, -32508, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510,
    128, 48, 128, -32487, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32487, 10, -32511, 128,
    10, -32500, 128, -32511, 10, -32510, 128, 48, 128, -32496, 10, 126, -32505, 10, -32511, 128, 10, -32500, 128, -32511,
    10, -32510, 128, 48, 128, -32509, 10, 127, -32492, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128, 48,
    128, -32487, 10, -32511, 128, 10, -32500, 128, -32511, 10, -32510, 128};

    // Forward DFA recognition table.

    private static final int[] gen_fwdRecognitionTable = 
    {0, 1, 2, 3, 1, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 2, 0, 3, 21,
    22, 0, 23, 24, 6, 6, 25, 6, 26, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 27,
    28, 6, 6, 6, 29, 30, 31, 32, 33, 20, 34, 35, 36, 37, 38, 39, 40, 6, 6, 41,
    6, 6, 42, 43, 6, 6, 6, 6, 44, 6, 6, 6, 6, 45, 6, 0, 20, 46, 6, 47,
    48, 49, 6, 50, 6, 6, 51, 6, 6, 6, 6, 52, 6, 6, 53, 6, 6, 54, 55, 56,
    6, 6, 6, 57, 58, 6, 6, 59};

    // Forward DFA token list.

    private static final int[] gen_fwdTokenListLength = 
    {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    0, 1, 0, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1,
    2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2};

    private static final int[][] gen_fwdTokenList = 
    {
        {},
        {0},
        {47},
        {49},
        {33},
        {32},
        {41},
        {23},
        {24},
        {25},
        {26},
        {27},
        {28},
        {29},
        {30},
        {31},
        {35},
        {37},
        {39},
        {42},
        {},
        {49},
        {},
        {1},
        {2},
        {22, 41},
        {16, 41},
        {12, 41},
        {17, 41},
        {34},
        {38},
        {36},
        {40},
        {45},
        {54},
        {48, 54},
        {49, 52},
        {52},
        {51},
        {53},
        {50, 54},
        {20, 41},
        {4, 41},
        {21, 41},
        {6, 41},
        {15, 41},
        {46},
        {19, 41},
        {41, 43},
        {13, 41},
        {11, 41},
        {14, 41},
        {3, 41},
        {5, 41},
        {10, 41},
        {41, 44},
        {18, 41},
        {8, 41},
        {7, 41},
        {9, 41}
    };

    // Forward DFA context split table.

    private static boolean[][] gen_fwdContextSplit = null;
    private static byte[] rle_fwdContextSplit = 
    {0, 60, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2,
    0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3,
    2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0,
    3, 2, 0, 3, -128, 1, 0, 3, 1, -128, 0, 3, 0, -128, 0, 0, 3, 2, 0, 3,
    2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0,
    3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2,
    0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3,
    2, 0, 3, 2, 0, 3, -128, 1, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2,
    0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3,
    2, 0, 3, 2, 0, 3, 2};

    // The number of states in the reverse DFA.

    private static final int gen_revStateCount = 5;

    // The number of recognition codes in the reverse DFA.

    private static final int gen_revRecognitionCount = 4;

    // Reverse DFA transition table.

    private static short[][] gen_revTransitionTable = null;
    private static short[] rle_revTransitionTable = 
    {5, 48, -32485, 1, 3, -32496, 1, 2, 1, 48, -32465, 5, 48, -32468, 5, 4, -32511, 5, 48, -32465,
    5, 48, -32465, 5};

    // Reverse DFA recognition table.

    private static final int[] gen_revRecognitionTable = 
    {0, 1, 1, 2, 3};

    // Reverse DFA context split table.

    private static boolean[][] gen_revContextSplit = null;
    private static byte[] rle_revContextSplit = 
    {0, 4, 0, 3, 2, 0, 3, 0, -127, 0, 3, 1, -128, 0, 3, -128, 1};

    // The names of start conditions.

    private static final String[] gen_conditionNames = 
    {
        "notInComment",
        "inBracketedComment",
        "inLineComment"
    };

    // The names of tokens.

    private static final String[] gen_tokenNames = 
    {
        "whiteSpace",
        "beginLineComment",
        "beginBracketedComment",
        "const",
        "var",
        "begin",
        "end",
        "integer",
        "boolean",
        "procedure",
        "print",
        "read",
        "if",
        "then",
        "else",
        "for",
        "to",
        "do",
        "return",
        "call",
        "not",
        "and",
        "or",
        "comma",
        "semicolon",
        "colon",
        "lparen",
        "rparen",
        "lbracket",
        "rbracket",
        "plus",
        "minus",
        "star",
        "slash",
        "assign",
        "equals",
        "notEquals",
        "lessThan",
        "lessThanEquals",
        "greaterThan",
        "greaterThanEquals",
        "id",
        "intConst",
        "boolConst",
        "boolConst",
        "stringConst",
        "stringConstRunOn",
        "lineCommentContents",
        "endLineComment",
        "bracketedCommentContents",
        "bracketedCommentLineEnd",
        "embeddedStar",
        "embeddedSlash",
        "endBracketedComment",
        "lineEnd"
    };

    // The link name for each token.

    private static final String[] gen_tokenLink = 
    {
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "true",
        "false",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
    };




    // RLE decoding function

    private static synchronized void decodeRLE ()
    {
        if (gen_categoryTable == null)
        {
            gen_categoryTable = ArrayRLE.byteRLEToByte1D (rle_categoryTable);
            rle_categoryTable = null;
        }

        if (gen_fwdTransitionTable == null)
        {
            gen_fwdTransitionTable = ArrayRLE.shortRLEToShort2D (rle_fwdTransitionTable);
            rle_fwdTransitionTable = null;
        }

        if (gen_fwdContextSplit == null)
        {
            gen_fwdContextSplit = ArrayRLE.booleanRLEToBoolean2D (rle_fwdContextSplit);
            rle_fwdContextSplit = null;
        }

        if (gen_revTransitionTable == null)
        {
            gen_revTransitionTable = ArrayRLE.shortRLEToShort2D (rle_revTransitionTable);
            rle_revTransitionTable = null;
        }

        if (gen_revContextSplit == null)
        {
            gen_revContextSplit = ArrayRLE.booleanRLEToBoolean2D (rle_revContextSplit);
            rle_revContextSplit = null;
        }

        return;
    }




    // Constructor installs the generated tables into the ScannerTable

    public NanoGrammarScannerTable ()
    {
        super ();

        // Decode the run-length-encoded tables

        decodeRLE ();

        // Copy scanning tables into the ScannerTable superclass

        _categoryCount = gen_categoryCount;
        _charSetSize = gen_charSetSize;
        _categoryTable = gen_categoryTable;
        _tokenCount = gen_tokenCount;
        _tokenParam = gen_tokenParam;
        _contextCount = gen_contextCount;
        _contextNumber = gen_contextNumber;
        _conditionCount = gen_conditionCount;
        _fwdStateCount = gen_fwdStateCount;
        _fwdRecognitionCount = gen_fwdRecognitionCount;
        _fwdInitialState = gen_fwdInitialState;
        _fwdTransitionTable = gen_fwdTransitionTable;
        _fwdRecognitionTable = gen_fwdRecognitionTable;
        _fwdTokenListLength = gen_fwdTokenListLength;
        _fwdTokenList = gen_fwdTokenList;
        _fwdContextSplit = gen_fwdContextSplit;
        _revStateCount = gen_revStateCount;
        _revRecognitionCount = gen_revRecognitionCount;
        _revTransitionTable = gen_revTransitionTable;
        _revRecognitionTable = gen_revRecognitionTable;
        _revContextSplit = gen_revContextSplit;

        // Copy dynamic-link tables into the ScannerTable superclass

        _conditionNames = gen_conditionNames;
        _tokenNames = gen_tokenNames;
        _tokenLink = gen_tokenLink;

        return;
    }


}

