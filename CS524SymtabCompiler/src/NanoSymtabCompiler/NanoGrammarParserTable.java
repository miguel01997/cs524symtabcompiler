// File generated by Invisible Jacc version 1.1.
// Invisible Jacc is Copyright 1997-1998 Invisible Software, Inc.

package NanoSymtabCompiler;

import invisible.jacc.parse.ParserTable;
import invisible.jacc.util.ArrayRLE;

public class NanoGrammarParserTable extends ParserTable
{

    // The number of symbols.

    private static final int gen_symbolCount = 94;

    // The number of productions.

    private static final int gen_productionCount = 93;

    // The symbol on the left hand side of each production.

    private static final int[] gen_productionLHSSymbol = 
    {46, 45, 48, 48, 49, 49, 50, 50, 54, 54, 47, 55, 51, 52, 56, 59, 59, 57, 57, 62,
    62, 58, 64, 65, 66, 66, 66, 68, 61, 61, 63, 63, 53, 53, 53, 53, 53, 53, 53, 53,
    67, 76, 78, 77, 69, 79, 79, 70, 81, 81, 82, 82, 71, 71, 72, 72, 83, 84, 85, 86,
    73, 74, 75, 75, 87, 87, 80, 80, 80, 80, 88, 88, 88, 88, 60, 60, 60, 89, 89, 89,
    89, 89, 91, 91, 92, 92, 92, 92, 92, 92, 90, 90, 93};

    // The length of the right hand side of each production.

    private static final int[] gen_productionRHSLength = 
    {1, 13, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 5, 3, 1, 5, 5, 6,
    4, 2, 6, 1, 3, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    11, 0, 0, 0, 6, 0, 3, 6, 0, 3, 1, 4, 4, 7, 2, 2, 2, 2, 5, 0,
    8, 2, 5, 6, 3, 1, 3, 3, 3, 1, 3, 3, 3, 1, 1, 2, 2, 1, 1, 1,
    3, 5, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 2};

    // The parameter for each production.

    private static final int[] gen_productionParam = 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    // The maximum number of insertions during error repair.

    private static final int gen_maxInsertion = 100;

    // The maximum number of deletions during error repair.

    private static final int gen_maxDeletion = 200;

    // The validation length for error repair.

    private static final int gen_validationLength = 5;

    // The number of single-point insertions for error repair.

    private static final int gen_singlePointInsertionCount = 44;

    // The list of symbols for single-point insertions.

    private static final int[] gen_singlePointInsertions = 
    {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42, 43, 44};

    // The goal production.

    private static final int gen_goalProduction = 92;

    // The end-of-file symbol.

    private static final int gen_eofSymbol = 0;

    // Insertion cost of each symbol for error repair.

    private static final int[] gen_insertionCost = 
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    // Deletion cost of each symbol for error repair.

    private static final int[] gen_deletionCost = 
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    // The number of LR(1) states.

    private static final int gen_stateCount = 131;

    // Parsing action table.

    private static short[][] gen_actionTable = null;
    private static short[] rle_actionTable = 
    {131, 95, 186, -32510, 10, -32510, 186, 10, -32476, 186, 93, 187, 188, -32467, 186, 10, 95, 92, -32420, 186,
    189, 95, 186, -32510, 3, -32510, 186, 3, -32473, 186, 190, -32468, 186, 3, 95, -32419, 186, 92, 95, 186,
    191, -32511, 5, -32510, 186, 5, -32472, 186, 192, -32507, 186, 95, -32476, 186, 5, 95, -32471, 186, 109, -32497,
    186, 193, -32479, 186, 109, 95, -32511, 186, 194, 7, -32510, 186, 7, -32471, 186, 195, -32507, 186, 97, -32477,
    186, 7, 95, -32490, 186, 196, -32502, 186, 197, -32455, 186, 197, 95, -32471, 186, 198, -32497, 186, 199, -32511,
    186, 200, -32482, 186, 198, 95, -32510, 186, 12, -32510, 186, 201, -32470, 186, 202, -32507, 186, 99, -32508, 186,
    203, -32484, 186, 12, 95, -32471, 186, 108, -32462, 186, 108, 95, -32495, 186, 204, -32511, 186, 183, 184, -32510,
    186, 205, -32509, 186, 206, -32503, 186, 207, 170, -32497, 186, 208, -32485, 186, 167, 171, 172, -32511, 186, 170,
    95, -32490, 186, 16, 186, 16, -32511, 186, 209, -32448, 186, 16, 95, -32490, 186, 196, 186, 210, -32445, 186,
    210, 95, -32488, 186, 211, -32445, 186, 211, 95, -32471, 186, 212, -32462, 186, 212, 95, -32510, 186, 213, -32423,
    186, 213, 95, -32510, 186, 214, -32452, 186, 114, 186, 116, -32487, 186, 214, 95, -32492, 186, 183, 184, -32510,
    186, 205, -32498, 186, 207, 170, -32468, 186, 169, 171, 172, -32511, 186, 170, 95, -32495, 186, 204, -32511, 186,
    183, 184, -32510, 186, 205, -32509, 186, 206, -32503, 186, 207, 170, -32497, 186, 166, -32494, 186, 215, -32506, 186,
    216, 167, 171, 172, -32511, 186, 170, 95, -32492, 186, 183, 184, -32510, 186, 205, -32498, 186, 207, 170, -32468,
    186, 168, 171, 172, -32511, 186, 170, 95, -32502, 186, 82, -32511, 186, -32511, 82, -32510, 186, -32511, 82, -32511,
    186, -32511, 82, -32511, 186, 82, 217, -32508, 82, -32511, 186, -32507, 82, -32461, 186, 82, 95, -32489, 186, 107,
    -32444, 186, 107, 95, -32470, 186, 218, -32463, 186, 218, 95, -32508, 186, 121, 122, -32459, 186, 219, -32481, 186,
    121, 95, -32508, 186, 123, 124, -32457, 186, 220, -32483, 186, 123, 95, -32487, 186, 221, -32446, 186, 221, 95,
    -32510, 186, 13, -32509, 186, -32510, 13, -32511, 186, 13, -32511, 186, -32511, 13, -32489, 186, 13, -32504, 186, 222,
    -32472, 186, 13, 95, 186, -32509, 41, -32510, 186, -32510, 41, -32511, 186, 41, -32511, 186, -32511, 41, -32489, 186,
    41, -32480, 186, 223, -32496, 186, 41, 95, -32493, 186, 224, -32507, 186, 173, -32511, 186, 225, 226, -32509, 186,
    177, 182, 178, 180, 179, 181, -32463, 186, 227, 186, 173, 95, -32502, 186, 69, -32511, 186, -32511, 69, -32510,
    186, 228, 69, -32511, 186, -32511, 69, -32511, 186, 69, 186, -32510, 69, 229, 230, -32511, 186, -32507, 69, -32461,
    186, 69, 95, -32495, 186, 204, -32511, 186, 183, 184, -32510, 186, 205, -32509, 186, 206, -32503, 186, 207, 170,
    -32497, 186, 166, -32494, 186, 231, -32506, 186, 216, 167, 171, 172, -32511, 186, 170, 95, -32484, 186, 232, -32449,
    186, 232, 95, -32489, 186, 110, -32444, 186, 110, 95, -32489, 186, 111, -32444, 186, 111, 95, -32486, 186, 26,
    -32499, 186, 109, -32497, 186, 233, -32507, 186, 234, 186, 235, -32488, 186, 26, 95, -32510, 186, 214, -32509, 186,
    236, 237, 238, -32511, 186, 239, -32511, 186, 241, 242, -32489, 186, 243, -32503, 186, 244, -32500, 186, 125, 186,
    126, 127, 128, 129, 130, 131, 132, -32506, 186, 245, -32503, 186, 241, 95, 186, -32509, 3, -32510, 186, -32510,
    3, -32511, 186, 3, -32511, 186, -32511, 3, -32489, 186, 3, -32508, 186, 247, -32468, 186, 3, 95, -32495, 186,
    204, -32511, 186, 183, 184, -32510, 186, 205, -32509, 186, 206, -32503, 186, 207, 170, -32497, 186, 166, -32486, 186,
    248, 167, 171, 172, -32511, 186, 170, 95, -32495, 186, 204, -32511, 186, 183, 184, -32510, 186, 205, -32509, 186,
    206, -32503, 186, 207, 170, -32497, 186, 166, -32486, 186, 249, 167, 171, 172, -32511, 186, 170, 95, -32495, 186,
    204, -32511, 186, 183, 184, -32510, 186, 205, -32509, 186, 206, -32503, 186, 207, 170, -32497, 186, 166, -32486, 186,
    250, 167, 171, 172, -32511, 186, 170, 95, -32495, 186, 204, -32511, 186, 183, 184, -32510, 186, 205, -32509, 186,
    206, -32503, 186, 207, 170, -32497, 186, 166, -32494, 186, 251, -32506, 186, 216, 167, 171, 172, -32511, 186, 170,
    95, -32495, 186, 204, -32511, 186, 183, 184, -32510, 186, 205, -32509, 186, 206, -32503, 186, 207, 170, -32497, 186,
    165, -32485, 186, 167, 171, 172, -32511, 186, 170, 95, -32495, 186, 204, -32511, 186, 183, 184, -32510, 186, 205,
    -32509, 186, 206, -32503, 186, 207, 170, -32497, 186, 163, -32485, 186, 167, 171, 172, -32511, 186, 170, 95, -32495,
    186, 204, -32511, 186, 183, 184, -32510, 186, 205, -32509, 186, 206, -32503, 186, 207, 170, -32497, 186, 164, -32485,
    186, 167, 171, 172, -32511, 186, 170, 95, -32493, 186, 224, -32505, 186, 176, 225, 226, -32451, 186, 176, 95,
    -32490, 186, 252, 186, 20, -32445, 186, 20, 95, -32490, 186, 196, 186, 253, -32445, 186, 253, 95, -32486, 186,
    254, -32447, 186, 254, 95, -32489, 186, 255, -32511, 186, 25, -32447, 186, 25, 95, -32487, 186, 256, -32446, 186,
    256, 95, -32487, 186, 257, -32446, 186, 257, 95, -32495, 186, 204, -32511, 186, 183, 184, -32510, 186, 205, -32509,
    186, 206, -32503, 186, 207, 170, -32497, 186, 166, -32494, 186, 258, -32506, 186, 216, 167, 171, 172, -32511, 186,
    170, 95, -32471, 186, 259, -32462, 186, 259, 95, -32471, 186, 260, -32462, 186, 260, 95, -32489, 186, 154, -32444,
    186, 154, 95, -32471, 186, 261, -32462, 186, 261, 95, -32485, 186, 262, -32508, 186, 263, -32454, 186, 263, 95,
    -32510, 186, -32511, 9, -32510, 186, -32510, 9, -32511, 186, 9, -32511, 186, -32511, 9, -32489, 186, 9, -32502, 186,
    264, -32474, 186, 9, 95, -32502, 186, 265, -32441, 186, 147, 148, -32505, 186, 265, 95, -32502, 186, 266, -32441,
    186, 147, 148, -32505, 186, 266, 95, 186, 191, -32510, 5, -32510, 186, -32510, 5, -32511, 186, 5, -32511, 186,
    -32511, 5, -32489, 186, 5, -32507, 186, 267, -32507, 186, 95, -32476, 186, 5, 95, -32502, 186, 68, -32511, 186,
    -32511, 68, -32510, 186, 228, 68, -32511, 186, -32511, 68, -32511, 186, 68, 186, -32510, 68, 229, 230, -32511, 186,
    -32507, 68, -32461, 186, 68, 95, -32502, 186, 66, -32511, 186, -32511, 66, -32510, 186, 228, 66, -32511, 186, -32511,
    66, -32511, 186, 66, 186, -32510, 66, 229, 230, -32511, 186, -32507, 66, -32461, 186, 66, 95, -32502, 186, 67,
    -32511, 186, -32511, 67, -32510, 186, 228, 67, -32511, 186, -32511, 67, -32511, 186, 67, 186, -32510, 67, 229, 230,
    -32511, 186, -32507, 67, -32461, 186, 67, 95, -32493, 186, 224, -32507, 186, 174, -32511, 186, 225, 226, -32451, 186,
    174, 95, -32471, 186, 268, -32494, 186, 112, -32482, 186, 268, 95, -32508, 186, 121, 122, -32459, 186, 120, -32481,
    186, 121, 95, -32489, 186, 115, -32444, 186, 115, 95, -32486, 186, 26, -32499, 186, 109, -32497, 186, 233, -32507,
    186, 117, 186, 235, -32488, 186, 26, 95, -32469, 186, 269, -32464, 186, 269, 95, -32469, 186, 270, -32464, 186,
    270, 95, -32502, 186, 56, -32505, 186, 224, -32504, 186, 225, 226, -32451, 186, 56, 95, -32479, 186, 271, -32454,
    186, 271, 95, -32479, 186, 272, -32454, 186, 272, 95, -32487, 186, 273, -32446, 186, 273, 95, -32495, 186, 204,
    -32511, 186, 183, 184, -32510, 186, 205, -32509, 186, 206, -32503, 186, 207, 170, -32497, 186, 166, -32494, 186, 274,
    -32506, 186, 216, 167, 171, 172, -32511, 186, 170, 95, -32495, 186, 204, -32511, 186, 183, 184, -32510, 186, 205,
    -32509, 186, 206, -32503, 186, 207, 170, -32497, 186, 166, -32494, 186, 275, -32506, 186, 216, 167, 171, 172, -32511,
    186, 170, 95, -32510, 186, 214, 276, -32510, 186, 236, 237, 238, -32511, 186, 239, -32511, 186, 241, 242, -32489,
    186, 243, -32503, 186, 101, -32500, 186, 125, 186, 126, 127, 128, 129, 130, 131, 132, -32506, 186, 245, -32503,
    186, 276, 95, -32510, 186, 214, -32509, 186, 236, 237, 238, -32511, 186, 240, -32511, 186, 241, 242, -32489, 186,
    243, -32503, 186, 277, -32500, 186, 125, 186, 126, 127, 128, 129, 130, 131, 132, -32506, 186, 246, -32503, 186,
    241, 95, -32510, 186, 214, -32509, 186, 236, 237, 238, -32511, 186, 240, -32511, 186, 241, 242, -32489, 186, 243,
    -32503, 186, 278, -32500, 186, 125, 186, 126, 127, 128, 129, 130, 131, 132, -32506, 186, 246, -32503, 186, 241,
    95, -32511, 186, 194, -32511, 43, -32510, 186, -32510, 43, -32511, 186, 43, -32511, 186, -32511, 43, -32489, 186, 43,
    -32499, 186, 97, -32494, 186, 279, -32497, 186, 43, 95, -32485, 186, 209, -32448, 186, 209, 95, -32490, 186, 45,
    -32510, 186, 45, -32462, 186, 280, -32499, 186, 45, 95, -32490, 186, 48, -32510, 186, 48, -32460, 186, 281, -32501,
    186, 48, 95, -32495, 186, 204, -32511, 186, 183, 184, -32510, 186, 205, -32509, 186, 206, -32503, 186, 207, 170,
    -32497, 186, 166, -32494, 186, 282, -32506, 186, 216, 167, 171, 172, -32511, 186, 170, 95, -32495, 186, 204, -32511,
    186, 183, 184, -32510, 186, 205, -32509, 186, 206, -32503, 186, 207, 170, -32497, 186, 166, -32494, 186, 283, -32506,
    186, 216, 167, 171, 172, -32511, 186, 170, 95, -32495, 186, 204, -32511, 186, 183, 184, -32510, 186, 205, 284,
    -32510, 186, 206, -32503, 186, 207, 170, -32497, 186, 166, -32494, 186, 285, -32507, 186, 286, 216, 167, 171, 172,
    -32511, 186, 284, 95, -32493, 186, 224, -32505, 186, 287, 225, 226, -32451, 186, 287, 95, -32493, 186, 224, -32510,
    186, 145, -32508, 186, 225, 226, -32451, 186, 145, 95, -32489, 186, 11, -32483, 186, 288, -32475, 186, 11, 95,
    -32510, 186, -32511, 57, -32510, 186, -32510, 57, 186, 289, 57, -32511, 186, -32511, 57, -32489, 186, 57, -32462, 186,
    57, 95, -32510, 186, -32511, 57, -32510, 186, -32510, 57, 186, 290, 57, -32511, 186, -32511, 57, -32489, 186, 57,
    -32462, 186, 57, 95, -32510, 186, -32511, 12, -32510, 186, -32510, 12, -32511, 186, 12, -32511, 186, -32511, 12, -32489,
    186, 12, -32505, 186, 291, -32471, 186, 12, 95, -32490, 186, 292, -32510, 186, 293, -32447, 186, 293, 95, -32490,
    186, 294, -32510, 186, 295, -32447, 186, 295, 95, -32499, 186, 296, -32508, 186, 224, -32504, 186, 225, 226, -32451,
    186, 296, 95, -32499, 186, 297, -32508, 186, 224, -32504, 186, 225, 226, -32451, 186, 297, 95, -32489, 186, 155,
    -32444, 186, 155, 95, -32493, 186, 224, -32511, 186, 298, -32510, 186, 65, -32511, 186, 225, 226, -32451, 186, 65,
    95, -32486, 186, 299, -32447, 186, 299, 95, -32479, 186, 300, -32454, 186, 300, 95, -32489, 186, 12, -32487, 186,
    301, -32471, 186, 12, 95, -32510, 186, 59, -32509, 186, -32510, 59, -32511, 186, 59, -32511, 186, -32511, 59, -32489,
    186, 59, -32470, 186, 302, -32506, 186, 59, 95, -32510, 186, 59, -32509, 186, -32510, 59, -32511, 186, 59, -32511,
    186, -32511, 59, -32489, 186, 59, -32470, 186, 303, -32506, 186, 59, 95, -32510, 186, -32511, 9, -32510, 186, -32510,
    9, -32511, 186, 9, -32511, 186, -32511, 9, -32489, 186, 9, -32502, 186, 304, -32474, 186, 9, 95, -32495, 186,
    204, -32511, 186, 183, 184, -32510, 186, 205, -32509, 186, 206, -32503, 186, 207, 170, -32497, 186, 166, -32494, 186,
    305, -32506, 186, 216, 167, 171, 172, -32511, 186, 170, 95, -32489, 186, 137, -32444, 186, 137, 95, -32471, 186,
    306, -32474, 186, 142, -32502, 186, 306, 95, -32489, 186, 140, -32444, 186, 140, 95, -32495, 186, 204, -32511, 186,
    183, 184, -32510, 186, 205, -32509, 186, 206, -32503, 186, 207, 170, -32497, 186, 166, -32494, 186, 307, -32506, 186,
    216, 167, 171, 172, -32511, 186, 170, 95, -32495, 186, 204, -32511, 186, 183, 184, -32510, 186, 205, -32509, 186,
    206, -32503, 186, 207, 170, -32497, 186, 166, -32494, 186, 308, -32506, 186, 216, 167, 171, 172, -32511, 186, 170,
    95, -32495, 186, 204, -32511, 186, 183, 184, -32510, 186, 205, -32509, 186, 206, -32503, 186, 207, 170, -32497, 186,
    166, -32494, 186, 285, -32507, 186, 157, 216, 167, 171, 172, -32511, 186, 170, 95, -32489, 186, 156, -32444, 186,
    156, 95, -32495, 186, 204, -32511, 186, 183, 184, -32510, 186, 205, -32509, 186, 206, -32503, 186, 207, 170, -32497,
    186, 166, -32494, 186, 309, -32506, 186, 216, 167, 171, 172, -32511, 186, 170, 95, -32489, 186, 94, -32444, 186,
    94, 95, -32510, 186, 214, -32509, 186, 236, 237, 238, -32511, 186, 239, -32511, 186, 241, 242, -32489, 186, 243,
    -32503, 186, 151, -32500, 186, 125, 186, 126, 127, 128, 129, 130, 131, 132, -32506, 186, 245, -32503, 186, 241,
    95, -32510, 186, 214, -32509, 186, 236, 237, 238, -32511, 186, 240, -32511, 186, 241, 242, -32489, 186, 243, -32503,
    186, 151, -32500, 186, 125, 186, 126, 127, 128, 129, 130, 131, 132, -32506, 186, 246, -32503, 186, 241, 95,
    -32510, 186, 214, 310, -32510, 186, 236, 237, 238, -32511, 186, 239, -32511, 186, 241, 242, -32489, 186, 243, -32503,
    186, 101, -32500, 186, 125, 186, 126, 127, 128, 129, 130, 131, 132, -32506, 186, 245, -32503, 186, 310, 95,
    -32493, 186, 224, -32511, 186, 46, -32510, 186, 46, -32511, 186, 225, 226, -32451, 186, 46, 95, -32490, 186, 50,
    -32510, 186, 50, 311, -32448, 186, 50, 95, -32498, 186, 312, -32509, 186, 224, -32504, 186, 225, 226, -32451, 186,
    312, 95, -32498, 186, 313, -32509, 186, 224, -32504, 186, 225, 226, -32451, 186, 313, 95, -32493, 186, 224, -32510,
    186, 146, -32508, 186, 225, 226, -32451, 186, 146, 95, -32489, 186, 42, -32460, 186, 314, -32498, 186, 42, 95,
    -32495, 186, 204, -32511, 186, 183, 184, -32510, 186, 205, -32509, 186, 206, -32503, 186, 207, 170, -32497, 186, 166,
    -32494, 186, 315, -32506, 186, 216, 167, 171, 172, -32511, 186, 170, 95, -32510, 186, 214, -32509, 186, 236, 237,
    238, -32511, 186, 239, -32511, 186, 241, 242, -32489, 186, 243, -32503, 186, 153, -32500, 186, 125, 186, 126, 127,
    128, 129, 130, 131, 132, -32506, 186, 245, -32503, 186, 241, 95, -32510, 186, 214, -32509, 186, 236, 237, 238,
    -32511, 186, 240, -32511, 186, 241, 242, -32489, 186, 243, -32503, 186, 153, -32500, 186, 125, 186, 126, 127, 128,
    129, 130, 131, 132, -32506, 186, 246, -32503, 186, 241, 95, -32489, 186, 12, -32487, 186, 316, -32471, 186, 12,
    95, -32493, 186, 224, -32505, 186, 144, 225, 226, -32451, 186, 144, 95, -32489, 186, 133, -32444, 186, 133};

    // Unwinding action table for error repair.

    private static final int[] gen_unwindingTable = 
    {10, 93, 3, 92, 5, 135, 7, 128, 135, 12, 135, 136, 16, 118, 118, 135, 96, 96, 136, 136,
    136, 82, 117, 136, 98, 98, 119, 13, 41, 120, 69, 136, 122, 117, 117, 26, 109, 3, 136, 136,
    136, 136, 136, 136, 136, 122, 20, 118, 120, 25, 119, 119, 136, 135, 135, 117, 135, 127, 9, 104,
    104, 5, 68, 66, 67, 120, 135, 98, 117, 26, 137, 137, 56, 127, 127, 119, 136, 136, 97, 109,
    109, 43, 121, 45, 48, 136, 136, 120, 122, 117, 11, 57, 57, 12, 120, 120, 107, 107, 117, 65,
    120, 127, 12, 59, 59, 9, 136, 117, 135, 117, 136, 136, 136, 117, 136, 117, 109, 109, 97, 46,
    50, 108, 108, 117, 42, 136, 109, 109, 12, 122, 117};

    // The names of symbols.

    private static final String[] gen_symbols = 
    {
        "%%EOF",
        "const",
        "var",
        "begin",
        "end",
        "integer",
        "boolean",
        "procedure",
        "print",
        "read",
        "if",
        "then",
        "else",
        "for",
        "to",
        "do",
        "return",
        "call",
        "not",
        "and",
        "or",
        "true",
        "false",
        "comma",
        "semicolon",
        "colon",
        "lparen",
        "rparen",
        "lbracket",
        "rbracket",
        "plus",
        "minus",
        "star",
        "slash",
        "assign",
        "constEquals",
        "isEquals",
        "notEquals",
        "lessThan",
        "lessThanEquals",
        "greaterThan",
        "greaterThanEquals",
        "id",
        "intConst",
        "stringConst",
        "program",
        "Goal",
        "startMainBlock",
        "constDecList",
        "varDecList",
        "procDecList",
        "showSymbolTable",
        "StartMarker",
        "statement",
        "statementList",
        "endMainBlock",
        "constDec",
        "varDec",
        "procDec",
        "idList",
        "factor",
        "scalarType",
        "arrayIdList",
        "arrayType",
        "procHeader",
        "procBody",
        "formalList",
        "blockStmnt",
        "formal",
        "printStmnt",
        "readStmnt",
        "asgnStmnt",
        "Cond",
        "forStmnt",
        "returnStmnt",
        "callStmnt",
        "startNewBlock",
        "AddConstQuads",
        "endCurrentBlock",
        "printExprList",
        "expr",
        "inputTargetList",
        "inputTarget",
        "CondIfPart",
        "CondThenPartUM",
        "CondThenPartM",
        "CondElseJump",
        "exprList",
        "term",
        "prim",
        "boolConst",
        "value",
        "relop",
        "%%Goal"
    };

    // The link name for each production.

    private static final String[] gen_productionLink = 
    {
        "",
        "",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "",
        "",
        "",
        "",
        "idList",
        "list",
        "single",
        "idList",
        "arrayIdList",
        "list",
        "single",
        "",
        "",
        "",
        "list",
        "single",
        "empty",
        "",
        "integer",
        "boolean",
        "integer",
        "boolean",
        "blockStmnt",
        "printStmnt",
        "readStmnt",
        "asgnStmnt",
        "condStmnt",
        "forStmnt",
        "returnStmnt",
        "callStmnt",
        "",
        "",
        "",
        "",
        "",
        "empty",
        "nonempty",
        "",
        "empty",
        "nonempty",
        "id",
        "idArray",
        "int",
        "intArray",
        "unmatched",
        "matched",
        "",
        "",
        "",
        "",
        "",
        "",
        "nothing",
        "exprList",
        "list",
        "single",
        "plus",
        "minus",
        "or",
        "term",
        "star",
        "slash",
        "and",
        "factor",
        "positive",
        "negative",
        "not",
        "const",
        "boolConst",
        "value",
        "expr",
        "relop",
        "id",
        "expr",
        "isEquals",
        "lessThan",
        "greaterThan",
        "lessThanEquals",
        "greaterThanEquals",
        "notEquals",
        "true",
        "false",
        ""
    };




    // RLE decoding function

    private static synchronized void decodeRLE ()
    {
        if (gen_actionTable == null)
        {
            gen_actionTable = ArrayRLE.shortRLEToShort2D (rle_actionTable);
            rle_actionTable = null;
        }

        return;
    }




    // Constructor installs the generated tables into the ParserTable

    public NanoGrammarParserTable ()
    {
        super ();

        // Decode the run-length-encoded tables

        decodeRLE ();

        // Copy parsing tables into the ParserTable superclass

        _symbolCount = gen_symbolCount;
        _productionCount = gen_productionCount;
        _productionLHSSymbol = gen_productionLHSSymbol;
        _productionRHSLength = gen_productionRHSLength;
        _productionParam = gen_productionParam;
        _maxInsertion = gen_maxInsertion;
        _maxDeletion = gen_maxDeletion;
        _validationLength = gen_validationLength;
        _singlePointInsertionCount = gen_singlePointInsertionCount;
        _singlePointInsertions = gen_singlePointInsertions;
        _goalProduction = gen_goalProduction;
        _eofSymbol = gen_eofSymbol;
        _insertionCost = gen_insertionCost;
        _deletionCost = gen_deletionCost;
        _stateCount = gen_stateCount;
        _actionTable = gen_actionTable;
        _unwindingTable = gen_unwindingTable;

        // Copy dynamic-link tables into the ParserTable superclass

        _symbols = gen_symbols;
        _productionLink = gen_productionLink;

        return;
    }


}

