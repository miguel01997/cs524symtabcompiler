// File generated by Invisible Jacc version 1.1.
// Invisible Jacc is Copyright 1997-1998 Invisible Software, Inc.

package NanoSymtabCompiler;

import invisible.jacc.parse.ParserTable;
import invisible.jacc.util.ArrayRLE;

public class NanoGrammarParserTable extends ParserTable
{

    // The number of symbols.

    private static final int gen_symbolCount = 83;

    // The number of productions.

    private static final int gen_productionCount = 83;

    // The symbol on the left hand side of each production.

    private static final int[] gen_productionLHSSymbol = 
    {44, 43, 46, 46, 47, 47, 48, 48, 51, 51, 45, 52, 49, 53, 56, 56, 54, 54, 59, 59,
    55, 61, 61, 61, 63, 58, 58, 60, 60, 50, 50, 50, 50, 50, 50, 50, 50, 62, 71, 72,
    64, 73, 73, 65, 75, 75, 76, 76, 66, 66, 67, 67, 68, 69, 70, 70, 77, 77, 74, 74,
    74, 74, 78, 78, 78, 78, 57, 57, 57, 79, 79, 79, 79, 79, 80, 80, 81, 81, 81, 81,
    81, 81, 82};

    // The length of the right hand side of each production.

    private static final int[] gen_productionRHSLength = 
    {1, 12, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 5, 3, 1, 5, 5, 6, 4,
    7, 3, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 0, 0,
    6, 0, 3, 6, 0, 3, 1, 4, 4, 7, 4, 6, 8, 2, 5, 6, 3, 1, 3, 3,
    3, 1, 3, 3, 3, 1, 1, 2, 2, 1, 1, 1, 3, 5, 1, 4, 1, 1, 1, 1,
    1, 1, 2};

    // The parameter for each production.

    private static final int[] gen_productionParam = 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0};

    // The maximum number of insertions during error repair.

    private static final int gen_maxInsertion = 100;

    // The maximum number of deletions during error repair.

    private static final int gen_maxDeletion = 200;

    // The validation length for error repair.

    private static final int gen_validationLength = 5;

    // The number of single-point insertions for error repair.

    private static final int gen_singlePointInsertionCount = 42;

    // The list of symbols for single-point insertions.

    private static final int[] gen_singlePointInsertions = 
    {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42};

    // The goal production.

    private static final int gen_goalProduction = 82;

    // The end-of-file symbol.

    private static final int gen_eofSymbol = 0;

    // Insertion cost of each symbol for error repair.

    private static final int[] gen_insertionCost = 
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0};

    // Deletion cost of each symbol for error repair.

    private static final int[] gen_deletionCost = 
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0};

    // The number of LR(1) states.

    private static final int gen_stateCount = 128;

    // Parsing action table.

    private static short[][] gen_actionTable = null;
    private static short[] rle_actionTable = 
    {128, 84, 166, -32510, 10, -32510, 166, 10, -32478, 166, 83, 167, 168, -32476, 166, 10, 84, 82, -32431, 166,
    169, 84, 166, -32510, 3, -32510, 166, 3, -32475, 166, 170, -32477, 166, 3, 84, -32430, 166, 82, 84, 166,
    171, -32511, 5, -32510, 166, 5, -32474, 166, 172, -32508, 166, 85, -32484, 166, 5, 84, -32474, 166, 173, -32497,
    166, 174, -32487, 166, 173, 84, -32511, 166, 175, 7, -32510, 166, 7, -32473, 166, 176, -32508, 166, 87, -32485,
    166, 7, 84, -32492, 166, 177, 166, 15, -32504, 166, 15, -32464, 166, 15, 84, -32480, 166, 178, -32464, 166,
    178, 84, -32474, 166, 179, -32497, 166, 180, -32511, 166, 181, -32490, 166, 179, 84, -32510, 166, 12, -32510, 166,
    182, -32472, 166, 183, -32508, 166, 89, -32486, 166, 12, 84, -32474, 166, 173, -32497, 166, 97, -32487, 166, 173,
    84, -32495, 166, 184, -32508, 166, 185, -32509, 166, 186, -32504, 166, 187, 152, 153, -32498, 166, 188, -32492, 166,
    149, 154, -32511, 166, 152, 84, -32492, 166, 177, 166, 15, -32511, 166, 189, -32457, 166, 15, 84, -32490, 166,
    190, -32454, 166, 190, 84, -32490, 166, 191, -32454, 166, 191, 84, -32474, 166, 192, -32470, 166, 192, 84, -32510,
    166, 193, -32434, 166, 193, 84, -32489, 166, 185, -32499, 166, 187, 152, 153, -32476, 166, 151, 154, -32511, 166,
    152, 84, -32495, 166, 184, -32508, 166, 185, -32509, 166, 186, -32504, 166, 187, 152, 153, -32498, 166, 148, -32497,
    166, 194, -32510, 166, 195, 149, 154, -32511, 166, 152, 84, -32489, 166, 185, -32499, 166, 187, 152, 153, -32476,
    166, 150, 154, -32511, 166, 152, 84, -32502, 166, 74, -32511, 166, -32511, 74, -32510, 166, -32509, 74, -32511, 166,
    74, 196, -32508, 74, 166, -32507, 74, -32469, 166, 74, 84, -32491, 166, 96, -32453, 166, 96, 84, -32473, 166,
    197, -32471, 166, 197, 84, -32508, 166, 108, 109, -32462, 166, 198, -32489, 166, 108, 84, -32508, 166, 110, 111,
    -32460, 166, 199, -32491, 166, 110, 84, -32489, 166, 200, -32455, 166, 200, 84, -32510, 166, 201, -32509, 166, 202,
    203, 204, -32511, 166, 206, -32511, 166, 208, 209, -32492, 166, 210, -32503, 166, 211, -32502, 166, 112, 166, 113,
    114, 115, 116, 117, 118, 119, -32501, 166, 208, 84, -32493, 166, 212, -32509, 166, 155, -32511, 166, 213, 214,
    -32510, 166, 159, 164, 160, 162, 161, 163, -32471, 166, 215, 166, 155, 84, -32502, 166, 61, -32511, 166, -32511,
    61, -32510, 166, 216, -32510, 61, -32511, 166, 61, 166, -32510, 61, 217, 218, 166, -32507, 61, -32469, 166, 61,
    84, -32495, 166, 184, -32508, 166, 185, -32509, 166, 186, -32504, 166, 187, 152, 153, -32498, 166, 148, -32497, 166,
    219, -32510, 166, 195, 149, 154, -32511, 166, 152, 84, -32486, 166, 220, -32458, 166, 220, 84, -32491, 166, 99,
    -32453, 166, 99, 84, -32491, 166, 100, -32453, 166, 100, 84, -32488, 166, 23, -32500, 166, 173, -32497, 166, 221,
    -32509, 166, 222, 166, 223, -32494, 166, 23, 84, 166, -32509, 38, -32510, 166, -32510, 38, -32511, 166, 38, -32511,
    166, -32511, 38, -32492, 166, 38, -32482, 166, 224, -32502, 166, 38, 84, -32489, 166, 225, -32455, 166, 225, 84,
    -32489, 166, 226, -32455, 166, 226, 84, -32495, 166, 184, -32508, 166, 185, -32509, 166, 186, -32504, 166, 187, 152,
    153, -32498, 166, 148, -32497, 166, 227, -32510, 166, 195, 149, 154, -32511, 166, 152, 84, -32495, 166, 184, -32508,
    166, 185, -32509, 166, 186, -32504, 166, 187, 152, 153, -32498, 166, 148, -32497, 166, 228, -32510, 166, 195, 149,
    154, -32511, 166, 152, 84, -32474, 166, 229, -32470, 166, 229, 84, -32474, 166, 230, -32470, 166, 230, 84, -32491,
    166, 136, -32453, 166, 136, 84, -32474, 166, 231, -32470, 166, 231, 84, -32487, 166, 232, -32508, 166, 233, -32463,
    166, 233, 84, -32510, 166, -32511, 9, -32510, 166, -32510, 9, -32511, 166, 9, -32511, 166, -32511, 9, -32492, 166,
    9, -32502, 166, 234, -32482, 166, 9, 84, -32495, 166, 184, -32508, 166, 185, -32509, 166, 186, -32504, 166, 187,
    152, 153, -32498, 166, 148, -32493, 166, 235, 149, 154, -32511, 166, 152, 84, -32495, 166, 184, -32508, 166, 185,
    -32509, 166, 186, -32504, 166, 187, 152, 153, -32498, 166, 148, -32493, 166, 236, 149, 154, -32511, 166, 152, 84,
    -32495, 166, 184, -32508, 166, 185, -32509, 166, 186, -32504, 166, 187, 152, 153, -32498, 166, 148, -32493, 166, 237,
    149, 154, -32511, 166, 152, 84, -32495, 166, 184, -32508, 166, 185, -32509, 166, 186, -32504, 166, 187, 152, 153,
    -32498, 166, 148, -32497, 166, 238, -32510, 166, 195, 149, 154, -32511, 166, 152, 84, -32495, 166, 184, -32508, 166,
    185, -32509, 166, 186, -32504, 166, 187, 152, 153, -32498, 166, 147, -32492, 166, 149, 154, -32511, 166, 152, 84,
    -32495, 166, 184, -32508, 166, 185, -32509, 166, 186, -32504, 166, 187, 152, 153, -32498, 166, 145, -32492, 166, 149,
    154, -32511, 166, 152, 84, -32495, 166, 184, -32508, 166, 185, -32509, 166, 186, -32504, 166, 187, 152, 153, -32498,
    166, 146, -32492, 166, 149, 154, -32511, 166, 152, 84, -32493, 166, 212, -32507, 166, 158, 213, 214, -32460, 166,
    158, 84, -32492, 166, 239, 166, 19, -32454, 166, 19, 84, -32490, 166, 240, -32454, 166, 240, 84, -32488, 166,
    241, -32456, 166, 241, 84, -32491, 166, 242, -32511, 166, 22, -32456, 166, 22, 84, 166, -32509, 3, -32510, 166,
    -32510, 3, -32511, 166, 3, -32511, 166, -32511, 3, -32492, 166, 3, -32507, 166, 243, -32477, 166, 3, 84, -32471,
    166, 244, -32473, 166, 244, 84, -32471, 166, 245, -32473, 166, 245, 84, -32502, 166, 246, -32505, 166, 212, -32506,
    166, 213, 214, -32460, 166, 246, 84, -32502, 166, 247, -32505, 166, 212, -32506, 166, 213, 214, -32460, 166, 247,
    84, -32481, 166, 248, -32463, 166, 248, 84, -32481, 166, 249, -32463, 166, 249, 84, -32489, 166, 250, -32455, 166,
    250, 84, -32495, 166, 184, -32508, 166, 185, -32509, 166, 186, -32504, 166, 187, 152, 153, -32498, 166, 148, -32497,
    166, 251, -32510, 166, 195, 149, 154, -32511, 166, 152, 84, -32495, 166, 184, -32508, 166, 185, -32509, 166, 186,
    -32504, 166, 187, 152, 153, -32498, 166, 148, -32497, 166, 252, -32510, 166, 195, 149, 154, -32511, 166, 152, 84,
    -32510, 166, 201, 253, -32510, 166, 202, 203, 204, -32511, 166, 206, -32511, 166, 208, 209, -32492, 166, 210, -32503,
    166, 91, -32502, 166, 112, 166, 113, 114, 115, 116, 117, 118, 119, -32501, 166, 253, 84, -32502, 166, 60,
    -32511, 166, -32511, 60, -32510, 166, 216, -32510, 60, -32511, 166, 60, 166, -32510, 60, 217, 218, 166, -32507, 60,
    -32469, 166, 60, 84, -32502, 166, 58, -32511, 166, -32511, 58, -32510, 166, 216, -32510, 58, -32511, 166, 58, 166,
    -32510, 58, 217, 218, 166, -32507, 58, -32469, 166, 58, 84, -32502, 166, 59, -32511, 166, -32511, 59, -32510, 166,
    216, -32510, 59, -32511, 166, 59, 166, -32510, 59, 217, 218, 166, -32507, 59, -32469, 166, 59, 84, -32493, 166,
    212, -32509, 166, 156, -32511, 166, 213, 214, -32460, 166, 156, 84, -32474, 166, 254, -32494, 166, 101, -32490, 166,
    254, 84, -32508, 166, 108, 109, -32462, 166, 107, -32489, 166, 108, 84, -32491, 166, 255, -32453, 166, 255, 84,
    -32488, 166, 23, -32500, 166, 173, -32497, 166, 221, -32509, 166, 104, 166, 223, -32494, 166, 23, 84, 166, 171,
    -32510, 5, -32510, 166, -32510, 5, -32511, 166, 5, -32511, 166, -32511, 5, -32492, 166, 5, -32506, 166, 256, -32508,
    166, 85, -32484, 166, 5, 84, -32492, 166, 41, -32510, 166, 41, -32466, 166, 257, -32504, 166, 41, 84, -32492,
    166, 44, -32510, 166, 44, -32464, 166, 258, -32506, 166, 44, 84, -32510, 166, 201, -32509, 166, 202, 203, 205,
    -32511, 166, 207, -32511, 166, 208, 209, -32492, 166, 210, -32503, 166, 259, -32502, 166, 112, 166, 113, 114, 115,
    116, 117, 118, 119, -32501, 166, 208, 84, -32510, 166, 201, -32509, 166, 202, 203, 205, -32511, 166, 207, -32511,
    166, 208, 209, -32492, 166, 210, -32503, 166, 260, -32502, 166, 112, 166, 113, 114, 115, 116, 117, 118, 119,
    -32501, 166, 208, 84, -32495, 166, 184, -32508, 166, 185, -32509, 166, 186, -32504, 166, 187, 152, 153, -32498, 166,
    148, -32497, 166, 261, -32510, 166, 195, 149, 154, -32511, 166, 152, 84, -32495, 166, 184, -32508, 166, 185, -32509,
    166, 186, -32504, 166, 187, 152, 153, -32498, 166, 148, -32497, 166, 262, -32510, 166, 195, 149, 154, -32511, 166,
    152, 84, -32495, 166, 184, -32508, 166, 185, 263, -32510, 166, 186, -32504, 166, 187, 152, 153, -32498, 166, 148,
    -32497, 166, 264, -32511, 166, 265, 195, 149, 154, -32511, 166, 263, 84, -32493, 166, 212, -32507, 166, 266, 213,
    214, -32460, 166, 266, 84, -32493, 166, 212, 166, 131, -32508, 166, 213, 214, -32460, 166, 131, 84, -32491, 166,
    11, -32484, 166, 267, -32483, 166, 11, 84, -32487, 166, 189, -32457, 166, 189, 84, -32510, 166, 201, -32455, 166,
    103, -32493, 166, 201, 84, -32511, 166, 175, -32511, 12, -32510, 166, -32510, 12, -32511, 166, 12, -32511, 166, -32511,
    12, -32492, 166, 12, -32504, 166, 268, -32509, 166, 87, -32485, 166, 12, 84, -32492, 166, 269, -32510, 166, 270,
    -32456, 166, 270, 84, -32492, 166, 271, -32510, 166, 272, -32456, 166, 272, 84, -32510, 166, -32511, 50, -32510, 166,
    -32510, 50, 166, 273, 50, -32511, 166, -32511, 50, -32492, 166, 50, -32470, 166, 50, 84, -32510, 166, -32511, 50,
    -32510, 166, -32510, 50, 166, 274, 50, -32511, 166, -32511, 50, -32492, 166, 50, -32470, 166, 50, 84, -32499, 166,
    275, -32508, 166, 212, -32506, 166, 213, 214, -32460, 166, 275, 84, -32499, 166, 276, -32508, 166, 212, -32506, 166,
    213, 214, -32460, 166, 276, 84, -32491, 166, 137, -32453, 166, 137, 84, -32493, 166, 212, 277, -32510, 166, 57,
    -32511, 166, 213, 214, -32460, 166, 57, 84, -32488, 166, 278, -32456, 166, 278, 84, -32481, 166, 279, -32463, 166,
    279, 84, -32491, 166, 12, -32487, 166, 280, -32480, 166, 12, 84, -32510, 166, -32511, 9, -32510, 166, -32510, 9,
    -32511, 166, 9, -32511, 166, -32511, 9, -32492, 166, 9, -32502, 166, 281, -32482, 166, 9, 84, -32495, 166, 184,
    -32508, 166, 185, -32509, 166, 186, -32504, 166, 187, 152, 153, -32498, 166, 148, -32497, 166, 282, -32510, 166, 195,
    149, 154, -32511, 166, 152, 84, -32491, 166, 123, -32453, 166, 123, 84, -32474, 166, 283, -32477, 166, 128, -32507,
    166, 283, 84, -32491, 166, 126, -32453, 166, 126, 84, -32510, 166, 201, -32509, 166, 202, 203, 204, -32511, 166,
    206, -32511, 166, 208, 209, -32492, 166, 210, -32503, 166, 134, -32502, 166, 112, 166, 113, 114, 115, 116, 117,
    118, 119, -32501, 166, 208, 84, -32510, 166, 201, -32509, 166, 202, 203, 205, -32511, 166, 207, -32511, 166, 208,
    209, -32492, 166, 210, -32503, 166, 134, -32502, 166, 112, 166, 113, 114, 115, 116, 117, 118, 119, -32501, 166,
    208, 84, -32495, 166, 184, -32508, 166, 185, -32509, 166, 186, -32504, 166, 187, 152, 153, -32498, 166, 148, -32497,
    166, 284, -32510, 166, 195, 149, 154, -32511, 166, 152, 84, -32495, 166, 184, -32508, 166, 185, -32509, 166, 186,
    -32504, 166, 187, 152, 153, -32498, 166, 148, -32497, 166, 285, -32510, 166, 195, 149, 154, -32511, 166, 152, 84,
    -32495, 166, 184, -32508, 166, 185, -32509, 166, 186, -32504, 166, 187, 152, 153, -32498, 166, 148, -32497, 166, 264,
    -32511, 166, 139, 195, 149, 154, -32511, 166, 152, 84, -32491, 166, 138, -32453, 166, 138, 84, -32495, 166, 184,
    -32508, 166, 185, -32509, 166, 186, -32504, 166, 187, 152, 153, -32498, 166, 148, -32497, 166, 286, -32510, 166, 195,
    149, 154, -32511, 166, 152, 84, -32491, 166, 84, -32453, 166, 84, 84, -32510, 166, 201, 287, -32510, 166, 202,
    203, 204, -32511, 166, 206, -32511, 166, 208, 209, -32492, 166, 210, -32503, 166, 91, -32502, 166, 112, 166, 113,
    114, 115, 116, 117, 118, 119, -32501, 166, 287, 84, -32493, 166, 212, 42, -32510, 166, 42, -32511, 166, 213,
    214, -32460, 166, 42, 84, -32492, 166, 46, -32510, 166, 46, 288, -32457, 166, 46, 84, -32498, 166, 289, -32509,
    166, 212, -32506, 166, 213, 214, -32460, 166, 289, 84, -32498, 166, 290, -32509, 166, 212, -32506, 166, 213, 214,
    -32460, 166, 290, 84, -32493, 166, 212, 166, 132, -32508, 166, 213, 214, -32460, 166, 132, 84, -32491, 166, 39,
    -32464, 166, 291, -32503, 166, 39, 84, -32495, 166, 184, -32508, 166, 185, -32509, 166, 186, -32504, 166, 187, 152,
    153, -32498, 166, 148, -32497, 166, 292, -32510, 166, 195, 149, 154, -32511, 166, 152, 84, -32510, 166, 201, -32509,
    166, 202, 203, 204, -32511, 166, 206, -32511, 166, 208, 209, -32492, 166, 210, -32503, 166, 135, -32502, 166, 112,
    166, 113, 114, 115, 116, 117, 118, 119, -32501, 166, 208, 84, -32510, 166, 201, -32509, 166, 202, 203, 205,
    -32511, 166, 207, -32511, 166, 208, 209, -32492, 166, 210, -32503, 166, 135, -32502, 166, 112, 166, 113, 114, 115,
    116, 117, 118, 119, -32501, 166, 208, 84, -32491, 166, 12, -32487, 166, 293, -32480, 166, 12, 84, -32493, 166,
    212, -32507, 166, 130, 213, 214, -32460, 166, 130, 84, -32491, 166, 120, -32453, 166, 120};

    // Unwinding action table for error repair.

    private static final int[] gen_unwindingTable = 
    {10, 83, 3, 82, 5, 122, 7, 15, 116, 122, 12, 122, 123, 15, 106, 106, 122, 86, 123, 123,
    123, 74, 105, 123, 88, 88, 107, 99, 108, 61, 123, 110, 105, 105, 23, 38, 107, 107, 123, 123,
    122, 122, 105, 122, 115, 9, 123, 123, 123, 123, 123, 123, 123, 110, 19, 106, 108, 22, 3, 125,
    125, 94, 94, 115, 115, 107, 123, 123, 87, 60, 58, 59, 108, 122, 88, 105, 23, 5, 41, 44,
    99, 99, 123, 123, 108, 110, 105, 11, 109, 86, 12, 108, 108, 50, 50, 97, 97, 105, 57, 108,
    115, 12, 9, 123, 105, 122, 105, 99, 99, 123, 123, 123, 105, 123, 105, 87, 42, 46, 98, 98,
    105, 39, 123, 99, 99, 12, 110, 105};

    // The names of symbols.

    private static final String[] gen_symbols = 
    {
        "%%EOF",
        "const",
        "var",
        "begin",
        "end",
        "integer",
        "boolean",
        "procedure",
        "print",
        "read",
        "if",
        "then",
        "else",
        "for",
        "to",
        "do",
        "return",
        "call",
        "not",
        "and",
        "or",
        "comma",
        "semicolon",
        "colon",
        "lparen",
        "rparen",
        "lbracket",
        "rbracket",
        "plus",
        "minus",
        "star",
        "slash",
        "assign",
        "equals",
        "notEquals",
        "lessThan",
        "lessThanEquals",
        "greaterThan",
        "greaterThanEquals",
        "id",
        "intConst",
        "boolConst",
        "stringConst",
        "program",
        "Goal",
        "startMainBlock",
        "constDecList",
        "varDecList",
        "procDecList",
        "showSymbolTable",
        "statement",
        "statementList",
        "endMainBlock",
        "constDec",
        "varDec",
        "procDec",
        "idList",
        "factor",
        "scalarType",
        "arrayIdList",
        "arrayType",
        "formalList",
        "blockStmnt",
        "formal",
        "printStmnt",
        "readStmnt",
        "asgnStmnt",
        "condStmnt",
        "forStmnt",
        "returnStmnt",
        "callStmnt",
        "startNewBlock",
        "endCurrentBlock",
        "printExprList",
        "expr",
        "inputTargetList",
        "inputTarget",
        "exprList",
        "term",
        "prim",
        "value",
        "relop",
        "%%Goal"
    };

    // The link name for each production.

    private static final String[] gen_productionLink = 
    {
        "",
        "",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "",
        "",
        "",
        "idList",
        "list",
        "single",
        "idList",
        "arrayIdList",
        "list",
        "single",
        "",
        "list",
        "single",
        "empty",
        "",
        "integer",
        "boolean",
        "integer",
        "boolean",
        "blockStmnt",
        "printStmnt",
        "readStmnt",
        "asgnStmnt",
        "condStmnt",
        "forStmnt",
        "returnStmnt",
        "callStmnt",
        "",
        "",
        "",
        "",
        "empty",
        "nonempty",
        "",
        "empty",
        "nonempty",
        "id",
        "idArray",
        "int",
        "intArray",
        "ifThen",
        "ifThenElse",
        "",
        "",
        "nothing",
        "exprList",
        "list",
        "single",
        "plus",
        "minus",
        "or",
        "term",
        "star",
        "slash",
        "and",
        "factor",
        "positive",
        "negative",
        "not",
        "const",
        "boolConst",
        "value",
        "expr",
        "relop",
        "id",
        "expr",
        "equals",
        "lessThan",
        "greaterThan",
        "lessThanEquals",
        "greaterThanEquals",
        "notEquals",
        ""
    };




    // RLE decoding function

    private static synchronized void decodeRLE ()
    {
        if (gen_actionTable == null)
        {
            gen_actionTable = ArrayRLE.shortRLEToShort2D (rle_actionTable);
            rle_actionTable = null;
        }

        return;
    }




    // Constructor installs the generated tables into the ParserTable

    public NanoGrammarParserTable ()
    {
        super ();

        // Decode the run-length-encoded tables

        decodeRLE ();

        // Copy parsing tables into the ParserTable superclass

        _symbolCount = gen_symbolCount;
        _productionCount = gen_productionCount;
        _productionLHSSymbol = gen_productionLHSSymbol;
        _productionRHSLength = gen_productionRHSLength;
        _productionParam = gen_productionParam;
        _maxInsertion = gen_maxInsertion;
        _maxDeletion = gen_maxDeletion;
        _validationLength = gen_validationLength;
        _singlePointInsertionCount = gen_singlePointInsertionCount;
        _singlePointInsertions = gen_singlePointInsertions;
        _goalProduction = gen_goalProduction;
        _eofSymbol = gen_eofSymbol;
        _insertionCost = gen_insertionCost;
        _deletionCost = gen_deletionCost;
        _stateCount = gen_stateCount;
        _actionTable = gen_actionTable;
        _unwindingTable = gen_unwindingTable;

        // Copy dynamic-link tables into the ParserTable superclass

        _symbols = gen_symbols;
        _productionLink = gen_productionLink;

        return;
    }


}

