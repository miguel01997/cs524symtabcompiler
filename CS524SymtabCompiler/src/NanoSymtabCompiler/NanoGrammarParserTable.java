// File generated by Invisible Jacc version 1.1.
// Invisible Jacc is Copyright 1997-1998 Invisible Software, Inc.

package NanoSymtabCompiler;

import invisible.jacc.parse.ParserTable;
import invisible.jacc.util.ArrayRLE;

public class NanoGrammarParserTable extends ParserTable
{

    // The number of symbols.

    private static final int gen_symbolCount = 94;

    // The number of productions.

    private static final int gen_productionCount = 95;

    // The symbol on the left hand side of each production.

    private static final int[] gen_productionLHSSymbol = 
    {46, 45, 48, 48, 49, 49, 50, 50, 54, 54, 47, 55, 51, 52, 56, 59, 59, 57, 57, 62,
    62, 58, 64, 65, 66, 66, 66, 68, 61, 61, 63, 63, 53, 53, 53, 53, 53, 53, 53, 53,
    67, 76, 78, 77, 69, 79, 79, 79, 70, 81, 81, 81, 82, 82, 71, 71, 72, 72, 83, 84,
    85, 86, 73, 74, 75, 75, 87, 87, 80, 80, 80, 80, 88, 88, 88, 88, 60, 60, 60, 89,
    89, 89, 89, 89, 91, 91, 92, 92, 92, 92, 92, 92, 90, 90, 93};

    // The length of the right hand side of each production.

    private static final int[] gen_productionRHSLength = 
    {1, 13, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 5, 3, 1, 5, 5, 6,
    4, 2, 6, 1, 3, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    11, 0, 0, 0, 6, 0, 1, 3, 6, 0, 1, 3, 1, 4, 4, 7, 2, 2, 2, 2,
    5, 0, 8, 2, 5, 6, 3, 1, 3, 3, 3, 1, 3, 3, 3, 1, 1, 2, 2, 1,
    1, 1, 3, 5, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 2};

    // The parameter for each production.

    private static final int[] gen_productionParam = 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    // The maximum number of insertions during error repair.

    private static final int gen_maxInsertion = 100;

    // The maximum number of deletions during error repair.

    private static final int gen_maxDeletion = 200;

    // The validation length for error repair.

    private static final int gen_validationLength = 5;

    // The number of single-point insertions for error repair.

    private static final int gen_singlePointInsertionCount = 44;

    // The list of symbols for single-point insertions.

    private static final int[] gen_singlePointInsertions = 
    {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42, 43, 44};

    // The goal production.

    private static final int gen_goalProduction = 94;

    // The end-of-file symbol.

    private static final int gen_eofSymbol = 0;

    // Insertion cost of each symbol for error repair.

    private static final int[] gen_insertionCost = 
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    // Deletion cost of each symbol for error repair.

    private static final int[] gen_deletionCost = 
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    // The number of LR(1) states.

    private static final int gen_stateCount = 132;

    // Parsing action table.

    private static short[][] gen_actionTable = null;
    private static short[] rle_actionTable = 
    {132, 95, 190, -32510, 10, -32510, 190, 10, -32476, 190, 95, 191, 192, -32467, 190, 10, 95, 94, -32420, 190,
    193, 95, 190, -32510, 3, -32510, 190, 3, -32473, 190, 194, -32468, 190, 3, 95, -32419, 190, 94, 95, 190,
    195, -32511, 5, -32510, 190, 5, -32472, 190, 196, -32507, 190, 97, -32476, 190, 5, 95, -32471, 190, 111, -32497,
    190, 197, -32479, 190, 111, 95, -32511, 190, 198, 7, -32510, 190, 7, -32471, 190, 199, -32507, 190, 99, -32477,
    190, 7, 95, -32490, 190, 200, -32502, 190, 201, -32455, 190, 201, 95, -32471, 190, 202, -32497, 190, 203, -32511,
    190, 204, -32482, 190, 202, 95, -32510, 190, 12, -32510, 190, 205, -32470, 190, 206, -32507, 190, 101, -32508, 190,
    207, -32484, 190, 12, 95, -32471, 190, 110, -32462, 190, 110, 95, -32495, 190, 208, -32511, 190, 187, 188, -32510,
    190, 209, -32509, 190, 210, -32503, 190, 211, 174, -32497, 190, 212, -32485, 190, 171, 175, 176, -32511, 190, 174,
    95, -32490, 190, 16, 190, 16, -32511, 190, 213, -32448, 190, 16, 95, -32490, 190, 200, 190, 214, -32445, 190,
    214, 95, -32488, 190, 215, -32445, 190, 215, 95, -32471, 190, 216, -32462, 190, 216, 95, -32510, 190, 217, -32423,
    190, 217, 95, -32510, 190, 218, -32452, 190, 116, 190, 118, -32487, 190, 218, 95, -32492, 190, 187, 188, -32510,
    190, 209, -32498, 190, 211, 174, -32468, 190, 173, 175, 176, -32511, 190, 174, 95, -32495, 190, 208, -32511, 190,
    187, 188, -32510, 190, 209, -32509, 190, 210, -32503, 190, 211, 174, -32497, 190, 170, -32494, 190, 219, -32506, 190,
    220, 171, 175, 176, -32511, 190, 174, 95, -32492, 190, 187, 188, -32510, 190, 209, -32498, 190, 211, 174, -32468,
    190, 172, 175, 176, -32511, 190, 174, 95, -32502, 190, 84, -32511, 190, -32511, 84, -32510, 190, -32511, 84, -32511,
    190, -32511, 84, -32511, 190, 84, 221, -32508, 84, -32511, 190, -32507, 84, -32461, 190, 84, 95, -32489, 190, 109,
    -32444, 190, 109, 95, -32470, 190, 222, -32463, 190, 222, 95, -32508, 190, 123, 124, -32459, 190, 223, -32481, 190,
    123, 95, -32508, 190, 125, 126, -32457, 190, 224, -32483, 190, 125, 95, -32487, 190, 225, -32446, 190, 225, 95,
    -32510, 190, 13, -32509, 190, -32510, 13, -32511, 190, 13, -32511, 190, -32511, 13, -32489, 190, 13, -32504, 190, 226,
    -32472, 190, 13, 95, 190, -32509, 41, -32510, 190, -32510, 41, -32511, 190, 41, -32511, 190, -32511, 41, -32489, 190,
    41, -32480, 190, 227, -32496, 190, 41, 95, -32493, 190, 228, -32507, 190, 177, -32511, 190, 229, 230, -32509, 190,
    181, 186, 182, 184, 183, 185, -32463, 190, 231, 190, 177, 95, -32502, 190, 71, -32511, 190, -32511, 71, -32510,
    190, 232, 71, -32511, 190, -32511, 71, -32511, 190, 71, 190, -32510, 71, 233, 234, -32511, 190, -32507, 71, -32461,
    190, 71, 95, -32495, 190, 208, -32511, 190, 187, 188, -32510, 190, 209, -32509, 190, 210, -32503, 190, 211, 174,
    -32497, 190, 170, -32494, 190, 235, -32506, 190, 220, 171, 175, 176, -32511, 190, 174, 95, -32484, 190, 236, -32449,
    190, 236, 95, -32489, 190, 112, -32444, 190, 112, 95, -32489, 190, 113, -32444, 190, 113, 95, -32486, 190, 26,
    -32499, 190, 111, -32497, 190, 237, -32507, 190, 238, 190, 239, -32488, 190, 26, 95, -32510, 190, 218, -32509, 190,
    240, 241, 242, -32511, 190, 243, -32511, 190, 245, 246, -32489, 190, 247, -32503, 190, 248, -32500, 190, 127, 190,
    128, 129, 130, 131, 132, 133, 134, -32506, 190, 249, -32503, 190, 245, 95, 190, -32509, 3, -32510, 190, -32510,
    3, -32511, 190, 3, -32511, 190, -32511, 3, -32489, 190, 3, -32508, 190, 251, -32468, 190, 3, 95, -32495, 190,
    208, -32511, 190, 187, 188, -32510, 190, 209, -32509, 190, 210, -32503, 190, 211, 174, -32497, 190, 170, -32486, 190,
    252, 171, 175, 176, -32511, 190, 174, 95, -32495, 190, 208, -32511, 190, 187, 188, -32510, 190, 209, -32509, 190,
    210, -32503, 190, 211, 174, -32497, 190, 170, -32486, 190, 253, 171, 175, 176, -32511, 190, 174, 95, -32495, 190,
    208, -32511, 190, 187, 188, -32510, 190, 209, -32509, 190, 210, -32503, 190, 211, 174, -32497, 190, 170, -32486, 190,
    254, 171, 175, 176, -32511, 190, 174, 95, -32495, 190, 208, -32511, 190, 187, 188, -32510, 190, 209, -32509, 190,
    210, -32503, 190, 211, 174, -32497, 190, 170, -32494, 190, 255, -32506, 190, 220, 171, 175, 176, -32511, 190, 174,
    95, -32495, 190, 208, -32511, 190, 187, 188, -32510, 190, 209, -32509, 190, 210, -32503, 190, 211, 174, -32497, 190,
    169, -32485, 190, 171, 175, 176, -32511, 190, 174, 95, -32495, 190, 208, -32511, 190, 187, 188, -32510, 190, 209,
    -32509, 190, 210, -32503, 190, 211, 174, -32497, 190, 167, -32485, 190, 171, 175, 176, -32511, 190, 174, 95, -32495,
    190, 208, -32511, 190, 187, 188, -32510, 190, 209, -32509, 190, 210, -32503, 190, 211, 174, -32497, 190, 168, -32485,
    190, 171, 175, 176, -32511, 190, 174, 95, -32493, 190, 228, -32505, 190, 180, 229, 230, -32451, 190, 180, 95,
    -32490, 190, 256, 190, 20, -32445, 190, 20, 95, -32490, 190, 200, 190, 257, -32445, 190, 257, 95, -32486, 190,
    258, -32447, 190, 258, 95, -32489, 190, 259, -32511, 190, 25, -32447, 190, 25, 95, -32487, 190, 260, -32446, 190,
    260, 95, -32487, 190, 261, -32446, 190, 261, 95, -32495, 190, 208, -32511, 190, 187, 188, -32510, 190, 209, -32509,
    190, 210, -32503, 190, 211, 174, -32497, 190, 170, -32494, 190, 262, -32506, 190, 220, 171, 175, 176, -32511, 190,
    174, 95, -32471, 190, 263, -32462, 190, 263, 95, -32471, 190, 264, -32462, 190, 264, 95, -32489, 190, 158, -32444,
    190, 158, 95, -32471, 190, 265, -32462, 190, 265, 95, -32485, 190, 266, -32508, 190, 267, -32454, 190, 267, 95,
    -32510, 190, -32511, 9, -32510, 190, -32510, 9, -32511, 190, 9, -32511, 190, -32511, 9, -32489, 190, 9, -32502, 190,
    268, -32474, 190, 9, 95, -32502, 190, 269, -32441, 190, 151, 152, -32505, 190, 269, 95, -32502, 190, 270, -32441,
    190, 151, 152, -32505, 190, 270, 95, 190, 195, -32510, 5, -32510, 190, -32510, 5, -32511, 190, 5, -32511, 190,
    -32511, 5, -32489, 190, 5, -32507, 190, 271, -32507, 190, 97, -32476, 190, 5, 95, -32502, 190, 70, -32511, 190,
    -32511, 70, -32510, 190, 232, 70, -32511, 190, -32511, 70, -32511, 190, 70, 190, -32510, 70, 233, 234, -32511, 190,
    -32507, 70, -32461, 190, 70, 95, -32502, 190, 68, -32511, 190, -32511, 68, -32510, 190, 232, 68, -32511, 190, -32511,
    68, -32511, 190, 68, 190, -32510, 68, 233, 234, -32511, 190, -32507, 68, -32461, 190, 68, 95, -32502, 190, 69,
    -32511, 190, -32511, 69, -32510, 190, 232, 69, -32511, 190, -32511, 69, -32511, 190, 69, 190, -32510, 69, 233, 234,
    -32511, 190, -32507, 69, -32461, 190, 69, 95, -32493, 190, 228, -32507, 190, 178, -32511, 190, 229, 230, -32451, 190,
    178, 95, -32471, 190, 272, -32494, 190, 114, -32482, 190, 272, 95, -32508, 190, 123, 124, -32459, 190, 122, -32481,
    190, 123, 95, -32489, 190, 117, -32444, 190, 117, 95, -32486, 190, 26, -32499, 190, 111, -32497, 190, 237, -32507,
    190, 119, 190, 239, -32488, 190, 26, 95, -32469, 190, 273, -32464, 190, 273, 95, -32469, 190, 274, -32464, 190,
    274, 95, -32502, 190, 58, -32505, 190, 228, -32504, 190, 229, 230, -32451, 190, 58, 95, -32479, 190, 275, -32454,
    190, 275, 95, -32479, 190, 276, -32454, 190, 276, 95, -32487, 190, 277, -32446, 190, 277, 95, -32495, 190, 208,
    -32511, 190, 187, 188, -32510, 190, 209, -32509, 190, 210, -32503, 190, 211, 174, -32497, 190, 170, -32494, 190, 278,
    -32506, 190, 220, 171, 175, 176, -32511, 190, 174, 95, -32495, 190, 208, -32511, 190, 187, 188, -32510, 190, 209,
    -32509, 190, 210, -32503, 190, 211, 174, -32497, 190, 170, -32494, 190, 279, -32506, 190, 220, 171, 175, 176, -32511,
    190, 174, 95, -32510, 190, 218, 280, -32510, 190, 240, 241, 242, -32511, 190, 243, -32511, 190, 245, 246, -32489,
    190, 247, -32503, 190, 103, -32500, 190, 127, 190, 128, 129, 130, 131, 132, 133, 134, -32506, 190, 249, -32503,
    190, 280, 95, -32510, 190, 218, -32509, 190, 240, 241, 242, -32511, 190, 244, -32511, 190, 245, 246, -32489, 190,
    247, -32503, 190, 281, -32500, 190, 127, 190, 128, 129, 130, 131, 132, 133, 134, -32506, 190, 250, -32503, 190,
    245, 95, -32510, 190, 218, -32509, 190, 240, 241, 242, -32511, 190, 244, -32511, 190, 245, 246, -32489, 190, 247,
    -32503, 190, 282, -32500, 190, 127, 190, 128, 129, 130, 131, 132, 133, 134, -32506, 190, 250, -32503, 190, 245,
    95, -32511, 190, 198, -32511, 43, -32510, 190, -32510, 43, -32511, 190, 43, -32511, 190, -32511, 43, -32489, 190, 43,
    -32499, 190, 99, -32494, 190, 283, -32497, 190, 43, 95, -32485, 190, 213, -32448, 190, 213, 95, -32495, 190, 208,
    -32511, 190, 187, 188, -32510, 190, 209, 45, -32510, 190, 210, -32503, 190, 211, 174, -32497, 190, 170, -32495, 190,
    284, 285, -32506, 190, 220, 171, 175, 176, -32511, 190, 45, 95, -32486, 190, 49, -32499, 190, 286, -32475, 190,
    287, 288, -32502, 190, 49, 95, -32495, 190, 208, -32511, 190, 187, 188, -32510, 190, 209, -32509, 190, 210, -32503,
    190, 211, 174, -32497, 190, 170, -32494, 190, 289, -32506, 190, 220, 171, 175, 176, -32511, 190, 174, 95, -32495,
    190, 208, -32511, 190, 187, 188, -32510, 190, 209, -32509, 190, 210, -32503, 190, 211, 174, -32497, 190, 170, -32494,
    190, 290, -32506, 190, 220, 171, 175, 176, -32511, 190, 174, 95, -32495, 190, 208, -32511, 190, 187, 188, -32510,
    190, 209, 291, -32510, 190, 210, -32503, 190, 211, 174, -32497, 190, 170, -32494, 190, 292, -32507, 190, 293, 220,
    171, 175, 176, -32511, 190, 291, 95, -32493, 190, 228, -32505, 190, 294, 229, 230, -32451, 190, 294, 95, -32493,
    190, 228, -32510, 190, 149, -32508, 190, 229, 230, -32451, 190, 149, 95, -32489, 190, 11, -32483, 190, 295, -32475,
    190, 11, 95, -32510, 190, -32511, 59, -32510, 190, -32510, 59, 190, 296, 59, -32511, 190, -32511, 59, -32489, 190,
    59, -32462, 190, 59, 95, -32510, 190, -32511, 59, -32510, 190, -32510, 59, 190, 297, 59, -32511, 190, -32511, 59,
    -32489, 190, 59, -32462, 190, 59, 95, -32510, 190, -32511, 12, -32510, 190, -32510, 12, -32511, 190, 12, -32511, 190,
    -32511, 12, -32489, 190, 12, -32505, 190, 298, -32471, 190, 12, 95, -32486, 190, 299, -32447, 190, 299, 95, -32493,
    190, 228, -32511, 190, 300, -32510, 190, 46, -32511, 190, 229, 230, -32451, 190, 46, 95, -32490, 190, 52, -32510,
    190, 52, 301, -32448, 190, 52, 95, -32486, 190, 302, -32447, 190, 302, 95, -32490, 190, 303, -32510, 190, 50,
    -32447, 190, 50, 95, -32499, 190, 304, -32508, 190, 228, -32504, 190, 229, 230, -32451, 190, 304, 95, -32499, 190,
    305, -32508, 190, 228, -32504, 190, 229, 230, -32451, 190, 305, 95, -32489, 190, 159, -32444, 190, 159, 95, -32493,
    190, 228, -32511, 190, 306, -32510, 190, 67, -32511, 190, 229, 230, -32451, 190, 67, 95, -32486, 190, 307, -32447,
    190, 307, 95, -32479, 190, 308, -32454, 190, 308, 95, -32489, 190, 12, -32487, 190, 309, -32471, 190, 12, 95,
    -32510, 190, 61, -32509, 190, -32510, 61, -32511, 190, 61, -32511, 190, -32511, 61, -32489, 190, 61, -32470, 190, 310,
    -32506, 190, 61, 95, -32510, 190, 61, -32509, 190, -32510, 61, -32511, 190, 61, -32511, 190, -32511, 61, -32489, 190,
    61, -32470, 190, 311, -32506, 190, 61, 95, -32510, 190, -32511, 9, -32510, 190, -32510, 9, -32511, 190, 9, -32511,
    190, -32511, 9, -32489, 190, 9, -32502, 190, 312, -32474, 190, 9, 95, -32489, 190, 139, -32444, 190, 139, 95,
    -32495, 190, 208, -32511, 190, 187, 188, -32510, 190, 209, 45, -32510, 190, 210, -32503, 190, 211, 174, -32497, 190,
    170, -32495, 190, 142, 285, -32506, 190, 220, 171, 175, 176, -32511, 190, 45, 95, -32495, 190, 208, -32511, 190,
    187, 188, -32510, 190, 209, -32509, 190, 210, -32503, 190, 211, 174, -32497, 190, 170, -32494, 190, 313, -32506, 190,
    220, 171, 175, 176, -32511, 190, 174, 95, -32489, 190, 143, -32444, 190, 143, 95, -32486, 190, 49, -32499, 190,
    286, -32475, 190, 146, 288, -32502, 190, 49, 95, -32495, 190, 208, -32511, 190, 187, 188, -32510, 190, 209, -32509,
    190, 210, -32503, 190, 211, 174, -32497, 190, 170, -32494, 190, 314, -32506, 190, 220, 171, 175, 176, -32511, 190,
    174, 95, -32495, 190, 208, -32511, 190, 187, 188, -32510, 190, 209, -32509, 190, 210, -32503, 190, 211, 174, -32497,
    190, 170, -32494, 190, 315, -32506, 190, 220, 171, 175, 176, -32511, 190, 174, 95, -32495, 190, 208, -32511, 190,
    187, 188, -32510, 190, 209, -32509, 190, 210, -32503, 190, 211, 174, -32497, 190, 170, -32494, 190, 292, -32507, 190,
    161, 220, 171, 175, 176, -32511, 190, 174, 95, -32489, 190, 160, -32444, 190, 160, 95, -32495, 190, 208, -32511,
    190, 187, 188, -32510, 190, 209, -32509, 190, 210, -32503, 190, 211, 174, -32497, 190, 170, -32494, 190, 316, -32506,
    190, 220, 171, 175, 176, -32511, 190, 174, 95, -32489, 190, 96, -32444, 190, 96, 95, -32510, 190, 218, -32509,
    190, 240, 241, 242, -32511, 190, 243, -32511, 190, 245, 246, -32489, 190, 247, -32503, 190, 155, -32500, 190, 127,
    190, 128, 129, 130, 131, 132, 133, 134, -32506, 190, 249, -32503, 190, 245, 95, -32510, 190, 218, -32509, 190,
    240, 241, 242, -32511, 190, 244, -32511, 190, 245, 246, -32489, 190, 247, -32503, 190, 155, -32500, 190, 127, 190,
    128, 129, 130, 131, 132, 133, 134, -32506, 190, 250, -32503, 190, 245, 95, -32510, 190, 218, 317, -32510, 190,
    240, 241, 242, -32511, 190, 243, -32511, 190, 245, 246, -32489, 190, 247, -32503, 190, 103, -32500, 190, 127, 190,
    128, 129, 130, 131, 132, 133, 134, -32506, 190, 249, -32503, 190, 317, 95, -32493, 190, 228, -32505, 190, 148,
    229, 230, -32451, 190, 148, 95, -32498, 190, 318, -32509, 190, 228, -32504, 190, 229, 230, -32451, 190, 318, 95,
    -32498, 190, 319, -32509, 190, 228, -32504, 190, 229, 230, -32451, 190, 319, 95, -32493, 190, 228, -32510, 190, 150,
    -32508, 190, 229, 230, -32451, 190, 150, 95, -32489, 190, 42, -32460, 190, 320, -32498, 190, 42, 95, -32510, 190,
    218, -32509, 190, 240, 241, 242, -32511, 190, 243, -32511, 190, 245, 246, -32489, 190, 247, -32503, 190, 157, -32500,
    190, 127, 190, 128, 129, 130, 131, 132, 133, 134, -32506, 190, 249, -32503, 190, 245, 95, -32510, 190, 218,
    -32509, 190, 240, 241, 242, -32511, 190, 244, -32511, 190, 245, 246, -32489, 190, 247, -32503, 190, 157, -32500, 190,
    127, 190, 128, 129, 130, 131, 132, 133, 134, -32506, 190, 250, -32503, 190, 245, 95, -32489, 190, 12, -32487,
    190, 321, -32471, 190, 12, 95, -32489, 190, 135, -32444, 190, 135};

    // Unwinding action table for error repair.

    private static final int[] gen_unwindingTable = 
    {10, 95, 3, 94, 5, 137, 7, 130, 137, 12, 137, 138, 16, 120, 120, 137, 98, 98, 138, 138,
    138, 84, 119, 138, 100, 100, 121, 13, 41, 122, 71, 138, 124, 119, 119, 26, 111, 3, 138, 138,
    138, 138, 138, 138, 138, 124, 20, 120, 122, 25, 121, 121, 138, 137, 137, 119, 137, 129, 9, 106,
    106, 5, 70, 68, 69, 122, 137, 100, 119, 26, 139, 139, 58, 129, 129, 121, 138, 138, 99, 111,
    111, 43, 123, 45, 49, 138, 138, 122, 124, 119, 11, 59, 59, 12, 122, 46, 52, 122, 50, 109,
    109, 119, 67, 122, 129, 12, 61, 61, 9, 119, 45, 138, 119, 49, 138, 138, 138, 119, 138, 119,
    111, 111, 99, 124, 110, 110, 119, 42, 111, 111, 12, 119};

    // The names of symbols.

    private static final String[] gen_symbols = 
    {
        "%%EOF",
        "const",
        "var",
        "begin",
        "end",
        "integer",
        "boolean",
        "procedure",
        "print",
        "read",
        "if",
        "then",
        "else",
        "for",
        "to",
        "do",
        "return",
        "call",
        "not",
        "and",
        "or",
        "true",
        "false",
        "comma",
        "semicolon",
        "colon",
        "lparen",
        "rparen",
        "lbracket",
        "rbracket",
        "plus",
        "minus",
        "star",
        "slash",
        "assign",
        "constEquals",
        "isEquals",
        "notEquals",
        "lessThan",
        "lessThanEquals",
        "greaterThan",
        "greaterThanEquals",
        "id",
        "intConst",
        "stringConst",
        "program",
        "Goal",
        "startMainBlock",
        "constDecList",
        "varDecList",
        "procDecList",
        "showSymbolTable",
        "StartMarker",
        "statement",
        "statementList",
        "endMainBlock",
        "constDec",
        "varDec",
        "procDec",
        "idList",
        "factor",
        "scalarType",
        "arrayIdList",
        "arrayType",
        "procHeader",
        "procBody",
        "formalList",
        "blockStmnt",
        "formal",
        "printStmnt",
        "readStmnt",
        "asgnStmnt",
        "Cond",
        "forStmnt",
        "returnStmnt",
        "callStmnt",
        "startNewBlock",
        "AddConstQuads",
        "endCurrentBlock",
        "printExprList",
        "expr",
        "inputTargetList",
        "inputTarget",
        "CondIfPart",
        "CondThenPartUM",
        "CondThenPartM",
        "CondElseJump",
        "exprList",
        "term",
        "prim",
        "boolConst",
        "value",
        "relop",
        "%%Goal"
    };

    // The link name for each production.

    private static final String[] gen_productionLink = 
    {
        "",
        "",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "",
        "",
        "",
        "",
        "idList",
        "list",
        "single",
        "idList",
        "arrayIdList",
        "list",
        "single",
        "",
        "",
        "",
        "list",
        "single",
        "empty",
        "",
        "integer",
        "boolean",
        "integer",
        "boolean",
        "blockStmnt",
        "printStmnt",
        "readStmnt",
        "asgnStmnt",
        "condStmnt",
        "forStmnt",
        "returnStmnt",
        "callStmnt",
        "",
        "",
        "",
        "",
        "",
        "empty",
        "single",
        "nonempty",
        "",
        "empty",
        "single",
        "nonempty",
        "id",
        "idArray",
        "int",
        "intArray",
        "unmatched",
        "matched",
        "",
        "",
        "",
        "",
        "",
        "",
        "nothing",
        "exprList",
        "list",
        "single",
        "plus",
        "minus",
        "or",
        "term",
        "star",
        "slash",
        "and",
        "factor",
        "positive",
        "negative",
        "not",
        "const",
        "boolConst",
        "value",
        "expr",
        "relop",
        "id",
        "expr",
        "isEquals",
        "lessThan",
        "greaterThan",
        "lessThanEquals",
        "greaterThanEquals",
        "notEquals",
        "true",
        "false",
        ""
    };




    // RLE decoding function

    private static synchronized void decodeRLE ()
    {
        if (gen_actionTable == null)
        {
            gen_actionTable = ArrayRLE.shortRLEToShort2D (rle_actionTable);
            rle_actionTable = null;
        }

        return;
    }




    // Constructor installs the generated tables into the ParserTable

    public NanoGrammarParserTable ()
    {
        super ();

        // Decode the run-length-encoded tables

        decodeRLE ();

        // Copy parsing tables into the ParserTable superclass

        _symbolCount = gen_symbolCount;
        _productionCount = gen_productionCount;
        _productionLHSSymbol = gen_productionLHSSymbol;
        _productionRHSLength = gen_productionRHSLength;
        _productionParam = gen_productionParam;
        _maxInsertion = gen_maxInsertion;
        _maxDeletion = gen_maxDeletion;
        _validationLength = gen_validationLength;
        _singlePointInsertionCount = gen_singlePointInsertionCount;
        _singlePointInsertions = gen_singlePointInsertions;
        _goalProduction = gen_goalProduction;
        _eofSymbol = gen_eofSymbol;
        _insertionCost = gen_insertionCost;
        _deletionCost = gen_deletionCost;
        _stateCount = gen_stateCount;
        _actionTable = gen_actionTable;
        _unwindingTable = gen_unwindingTable;

        // Copy dynamic-link tables into the ParserTable superclass

        _symbols = gen_symbols;
        _productionLink = gen_productionLink;

        return;
    }


}

