// File generated by Invisible Jacc version 1.1.
// Invisible Jacc is Copyright 1997-1998 Invisible Software, Inc.

package NanoSymtabCompiler;

import invisible.jacc.parse.ParserTable;
import invisible.jacc.util.ArrayRLE;

public class NanoGrammarParserTable extends ParserTable
{

    // The number of symbols.

    private static final int gen_symbolCount = 89;

    // The number of productions.

    private static final int gen_productionCount = 91;

    // The symbol on the left hand side of each production.

    private static final int[] gen_productionLHSSymbol = 
    {45, 44, 47, 47, 48, 48, 49, 49, 52, 52, 46, 53, 50, 54, 57, 57, 55, 55, 60, 60,
    56, 62, 62, 62, 64, 59, 59, 61, 61, 51, 51, 51, 51, 51, 51, 51, 51, 63, 72, 73,
    65, 74, 74, 74, 66, 76, 76, 76, 77, 77, 67, 67, 68, 68, 78, 79, 80, 81, 69, 70,
    71, 71, 82, 82, 75, 75, 75, 75, 83, 83, 83, 83, 58, 58, 58, 84, 84, 84, 84, 84,
    86, 86, 87, 87, 87, 87, 87, 87, 85, 85, 88};

    // The length of the right hand side of each production.

    private static final int[] gen_productionRHSLength = 
    {1, 12, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 5, 3, 1, 5, 5, 6, 4,
    7, 3, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 0, 0,
    6, 0, 1, 3, 6, 0, 1, 3, 1, 4, 4, 7, 2, 2, 2, 2, 5, 0, 8, 2,
    5, 6, 3, 1, 3, 3, 3, 1, 3, 3, 3, 1, 1, 2, 2, 1, 1, 1, 3, 5,
    1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 2};

    // The parameter for each production.

    private static final int[] gen_productionParam = 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    // The maximum number of insertions during error repair.

    private static final int gen_maxInsertion = 100;

    // The maximum number of deletions during error repair.

    private static final int gen_maxDeletion = 200;

    // The validation length for error repair.

    private static final int gen_validationLength = 5;

    // The number of single-point insertions for error repair.

    private static final int gen_singlePointInsertionCount = 43;

    // The list of symbols for single-point insertions.

    private static final int[] gen_singlePointInsertions = 
    {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42, 43};

    // The goal production.

    private static final int gen_goalProduction = 90;

    // The end-of-file symbol.

    private static final int gen_eofSymbol = 0;

    // Insertion cost of each symbol for error repair.

    private static final int[] gen_insertionCost = 
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0};

    // Deletion cost of each symbol for error repair.

    private static final int[] gen_deletionCost = 
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0};

    // The number of LR(1) states.

    private static final int gen_stateCount = 131;

    // Parsing action table.

    private static short[][] gen_actionTable = null;
    private static short[] rle_actionTable = 
    {131, 90, 182, -32510, 10, -32510, 182, 10, -32477, 182, 91, 183, 184, -32471, 182, 10, 90, 90, -32425, 182,
    185, 90, 182, -32510, 3, -32510, 182, 3, -32474, 182, 186, -32472, 182, 3, 90, -32424, 182, 90, 90, 182,
    187, -32511, 5, -32510, 182, 5, -32473, 182, 188, -32508, 182, 93, -32479, 182, 5, 90, -32472, 182, 189, -32498,
    182, 190, -32482, 182, 189, 90, -32511, 182, 191, 7, -32510, 182, 7, -32472, 182, 192, -32508, 182, 95, -32480,
    182, 7, 90, -32490, 182, 193, 182, 15, -32504, 182, 15, -32460, 182, 15, 90, -32478, 182, 194, -32460, 182,
    194, 90, -32472, 182, 195, -32498, 182, 196, -32511, 182, 197, -32485, 182, 195, 90, -32510, 182, 12, -32510, 182,
    198, -32471, 182, 199, -32508, 182, 97, -32481, 182, 12, 90, -32472, 182, 189, -32498, 182, 105, -32482, 182, 189,
    90, -32495, 182, 200, -32511, 182, 179, 180, -32510, 182, 201, -32509, 182, 202, -32504, 182, 203, 166, -32498, 182,
    204, -32488, 182, 163, 167, 168, -32511, 182, 166, 90, -32490, 182, 193, 182, 15, -32511, 182, 205, -32453, 182,
    15, 90, -32488, 182, 206, -32450, 182, 206, 90, -32488, 182, 207, -32450, 182, 207, 90, -32472, 182, 208, -32466,
    182, 208, 90, -32510, 182, 209, -32428, 182, 209, 90, -32492, 182, 179, 180, -32510, 182, 201, -32499, 182, 203,
    166, -32472, 182, 165, 167, 168, -32511, 182, 166, 90, -32495, 182, 200, -32511, 182, 179, 180, -32510, 182, 201,
    -32509, 182, 202, -32504, 182, 203, 166, -32498, 182, 162, -32497, 182, 210, -32506, 182, 211, 163, 167, 168, -32511,
    182, 166, 90, -32492, 182, 179, 180, -32510, 182, 201, -32499, 182, 203, 166, -32472, 182, 164, 167, 168, -32511,
    182, 166, 90, -32502, 182, 80, -32511, 182, -32511, 80, -32510, 182, -32511, 80, -32511, 182, -32511, 80, -32511, 182,
    80, 212, -32508, 80, 182, -32507, 80, -32465, 182, 80, 90, -32489, 182, 104, -32449, 182, 104, 90, -32471, 182,
    213, -32467, 182, 213, 90, -32508, 182, 116, 117, -32461, 182, 214, -32484, 182, 116, 90, -32508, 182, 118, 119,
    -32459, 182, 215, -32486, 182, 118, 90, -32487, 182, 216, -32451, 182, 216, 90, -32510, 182, 217, -32509, 182, 218,
    219, 220, -32511, 182, 221, -32511, 182, 223, 224, -32490, 182, 225, -32504, 182, 226, -32502, 182, 120, 182, 121,
    122, 123, 124, 125, 126, 127, -32507, 182, 227, -32503, 182, 223, 90, -32493, 182, 229, -32507, 182, 169, -32511,
    182, 230, 231, -32510, 182, 173, 178, 174, 176, 175, 177, -32467, 182, 232, 182, 169, 90, -32502, 182, 67,
    -32511, 182, -32511, 67, -32510, 182, 233, 67, -32511, 182, -32511, 67, -32511, 182, 67, 182, -32510, 67, 234, 235,
    182, -32507, 67, -32465, 182, 67, 90, -32495, 182, 200, -32511, 182, 179, 180, -32510, 182, 201, -32509, 182, 202,
    -32504, 182, 203, 166, -32498, 182, 162, -32497, 182, 236, -32506, 182, 211, 163, 167, 168, -32511, 182, 166, 90,
    -32484, 182, 237, -32454, 182, 237, 90, -32489, 182, 107, -32449, 182, 107, 90, -32489, 182, 108, -32449, 182, 108,
    90, -32486, 182, 23, -32500, 182, 189, -32498, 182, 238, -32509, 182, 239, 182, 240, -32489, 182, 23, 90, 182,
    -32509, 38, -32510, 182, -32510, 38, -32511, 182, 38, -32511, 182, -32511, 38, -32490, 182, 38, -32483, 182, 241, -32497,
    182, 38, 90, -32487, 182, 242, -32451, 182, 242, 90, -32487, 182, 243, -32451, 182, 243, 90, -32495, 182, 200,
    -32511, 182, 179, 180, -32510, 182, 201, -32509, 182, 202, -32504, 182, 203, 166, -32498, 182, 162, -32497, 182, 244,
    -32506, 182, 211, 163, 167, 168, -32511, 182, 166, 90, -32472, 182, 245, -32466, 182, 245, 90, -32472, 182, 246,
    -32466, 182, 246, 90, -32489, 182, 150, -32449, 182, 150, 90, -32472, 182, 247, -32466, 182, 247, 90, -32485, 182,
    248, -32508, 182, 249, -32459, 182, 249, 90, -32510, 182, -32511, 9, -32510, 182, -32510, 9, -32511, 182, 9, -32511,
    182, -32511, 9, -32490, 182, 9, -32503, 182, 250, -32477, 182, 9, 90, -32502, 182, 251, -32446, 182, 143, 144,
    -32505, 182, 251, 90, -32502, 182, 252, -32446, 182, 143, 144, -32505, 182, 252, 90, -32495, 182, 200, -32511, 182,
    179, 180, -32510, 182, 201, -32509, 182, 202, -32504, 182, 203, 166, -32498, 182, 162, -32489, 182, 253, 163, 167,
    168, -32511, 182, 166, 90, -32495, 182, 200, -32511, 182, 179, 180, -32510, 182, 201, -32509, 182, 202, -32504, 182,
    203, 166, -32498, 182, 162, -32489, 182, 254, 163, 167, 168, -32511, 182, 166, 90, -32495, 182, 200, -32511, 182,
    179, 180, -32510, 182, 201, -32509, 182, 202, -32504, 182, 203, 166, -32498, 182, 162, -32489, 182, 255, 163, 167,
    168, -32511, 182, 166, 90, -32495, 182, 200, -32511, 182, 179, 180, -32510, 182, 201, -32509, 182, 202, -32504, 182,
    203, 166, -32498, 182, 162, -32497, 182, 256, -32506, 182, 211, 163, 167, 168, -32511, 182, 166, 90, -32495, 182,
    200, -32511, 182, 179, 180, -32510, 182, 201, -32509, 182, 202, -32504, 182, 203, 166, -32498, 182, 161, -32488, 182,
    163, 167, 168, -32511, 182, 166, 90, -32495, 182, 200, -32511, 182, 179, 180, -32510, 182, 201, -32509, 182, 202,
    -32504, 182, 203, 166, -32498, 182, 159, -32488, 182, 163, 167, 168, -32511, 182, 166, 90, -32495, 182, 200, -32511,
    182, 179, 180, -32510, 182, 201, -32509, 182, 202, -32504, 182, 203, 166, -32498, 182, 160, -32488, 182, 163, 167,
    168, -32511, 182, 166, 90, -32493, 182, 229, -32505, 182, 172, 230, 231, -32456, 182, 172, 90, -32490, 182, 257,
    182, 19, -32450, 182, 19, 90, -32488, 182, 258, -32450, 182, 258, 90, -32486, 182, 259, -32452, 182, 259, 90,
    -32489, 182, 260, -32511, 182, 22, -32452, 182, 22, 90, 182, -32509, 3, -32510, 182, -32510, 3, -32511, 182, 3,
    -32511, 182, -32511, 3, -32490, 182, 3, -32508, 182, 261, -32472, 182, 3, 90, -32470, 182, 262, -32468, 182, 262,
    90, -32470, 182, 263, -32468, 182, 263, 90, -32502, 182, 54, -32505, 182, 229, -32504, 182, 230, 231, -32456, 182,
    54, 90, -32479, 182, 264, -32459, 182, 264, 90, -32479, 182, 265, -32459, 182, 265, 90, -32487, 182, 266, -32451,
    182, 266, 90, -32495, 182, 200, -32511, 182, 179, 180, -32510, 182, 201, -32509, 182, 202, -32504, 182, 203, 166,
    -32498, 182, 162, -32497, 182, 267, -32506, 182, 211, 163, 167, 168, -32511, 182, 166, 90, -32495, 182, 200, -32511,
    182, 179, 180, -32510, 182, 201, -32509, 182, 202, -32504, 182, 203, 166, -32498, 182, 162, -32497, 182, 268, -32506,
    182, 211, 163, 167, 168, -32511, 182, 166, 90, -32510, 182, 217, 269, -32510, 182, 218, 219, 220, -32511, 182,
    221, -32511, 182, 223, 224, -32490, 182, 225, -32504, 182, 99, -32502, 182, 120, 182, 121, 122, 123, 124, 125,
    126, 127, -32507, 182, 227, -32503, 182, 269, 90, -32510, 182, 217, -32509, 182, 218, 219, 220, -32511, 182, 222,
    -32511, 182, 223, 224, -32490, 182, 225, -32504, 182, 270, -32502, 182, 120, 182, 121, 122, 123, 124, 125, 126,
    127, -32507, 182, 228, -32503, 182, 223, 90, -32510, 182, 217, -32509, 182, 218, 219, 220, -32511, 182, 222, -32511,
    182, 223, 224, -32490, 182, 225, -32504, 182, 271, -32502, 182, 120, 182, 121, 122, 123, 124, 125, 126, 127,
    -32507, 182, 228, -32503, 182, 223, 90, -32502, 182, 66, -32511, 182, -32511, 66, -32510, 182, 233, 66, -32511, 182,
    -32511, 66, -32511, 182, 66, 182, -32510, 66, 234, 235, 182, -32507, 66, -32465, 182, 66, 90, -32502, 182, 64,
    -32511, 182, -32511, 64, -32510, 182, 233, 64, -32511, 182, -32511, 64, -32511, 182, 64, 182, -32510, 64, 234, 235,
    182, -32507, 64, -32465, 182, 64, 90, -32502, 182, 65, -32511, 182, -32511, 65, -32510, 182, 233, 65, -32511, 182,
    -32511, 65, -32511, 182, 65, 182, -32510, 65, 234, 235, 182, -32507, 65, -32465, 182, 65, 90, -32493, 182, 229,
    -32507, 182, 170, -32511, 182, 230, 231, -32456, 182, 170, 90, -32472, 182, 272, -32495, 182, 109, -32485, 182, 272,
    90, -32508, 182, 116, 117, -32461, 182, 115, -32484, 182, 116, 90, -32489, 182, 273, -32449, 182, 273, 90, -32486,
    182, 23, -32500, 182, 189, -32498, 182, 238, -32509, 182, 112, 182, 240, -32489, 182, 23, 90, 182, 187, -32510,
    5, -32510, 182, -32510, 5, -32511, 182, 5, -32511, 182, -32511, 5, -32490, 182, 5, -32507, 182, 274, -32508, 182,
    93, -32479, 182, 5, 90, -32495, 182, 200, -32511, 182, 179, 180, -32510, 182, 201, 41, -32510, 182, 202, -32504,
    182, 203, 166, -32498, 182, 162, -32498, 182, 275, 276, -32506, 182, 211, 163, 167, 168, -32511, 182, 41, 90,
    -32486, 182, 45, -32500, 182, 277, -32479, 182, 278, 279, -32502, 182, 45, 90, -32495, 182, 200, -32511, 182, 179,
    180, -32510, 182, 201, -32509, 182, 202, -32504, 182, 203, 166, -32498, 182, 162, -32497, 182, 280, -32506, 182, 211,
    163, 167, 168, -32511, 182, 166, 90, -32495, 182, 200, -32511, 182, 179, 180, -32510, 182, 201, -32509, 182, 202,
    -32504, 182, 203, 166, -32498, 182, 162, -32497, 182, 281, -32506, 182, 211, 163, 167, 168, -32511, 182, 166, 90,
    -32495, 182, 200, -32511, 182, 179, 180, -32510, 182, 201, 282, -32510, 182, 202, -32504, 182, 203, 166, -32498, 182,
    162, -32497, 182, 283, -32507, 182, 284, 211, 163, 167, 168, -32511, 182, 282, 90, -32493, 182, 229, -32505, 182,
    285, 230, 231, -32456, 182, 285, 90, -32493, 182, 229, -32510, 182, 141, -32508, 182, 230, 231, -32456, 182, 141,
    90, -32489, 182, 11, -32485, 182, 286, -32478, 182, 11, 90, -32510, 182, -32511, 55, -32510, 182, -32510, 55, 182,
    287, 55, -32511, 182, -32511, 55, -32490, 182, 55, -32466, 182, 55, 90, -32510, 182, -32511, 55, -32510, 182, -32510,
    55, 182, 288, 55, -32511, 182, -32511, 55, -32490, 182, 55, -32466, 182, 55, 90, -32485, 182, 205, -32453, 182,
    205, 90, -32510, 182, 217, -32454, 182, 111, -32488, 182, 217, 90, -32511, 182, 191, -32511, 12, -32510, 182, -32510,
    12, -32511, 182, 12, -32511, 182, -32511, 12, -32490, 182, 12, -32505, 182, 289, -32509, 182, 95, -32480, 182, 12,
    90, -32486, 182, 290, -32452, 182, 290, 90, -32493, 182, 229, -32511, 182, 291, -32510, 182, 42, -32511, 182, 230,
    231, -32456, 182, 42, 90, -32490, 182, 48, -32510, 182, 48, 292, -32453, 182, 48, 90, -32486, 182, 293, -32452,
    182, 293, 90, -32490, 182, 294, -32510, 182, 46, -32452, 182, 46, 90, -32499, 182, 295, -32508, 182, 229, -32504,
    182, 230, 231, -32456, 182, 295, 90, -32499, 182, 296, -32508, 182, 229, -32504, 182, 230, 231, -32456, 182, 296,
    90, -32489, 182, 151, -32449, 182, 151, 90, -32493, 182, 229, -32511, 182, 297, -32510, 182, 63, -32511, 182, 230,
    231, -32456, 182, 63, 90, -32486, 182, 298, -32452, 182, 298, 90, -32479, 182, 299, -32459, 182, 299, 90, -32489,
    182, 12, -32488, 182, 300, -32475, 182, 12, 90, -32510, 182, 57, -32509, 182, -32510, 57, -32511, 182, 57, -32511,
    182, -32511, 57, -32490, 182, 57, -32474, 182, 301, -32506, 182, 57, 90, -32510, 182, 57, -32509, 182, -32510, 57,
    -32511, 182, 57, -32511, 182, -32511, 57, -32490, 182, 57, -32474, 182, 302, -32506, 182, 57, 90, -32510, 182, -32511,
    9, -32510, 182, -32510, 9, -32511, 182, 9, -32511, 182, -32511, 9, -32490, 182, 9, -32503, 182, 303, -32477, 182,
    9, 90, -32489, 182, 131, -32449, 182, 131, 90, -32495, 182, 200, -32511, 182, 179, 180, -32510, 182, 201, 41,
    -32510, 182, 202, -32504, 182, 203, 166, -32498, 182, 162, -32498, 182, 134, 276, -32506, 182, 211, 163, 167, 168,
    -32511, 182, 41, 90, -32495, 182, 200, -32511, 182, 179, 180, -32510, 182, 201, -32509, 182, 202, -32504, 182, 203,
    166, -32498, 182, 162, -32497, 182, 304, -32506, 182, 211, 163, 167, 168, -32511, 182, 166, 90, -32489, 182, 135,
    -32449, 182, 135, 90, -32486, 182, 45, -32500, 182, 277, -32479, 182, 138, 279, -32502, 182, 45, 90, -32495, 182,
    200, -32511, 182, 179, 180, -32510, 182, 201, -32509, 182, 202, -32504, 182, 203, 166, -32498, 182, 162, -32497, 182,
    305, -32506, 182, 211, 163, 167, 168, -32511, 182, 166, 90, -32495, 182, 200, -32511, 182, 179, 180, -32510, 182,
    201, -32509, 182, 202, -32504, 182, 203, 166, -32498, 182, 162, -32497, 182, 306, -32506, 182, 211, 163, 167, 168,
    -32511, 182, 166, 90, -32495, 182, 200, -32511, 182, 179, 180, -32510, 182, 201, -32509, 182, 202, -32504, 182, 203,
    166, -32498, 182, 162, -32497, 182, 283, -32507, 182, 153, 211, 163, 167, 168, -32511, 182, 166, 90, -32489, 182,
    152, -32449, 182, 152, 90, -32495, 182, 200, -32511, 182, 179, 180, -32510, 182, 201, -32509, 182, 202, -32504, 182,
    203, 166, -32498, 182, 162, -32497, 182, 307, -32506, 182, 211, 163, 167, 168, -32511, 182, 166, 90, -32489, 182,
    92, -32449, 182, 92, 90, -32510, 182, 217, -32509, 182, 218, 219, 220, -32511, 182, 221, -32511, 182, 223, 224,
    -32490, 182, 225, -32504, 182, 147, -32502, 182, 120, 182, 121, 122, 123, 124, 125, 126, 127, -32507, 182, 227,
    -32503, 182, 223, 90, -32510, 182, 217, -32509, 182, 218, 219, 220, -32511, 182, 222, -32511, 182, 223, 224, -32490,
    182, 225, -32504, 182, 147, -32502, 182, 120, 182, 121, 122, 123, 124, 125, 126, 127, -32507, 182, 228, -32503,
    182, 223, 90, -32510, 182, 217, 308, -32510, 182, 218, 219, 220, -32511, 182, 221, -32511, 182, 223, 224, -32490,
    182, 225, -32504, 182, 99, -32502, 182, 120, 182, 121, 122, 123, 124, 125, 126, 127, -32507, 182, 227, -32503,
    182, 308, 90, -32493, 182, 229, -32505, 182, 140, 230, 231, -32456, 182, 140, 90, -32498, 182, 309, -32509, 182,
    229, -32504, 182, 230, 231, -32456, 182, 309, 90, -32498, 182, 310, -32509, 182, 229, -32504, 182, 230, 231, -32456,
    182, 310, 90, -32493, 182, 229, -32510, 182, 142, -32508, 182, 230, 231, -32456, 182, 142, 90, -32489, 182, 39,
    -32465, 182, 311, -32498, 182, 39, 90, -32510, 182, 217, -32509, 182, 218, 219, 220, -32511, 182, 221, -32511, 182,
    223, 224, -32490, 182, 225, -32504, 182, 149, -32502, 182, 120, 182, 121, 122, 123, 124, 125, 126, 127, -32507,
    182, 227, -32503, 182, 223, 90, -32510, 182, 217, -32509, 182, 218, 219, 220, -32511, 182, 222, -32511, 182, 223,
    224, -32490, 182, 225, -32504, 182, 149, -32502, 182, 120, 182, 121, 122, 123, 124, 125, 126, 127, -32507, 182,
    228, -32503, 182, 223, 90, -32489, 182, 12, -32488, 182, 312, -32475, 182, 12, 90, -32489, 182, 128, -32449, 182,
    128};

    // Unwinding action table for error repair.

    private static final int[] gen_unwindingTable = 
    {10, 91, 3, 90, 5, 132, 7, 15, 126, 132, 12, 132, 133, 15, 116, 116, 132, 94, 133, 133,
    133, 80, 115, 133, 96, 96, 117, 107, 118, 67, 133, 120, 115, 115, 23, 38, 117, 117, 133, 132,
    132, 115, 132, 125, 9, 102, 102, 133, 133, 133, 133, 133, 133, 133, 120, 19, 116, 118, 22, 3,
    134, 134, 54, 125, 125, 117, 133, 133, 95, 107, 107, 66, 64, 65, 118, 132, 96, 115, 23, 5,
    41, 45, 133, 133, 118, 120, 115, 11, 55, 55, 119, 94, 12, 118, 42, 48, 118, 46, 105, 105,
    115, 63, 118, 125, 12, 57, 57, 9, 115, 41, 133, 115, 45, 133, 133, 133, 115, 133, 115, 107,
    107, 95, 120, 106, 106, 115, 39, 107, 107, 12, 115};

    // The names of symbols.

    private static final String[] gen_symbols = 
    {
        "%%EOF",
        "const",
        "var",
        "begin",
        "end",
        "integer",
        "boolean",
        "procedure",
        "print",
        "read",
        "if",
        "then",
        "else",
        "for",
        "to",
        "do",
        "return",
        "call",
        "not",
        "and",
        "or",
        "true",
        "false",
        "comma",
        "semicolon",
        "colon",
        "lparen",
        "rparen",
        "lbracket",
        "rbracket",
        "plus",
        "minus",
        "star",
        "slash",
        "assign",
        "equals",
        "notEquals",
        "lessThan",
        "lessThanEquals",
        "greaterThan",
        "greaterThanEquals",
        "id",
        "intConst",
        "stringConst",
        "program",
        "Goal",
        "startMainBlock",
        "constDecList",
        "varDecList",
        "procDecList",
        "showSymbolTable",
        "statement",
        "statementList",
        "endMainBlock",
        "constDec",
        "varDec",
        "procDec",
        "idList",
        "factor",
        "scalarType",
        "arrayIdList",
        "arrayType",
        "formalList",
        "blockStmnt",
        "formal",
        "printStmnt",
        "readStmnt",
        "asgnStmnt",
        "Cond",
        "forStmnt",
        "returnStmnt",
        "callStmnt",
        "startNewBlock",
        "endCurrentBlock",
        "printExprList",
        "expr",
        "inputTargetList",
        "inputTarget",
        "CondIfPart",
        "CondThenPartUM",
        "CondThenPartM",
        "CondElseJump",
        "exprList",
        "term",
        "prim",
        "boolConst",
        "value",
        "relop",
        "%%Goal"
    };

    // The link name for each production.

    private static final String[] gen_productionLink = 
    {
        "",
        "",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "",
        "",
        "",
        "idList",
        "list",
        "single",
        "idList",
        "arrayIdList",
        "list",
        "single",
        "",
        "list",
        "single",
        "empty",
        "",
        "integer",
        "boolean",
        "integer",
        "boolean",
        "blockStmnt",
        "printStmnt",
        "readStmnt",
        "asgnStmnt",
        "condStmnt",
        "forStmnt",
        "returnStmnt",
        "callStmnt",
        "",
        "",
        "",
        "",
        "empty",
        "single",
        "nonempty",
        "",
        "empty",
        "single",
        "nonempty",
        "id",
        "idArray",
        "int",
        "intArray",
        "unmatched",
        "matched",
        "",
        "",
        "",
        "",
        "",
        "",
        "nothing",
        "exprList",
        "list",
        "single",
        "plus",
        "minus",
        "or",
        "term",
        "star",
        "slash",
        "and",
        "factor",
        "positive",
        "negative",
        "not",
        "const",
        "boolConst",
        "value",
        "expr",
        "relop",
        "id",
        "expr",
        "equals",
        "lessThan",
        "greaterThan",
        "lessThanEquals",
        "greaterThanEquals",
        "notEquals",
        "true",
        "false",
        ""
    };




    // RLE decoding function

    private static synchronized void decodeRLE ()
    {
        if (gen_actionTable == null)
        {
            gen_actionTable = ArrayRLE.shortRLEToShort2D (rle_actionTable);
            rle_actionTable = null;
        }

        return;
    }




    // Constructor installs the generated tables into the ParserTable

    public NanoGrammarParserTable ()
    {
        super ();

        // Decode the run-length-encoded tables

        decodeRLE ();

        // Copy parsing tables into the ParserTable superclass

        _symbolCount = gen_symbolCount;
        _productionCount = gen_productionCount;
        _productionLHSSymbol = gen_productionLHSSymbol;
        _productionRHSLength = gen_productionRHSLength;
        _productionParam = gen_productionParam;
        _maxInsertion = gen_maxInsertion;
        _maxDeletion = gen_maxDeletion;
        _validationLength = gen_validationLength;
        _singlePointInsertionCount = gen_singlePointInsertionCount;
        _singlePointInsertions = gen_singlePointInsertions;
        _goalProduction = gen_goalProduction;
        _eofSymbol = gen_eofSymbol;
        _insertionCost = gen_insertionCost;
        _deletionCost = gen_deletionCost;
        _stateCount = gen_stateCount;
        _actionTable = gen_actionTable;
        _unwindingTable = gen_unwindingTable;

        // Copy dynamic-link tables into the ParserTable superclass

        _symbols = gen_symbols;
        _productionLink = gen_productionLink;

        return;
    }


}

