// File generated by Invisible Jacc version 1.1.
// Invisible Jacc is Copyright 1997-1998 Invisible Software, Inc.

package NanoSymtabCompiler;

import invisible.jacc.parse.ParserTable;
import invisible.jacc.util.ArrayRLE;

public class NanoGrammarParserTable extends ParserTable
{

    // The number of symbols.

    private static final int gen_symbolCount = 81;

    // The number of productions.

    private static final int gen_productionCount = 80;

    // The symbol on the left hand side of each production.

    private static final int[] gen_productionLHSSymbol = 
    {44, 43, 46, 46, 47, 47, 48, 48, 50, 50, 45, 51, 52, 55, 55, 53, 53, 58, 58, 54,
    59, 59, 59, 61, 57, 57, 49, 49, 49, 49, 49, 49, 49, 49, 60, 69, 70, 62, 71, 71,
    63, 73, 73, 74, 74, 64, 64, 65, 65, 66, 67, 68, 68, 75, 75, 72, 72, 72, 72, 76,
    76, 76, 76, 56, 56, 56, 77, 77, 77, 77, 77, 78, 78, 79, 79, 79, 79, 79, 79, 80};

    // The length of the right hand side of each production.

    private static final int[] gen_productionRHSLength = 
    {1, 10, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 5, 3, 1, 5, 5, 6, 4, 7,
    3, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 0, 0, 6, 0, 3,
    6, 0, 3, 1, 4, 4, 7, 4, 6, 8, 2, 5, 6, 3, 1, 3, 3, 3, 1, 3,
    3, 3, 1, 1, 2, 2, 1, 1, 1, 3, 5, 1, 4, 1, 1, 1, 1, 1, 1, 2};

    // The parameter for each production.

    private static final int[] gen_productionParam = 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    // The maximum number of insertions during error repair.

    private static final int gen_maxInsertion = 100;

    // The maximum number of deletions during error repair.

    private static final int gen_maxDeletion = 200;

    // The validation length for error repair.

    private static final int gen_validationLength = 5;

    // The number of single-point insertions for error repair.

    private static final int gen_singlePointInsertionCount = 42;

    // The list of symbols for single-point insertions.

    private static final int[] gen_singlePointInsertions = 
    {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42};

    // The goal production.

    private static final int gen_goalProduction = 79;

    // The end-of-file symbol.

    private static final int gen_eofSymbol = 0;

    // Insertion cost of each symbol for error repair.

    private static final int[] gen_insertionCost = 
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0};

    // Deletion cost of each symbol for error repair.

    private static final int[] gen_deletionCost = 
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0};

    // The number of LR(1) states.

    private static final int gen_stateCount = 124;

    // Parsing action table.

    private static short[][] gen_actionTable = null;
    private static short[] rle_actionTable = 
    {124, 82, 160, -32510, 10, -32510, 160, 10, -32478, 160, 80, 161, 162, -32478, 160, 10, 82, 79, -32433, 160,
    163, 82, 160, -32510, 3, -32510, 160, 3, -32475, 160, 164, -32479, 160, 3, 82, -32432, 160, 79, 82, 160,
    165, -32511, 5, -32510, 160, 5, -32474, 160, 166, -32509, 160, 82, -32485, 160, 5, 82, -32474, 160, 167, -32498,
    160, 168, -32488, 160, 167, 82, -32511, 160, 169, 7, -32510, 160, 7, -32473, 160, 170, -32509, 160, 84, -32486,
    160, 7, 82, -32492, 160, 171, 160, 14, -32504, 160, 14, -32466, 160, 14, 82, -32480, 160, 172, -32466, 160,
    172, 82, -32474, 160, 173, -32498, 160, 174, -32511, 160, 175, -32491, 160, 173, 82, -32510, 160, 176, -32510, 160,
    177, -32467, 160, 86, -32487, 160, 176, 82, -32474, 160, 167, -32498, 160, 93, -32488, 160, 167, 82, -32495, 160,
    178, -32508, 160, 179, -32509, 160, 180, -32504, 160, 181, 146, 147, -32499, 160, 182, -32493, 160, 143, 148, -32511,
    160, 146, 82, -32492, 160, 171, 160, 14, -32511, 160, 183, -32459, 160, 14, 82, -32490, 160, 184, -32456, 160,
    184, 82, -32490, 160, 185, -32456, 160, 185, 82, -32510, 160, 186, -32509, 160, 187, 188, 189, -32511, 160, 191,
    -32511, 160, 193, 194, -32492, 160, 195, -32504, 160, 196, -32503, 160, 106, 160, 107, 108, 109, 110, 111, 112,
    113, -32501, 160, 193, 82, -32474, 160, 197, -32472, 160, 197, 82, -32489, 160, 179, -32499, 160, 181, 146, 147,
    -32478, 160, 145, 148, -32511, 160, 146, 82, -32495, 160, 178, -32508, 160, 179, -32509, 160, 180, -32504, 160, 181,
    146, 147, -32499, 160, 142, -32498, 160, 198, -32510, 160, 199, 143, 148, -32511, 160, 146, 82, -32489, 160, 179,
    -32499, 160, 181, 146, 147, -32478, 160, 144, 148, -32511, 160, 146, 82, -32502, 160, 71, -32511, 160, -32511, 71,
    -32510, 160, -32509, 71, -32511, 160, 71, 200, -32508, 71, 160, -32507, 71, -32471, 160, 71, 82, -32491, 160, 92,
    -32455, 160, 92, 82, -32473, 160, 201, -32473, 160, 201, 82, -32508, 160, 104, 105, -32463, 160, 202, -32490, 160,
    104, 82, -32508, 160, 104, 105, -32463, 160, 203, -32490, 160, 104, 82, 160, -32509, 35, -32510, 160, -32510, 35,
    -32511, 160, 35, -32511, 160, -32511, 35, -32492, 160, 35, -32484, 160, 204, -32502, 160, 35, 82, -32489, 160, 205,
    -32457, 160, 205, 82, -32489, 160, 206, -32457, 160, 206, 82, -32495, 160, 178, -32508, 160, 179, -32509, 160, 180,
    -32504, 160, 181, 146, 147, -32499, 160, 142, -32498, 160, 207, -32510, 160, 199, 143, 148, -32511, 160, 146, 82,
    -32495, 160, 178, -32508, 160, 179, -32509, 160, 180, -32504, 160, 181, 146, 147, -32499, 160, 142, -32498, 160, 208,
    -32510, 160, 199, 143, 148, -32511, 160, 146, 82, -32474, 160, 209, -32472, 160, 209, 82, -32474, 160, 210, -32472,
    160, 210, 82, -32491, 160, 130, -32455, 160, 130, 82, -32474, 160, 211, -32472, 160, 211, 82, -32487, 160, 212,
    -32508, 160, 213, -32465, 160, 213, 82, -32510, 160, -32511, 9, -32510, 160, -32510, 9, -32511, 160, 9, -32511, 160,
    -32511, 9, -32492, 160, 9, -32503, 160, 214, -32483, 160, 9, 82, -32489, 160, 215, -32457, 160, 215, 82, -32493,
    160, 216, -32509, 160, 149, -32511, 160, 217, 218, -32510, 160, 153, 158, 154, 156, 155, 157, -32473, 160, 219,
    160, 149, 82, -32502, 160, 58, -32511, 160, -32511, 58, -32510, 160, 220, -32510, 58, -32511, 160, 58, 160, -32510,
    58, 221, 222, 160, -32507, 58, -32471, 160, 58, 82, -32495, 160, 178, -32508, 160, 179, -32509, 160, 180, -32504,
    160, 181, 146, 147, -32499, 160, 142, -32498, 160, 223, -32510, 160, 199, 143, 148, -32511, 160, 146, 82, -32486,
    160, 224, -32460, 160, 224, 82, -32491, 160, 95, -32455, 160, 95, 82, -32491, 160, 96, -32455, 160, 96, 82,
    160, -32509, 3, -32510, 160, -32510, 3, -32511, 160, 3, -32511, 160, -32511, 3, -32492, 160, 3, -32507, 160, 225,
    -32479, 160, 3, 82, -32471, 160, 226, -32475, 160, 226, 82, -32471, 160, 227, -32475, 160, 227, 82, -32502, 160,
    228, -32505, 160, 216, -32506, 160, 217, 218, -32462, 160, 228, 82, -32502, 160, 229, -32505, 160, 216, -32506, 160,
    217, 218, -32462, 160, 229, 82, -32481, 160, 230, -32465, 160, 230, 82, -32481, 160, 231, -32465, 160, 231, 82,
    -32489, 160, 232, -32457, 160, 232, 82, -32495, 160, 178, -32508, 160, 179, -32509, 160, 180, -32504, 160, 181, 146,
    147, -32499, 160, 142, -32498, 160, 233, -32510, 160, 199, 143, 148, -32511, 160, 146, 82, -32495, 160, 178, -32508,
    160, 179, -32509, 160, 180, -32504, 160, 181, 146, 147, -32499, 160, 142, -32498, 160, 234, -32510, 160, 199, 143,
    148, -32511, 160, 146, 82, -32510, 160, 186, 235, -32510, 160, 187, 188, 189, -32511, 160, 191, -32511, 160, 193,
    194, -32492, 160, 195, -32504, 160, 88, -32503, 160, 106, 160, 107, 108, 109, 110, 111, 112, 113, -32501, 160,
    235, 82, -32488, 160, 22, -32500, 160, 167, -32498, 160, 236, -32510, 160, 237, 160, 238, -32494, 160, 22, 82,
    -32495, 160, 178, -32508, 160, 179, -32509, 160, 180, -32504, 160, 181, 146, 147, -32499, 160, 142, -32494, 160, 239,
    143, 148, -32511, 160, 146, 82, -32495, 160, 178, -32508, 160, 179, -32509, 160, 180, -32504, 160, 181, 146, 147,
    -32499, 160, 142, -32494, 160, 240, 143, 148, -32511, 160, 146, 82, -32495, 160, 178, -32508, 160, 179, -32509, 160,
    180, -32504, 160, 181, 146, 147, -32499, 160, 142, -32494, 160, 241, 143, 148, -32511, 160, 146, 82, -32495, 160,
    178, -32508, 160, 179, -32509, 160, 180, -32504, 160, 181, 146, 147, -32499, 160, 142, -32498, 160, 242, -32510, 160,
    199, 143, 148, -32511, 160, 146, 82, -32495, 160, 178, -32508, 160, 179, -32509, 160, 180, -32504, 160, 181, 146,
    147, -32499, 160, 141, -32493, 160, 143, 148, -32511, 160, 146, 82, -32495, 160, 178, -32508, 160, 179, -32509, 160,
    180, -32504, 160, 181, 146, 147, -32499, 160, 139, -32493, 160, 143, 148, -32511, 160, 146, 82, -32495, 160, 178,
    -32508, 160, 179, -32509, 160, 180, -32504, 160, 181, 146, 147, -32499, 160, 140, -32493, 160, 143, 148, -32511, 160,
    146, 82, -32493, 160, 216, -32507, 160, 152, 217, 218, -32462, 160, 152, 82, -32492, 160, 243, 160, 18, -32456,
    160, 18, 82, 160, 165, -32510, 5, -32510, 160, -32510, 5, -32511, 160, 5, -32511, 160, -32511, 5, -32492, 160,
    5, -32506, 160, 244, -32509, 160, 82, -32485, 160, 5, 82, -32492, 160, 38, -32510, 160, 38, -32468, 160, 245,
    -32504, 160, 38, 82, -32492, 160, 41, -32510, 160, 41, -32466, 160, 246, -32506, 160, 41, 82, -32510, 160, 186,
    -32509, 160, 187, 188, 190, -32511, 160, 192, -32511, 160, 193, 194, -32492, 160, 195, -32504, 160, 247, -32503, 160,
    106, 160, 107, 108, 109, 110, 111, 112, 113, -32501, 160, 193, 82, -32510, 160, 186, -32509, 160, 187, 188,
    190, -32511, 160, 192, -32511, 160, 193, 194, -32492, 160, 195, -32504, 160, 248, -32503, 160, 106, 160, 107, 108,
    109, 110, 111, 112, 113, -32501, 160, 193, 82, -32495, 160, 178, -32508, 160, 179, -32509, 160, 180, -32504, 160,
    181, 146, 147, -32499, 160, 142, -32498, 160, 249, -32510, 160, 199, 143, 148, -32511, 160, 146, 82, -32495, 160,
    178, -32508, 160, 179, -32509, 160, 180, -32504, 160, 181, 146, 147, -32499, 160, 142, -32498, 160, 250, -32510, 160,
    199, 143, 148, -32511, 160, 146, 82, -32495, 160, 178, -32508, 160, 179, 251, -32510, 160, 180, -32504, 160, 181,
    146, 147, -32499, 160, 142, -32498, 160, 252, -32511, 160, 253, 199, 143, 148, -32511, 160, 251, 82, -32493, 160,
    216, -32507, 160, 254, 217, 218, -32462, 160, 254, 82, -32493, 160, 216, 160, 125, -32508, 160, 217, 218, -32462,
    160, 125, 82, -32491, 160, 11, -32485, 160, 255, -32484, 160, 11, 82, -32490, 160, 256, -32456, 160, 256, 82,
    -32488, 160, 257, -32458, 160, 257, 82, -32491, 160, 258, -32511, 160, 21, -32458, 160, 21, 82, -32502, 160, 57,
    -32511, 160, -32511, 57, -32510, 160, 220, -32510, 57, -32511, 160, 57, 160, -32510, 57, 221, 222, 160, -32507, 57,
    -32471, 160, 57, 82, -32502, 160, 55, -32511, 160, -32511, 55, -32510, 160, 220, -32510, 55, -32511, 160, 55, 160,
    -32510, 55, 221, 222, 160, -32507, 55, -32471, 160, 55, 82, -32502, 160, 56, -32511, 160, -32511, 56, -32510, 160,
    220, -32510, 56, -32511, 160, 56, 160, -32510, 56, 221, 222, 160, -32507, 56, -32471, 160, 56, 82, -32493, 160,
    216, -32509, 160, 150, -32511, 160, 217, 218, -32462, 160, 150, 82, -32474, 160, 259, -32495, 160, 97, -32491, 160,
    259, 82, -32511, 160, 169, -32511, 9, -32510, 160, -32510, 9, -32511, 160, 9, -32511, 160, -32511, 9, -32492, 160,
    9, -32503, 160, 260, -32511, 160, 84, -32486, 160, 9, 82, -32492, 160, 261, -32510, 160, 262, -32458, 160, 262,
    82, -32492, 160, 263, -32510, 160, 264, -32458, 160, 264, 82, -32510, 160, -32511, 47, -32510, 160, -32510, 47, 160,
    265, 47, -32511, 160, -32511, 47, -32492, 160, 47, -32472, 160, 47, 82, -32510, 160, -32511, 47, -32510, 160, -32510,
    47, 160, 266, 47, -32511, 160, -32511, 47, -32492, 160, 47, -32472, 160, 47, 82, -32499, 160, 267, -32508, 160,
    216, -32506, 160, 217, 218, -32462, 160, 267, 82, -32499, 160, 268, -32508, 160, 216, -32506, 160, 217, 218, -32462,
    160, 268, 82, -32491, 160, 131, -32455, 160, 131, 82, -32493, 160, 216, 269, -32510, 160, 54, -32511, 160, 217,
    218, -32462, 160, 54, 82, -32488, 160, 270, -32458, 160, 270, 82, -32481, 160, 271, -32465, 160, 271, 82, -32491,
    160, 81, -32455, 160, 81, 82, -32508, 160, 104, 105, -32463, 160, 103, -32490, 160, 104, 82, -32491, 160, 272,
    -32455, 160, 272, 82, -32488, 160, 22, -32500, 160, 167, -32498, 160, 236, -32510, 160, 100, 160, 238, -32494, 160,
    22, 82, -32487, 160, 183, -32459, 160, 183, 82, -32510, 160, 186, 273, -32510, 160, 187, 188, 189, -32511, 160,
    191, -32511, 160, 193, 194, -32492, 160, 195, -32504, 160, 88, -32503, 160, 106, 160, 107, 108, 109, 110, 111,
    112, 113, -32501, 160, 273, 82, -32495, 160, 178, -32508, 160, 179, -32509, 160, 180, -32504, 160, 181, 146, 147,
    -32499, 160, 142, -32498, 160, 274, -32510, 160, 199, 143, 148, -32511, 160, 146, 82, -32491, 160, 117, -32455, 160,
    117, 82, -32474, 160, 275, -32479, 160, 122, -32507, 160, 275, 82, -32491, 160, 120, -32455, 160, 120, 82, -32510,
    160, 186, -32509, 160, 187, 188, 189, -32511, 160, 191, -32511, 160, 193, 194, -32492, 160, 195, -32504, 160, 128,
    -32503, 160, 106, 160, 107, 108, 109, 110, 111, 112, 113, -32501, 160, 193, 82, -32510, 160, 186, -32509, 160,
    187, 188, 190, -32511, 160, 192, -32511, 160, 193, 194, -32492, 160, 195, -32504, 160, 128, -32503, 160, 106, 160,
    107, 108, 109, 110, 111, 112, 113, -32501, 160, 193, 82, -32495, 160, 178, -32508, 160, 179, -32509, 160, 180,
    -32504, 160, 181, 146, 147, -32499, 160, 142, -32498, 160, 276, -32510, 160, 199, 143, 148, -32511, 160, 146, 82,
    -32495, 160, 178, -32508, 160, 179, -32509, 160, 180, -32504, 160, 181, 146, 147, -32499, 160, 142, -32498, 160, 277,
    -32510, 160, 199, 143, 148, -32511, 160, 146, 82, -32495, 160, 178, -32508, 160, 179, -32509, 160, 180, -32504, 160,
    181, 146, 147, -32499, 160, 142, -32498, 160, 252, -32511, 160, 133, 199, 143, 148, -32511, 160, 146, 82, -32491,
    160, 132, -32455, 160, 132, 82, -32495, 160, 178, -32508, 160, 179, -32509, 160, 180, -32504, 160, 181, 146, 147,
    -32499, 160, 142, -32498, 160, 278, -32510, 160, 199, 143, 148, -32511, 160, 146, 82, -32510, 160, 186, -32457, 160,
    99, -32493, 160, 186, 82, -32491, 160, 36, -32466, 160, 279, -32503, 160, 36, 82, -32493, 160, 216, 39, -32510,
    160, 39, -32511, 160, 217, 218, -32462, 160, 39, 82, -32492, 160, 43, -32510, 160, 43, 280, -32459, 160, 43,
    82, -32498, 160, 281, -32509, 160, 216, -32506, 160, 217, 218, -32462, 160, 281, 82, -32498, 160, 282, -32509, 160,
    216, -32506, 160, 217, 218, -32462, 160, 282, 82, -32493, 160, 216, 160, 126, -32508, 160, 217, 218, -32462, 160,
    126, 82, -32491, 160, 114, -32455, 160, 114, 82, -32495, 160, 178, -32508, 160, 179, -32509, 160, 180, -32504, 160,
    181, 146, 147, -32499, 160, 142, -32498, 160, 283, -32510, 160, 199, 143, 148, -32511, 160, 146, 82, -32510, 160,
    186, -32509, 160, 187, 188, 189, -32511, 160, 191, -32511, 160, 193, 194, -32492, 160, 195, -32504, 160, 129, -32503,
    160, 106, 160, 107, 108, 109, 110, 111, 112, 113, -32501, 160, 193, 82, -32510, 160, 186, -32509, 160, 187,
    188, 190, -32511, 160, 192, -32511, 160, 193, 194, -32492, 160, 195, -32504, 160, 129, -32503, 160, 106, 160, 107,
    108, 109, 110, 111, 112, 113, -32501, 160, 193, 82, -32493, 160, 216, -32507, 160, 124, 217, 218, -32462, 160,
    124};

    // Unwinding action table for error repair.

    private static final int[] gen_unwindingTable = 
    {10, 80, 3, 79, 5, 119, 7, 14, 113, 119, 83, 119, 120, 14, 103, 103, 96, 119, 120, 120,
    120, 71, 102, 120, 85, 85, 35, 104, 104, 120, 120, 119, 119, 102, 119, 112, 9, 104, 105, 58,
    120, 107, 102, 102, 3, 122, 122, 91, 91, 112, 112, 104, 120, 120, 84, 22, 120, 120, 120, 120,
    120, 120, 120, 107, 18, 5, 38, 41, 96, 96, 120, 120, 105, 107, 102, 11, 103, 105, 21, 57,
    55, 56, 105, 119, 9, 105, 105, 47, 47, 94, 94, 102, 54, 105, 112, 102, 85, 102, 22, 106,
    84, 120, 102, 119, 102, 96, 96, 120, 120, 120, 102, 120, 83, 36, 39, 43, 95, 95, 102, 102,
    120, 96, 96, 107};

    // The names of symbols.

    private static final String[] gen_symbols = 
    {
        "%%EOF",
        "const",
        "var",
        "begin",
        "end",
        "integer",
        "boolean",
        "procedure",
        "print",
        "read",
        "if",
        "then",
        "else",
        "for",
        "to",
        "do",
        "return",
        "call",
        "not",
        "and",
        "or",
        "comma",
        "semicolon",
        "colon",
        "lparen",
        "rparen",
        "lbracket",
        "rbracket",
        "plus",
        "minus",
        "star",
        "slash",
        "assign",
        "equals",
        "notEquals",
        "lessThan",
        "lessThanEquals",
        "greaterThan",
        "greaterThanEquals",
        "id",
        "intConst",
        "boolConst",
        "stringConst",
        "program",
        "Goal",
        "startMainBlock",
        "constDecList",
        "varDecList",
        "procDecList",
        "statement",
        "statementList",
        "endMainBlock",
        "constDec",
        "varDec",
        "procDec",
        "idList",
        "factor",
        "scalarType",
        "arrayIdList",
        "formalList",
        "blockStmnt",
        "formal",
        "printStmnt",
        "readStmnt",
        "asgnStmnt",
        "condStmnt",
        "forStmnt",
        "returnStmnt",
        "callStmnt",
        "startNewBlock",
        "endCurrentBlock",
        "printExprList",
        "expr",
        "inputTargetList",
        "inputTarget",
        "exprList",
        "term",
        "prim",
        "value",
        "relop",
        "%%Goal"
    };

    // The link name for each production.

    private static final String[] gen_productionLink = 
    {
        "",
        "",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "",
        "",
        "idList",
        "list",
        "single",
        "idList",
        "arrayIdList",
        "list",
        "single",
        "",
        "list",
        "single",
        "empty",
        "",
        "integer",
        "boolean",
        "blockStmnt",
        "printStmnt",
        "readStmnt",
        "asgnStmnt",
        "condStmnt",
        "forStmnt",
        "returnStmnt",
        "callStmnt",
        "",
        "",
        "",
        "",
        "empty",
        "nonempty",
        "",
        "empty",
        "nonempty",
        "id",
        "idArray",
        "int",
        "intArray",
        "ifThen",
        "ifThenElse",
        "",
        "",
        "nothing",
        "exprList",
        "list",
        "single",
        "plus",
        "minus",
        "or",
        "term",
        "star",
        "slash",
        "and",
        "factor",
        "positive",
        "negative",
        "not",
        "const",
        "boolConst",
        "value",
        "expr",
        "relop",
        "id",
        "expr",
        "equals",
        "lessThan",
        "greaterThan",
        "lessThanEquals",
        "greaterThanEquals",
        "notEquals",
        ""
    };




    // RLE decoding function

    private static synchronized void decodeRLE ()
    {
        if (gen_actionTable == null)
        {
            gen_actionTable = ArrayRLE.shortRLEToShort2D (rle_actionTable);
            rle_actionTable = null;
        }

        return;
    }




    // Constructor installs the generated tables into the ParserTable

    public NanoGrammarParserTable ()
    {
        super ();

        // Decode the run-length-encoded tables

        decodeRLE ();

        // Copy parsing tables into the ParserTable superclass

        _symbolCount = gen_symbolCount;
        _productionCount = gen_productionCount;
        _productionLHSSymbol = gen_productionLHSSymbol;
        _productionRHSLength = gen_productionRHSLength;
        _productionParam = gen_productionParam;
        _maxInsertion = gen_maxInsertion;
        _maxDeletion = gen_maxDeletion;
        _validationLength = gen_validationLength;
        _singlePointInsertionCount = gen_singlePointInsertionCount;
        _singlePointInsertions = gen_singlePointInsertions;
        _goalProduction = gen_goalProduction;
        _eofSymbol = gen_eofSymbol;
        _insertionCost = gen_insertionCost;
        _deletionCost = gen_deletionCost;
        _stateCount = gen_stateCount;
        _actionTable = gen_actionTable;
        _unwindingTable = gen_unwindingTable;

        // Copy dynamic-link tables into the ParserTable superclass

        _symbols = gen_symbols;
        _productionLink = gen_productionLink;

        return;
    }


}

