// File generated by Invisible Jacc version 1.1.
// Invisible Jacc is Copyright 1997-1998 Invisible Software, Inc.

package NanoCompiler;

import invisible.jacc.parse.ScannerTable;
import invisible.jacc.util.ArrayRLE;

public class NanoGrammarScannerTable extends ScannerTable
{

    // The number of different character categories.

    private static final int gen_categoryCount = 46;

    // The character set size.

    private static final int gen_charSetSize = 256;

    // The character category table.

    private static byte[] gen_categoryTable = null;
    private static short[] rle_categoryTable = 
    {256, 2048, 45, 44, 0, 45, 43, 4352, 45, 0, 30, 1024, 34, 35, 27, 36, 31, 37, 0, 28,
    2346, 33, 32, 39, 38, 40, 256, 6441, 768, 29, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
    10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, -31744};

    // The number of tokens.

    private static final int gen_tokenCount = 8;

    // The token parameters.

    private static final int[] gen_tokenParam = 
    {2, 3, 4, 5, 6, 1, 0, 0};

    // The number of tokens that have a right context.

    private static final int gen_contextCount = 0;

    // Context number table.

    private static final int[] gen_contextNumber = 
    {0, 0, 0, 0, 0, 0, 0, 0};

    // The number of start conditions for the forward DFA.

    private static final int gen_conditionCount = 3;

    // The number of states in the forward DFA.

    private static final int gen_fwdStateCount = 13;

    // The number of recognition codes in the forward DFA.

    private static final int gen_fwdRecognitionCount = 9;

    // Forward DFA initial state table.

    private static final int[] gen_fwdInitialState = 
    {1, 1, 1};

    // Forward DFA transition table.

    private static short[][] gen_fwdTransitionTable = null;
    private static short[] rle_fwdTransitionTable = 
    {13, 46, -32467, 13, 46, -32485, 13, 9, -32510, 13, 7, 13, 4, 5, 2, 3, -32509, 13, 6, 10,
    11, 8, 46, -32467, 13, 46, -32467, 13, 46, -32467, 13, 46, -32467, 13, 46, -32471, 13, 6, -32510, 13,
    46, -32467, 13, 46, -32485, 13, 9, -32497, 13, 8, 46, -32485, 13, 12, -32496, 13, 46, -32469, 13, 11,
    13, 46, -32467, 13, 46, -32470, 12, -32511, 13, 12};

    // Forward DFA recognition table.

    private static final int[] gen_fwdRecognitionTable = 
    {0, 1, 2, 3, 4, 5, 6, 7, 1, 0, 8, 8, 1};

    // Forward DFA token list.

    private static final int[] gen_fwdTokenListLength = 
    {0, 1, 1, 1, 1, 1, 1, 1, 1};

    private static final int[][] gen_fwdTokenList = 
    {
        {},
        {6},
        {0},
        {1},
        {2},
        {3},
        {4},
        {5},
        {7}
    };

    // Forward DFA context split table.

    private static boolean[][] gen_fwdContextSplit = null;
    private static byte[] rle_fwdContextSplit = 
    {0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    // The number of states in the reverse DFA.

    private static final int gen_revStateCount = 1;

    // The number of recognition codes in the reverse DFA.

    private static final int gen_revRecognitionCount = 1;

    // Reverse DFA transition table.

    private static short[][] gen_revTransitionTable = null;
    private static short[] rle_revTransitionTable = 
    {1, 46, -32467, 1};

    // Reverse DFA recognition table.

    private static final int[] gen_revRecognitionTable = 
    {0};

    // Reverse DFA context split table.

    private static boolean[][] gen_revContextSplit = null;
    private static byte[] rle_revContextSplit = 
    {0, 1, 0, 0};

    // The names of start conditions.

    private static final String[] gen_conditionNames = 
    {
        "notInComment",
        "inBracketComment",
        "inLineComment"
    };

    // The names of tokens.

    private static final String[] gen_tokenNames = 
    {
        "plus",
        "minus",
        "lparen",
        "rparen",
        "intConst",
        "semicolon",
        "whiteSpace",
        "lineEnd"
    };

    // The link name for each token.

    private static final String[] gen_tokenLink = 
    {
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
    };




    // RLE decoding function

    private static synchronized void decodeRLE ()
    {
        if (gen_categoryTable == null)
        {
            gen_categoryTable = ArrayRLE.byteRLEToByte1D (rle_categoryTable);
            rle_categoryTable = null;
        }

        if (gen_fwdTransitionTable == null)
        {
            gen_fwdTransitionTable = ArrayRLE.shortRLEToShort2D (rle_fwdTransitionTable);
            rle_fwdTransitionTable = null;
        }

        if (gen_fwdContextSplit == null)
        {
            gen_fwdContextSplit = ArrayRLE.booleanRLEToBoolean2D (rle_fwdContextSplit);
            rle_fwdContextSplit = null;
        }

        if (gen_revTransitionTable == null)
        {
            gen_revTransitionTable = ArrayRLE.shortRLEToShort2D (rle_revTransitionTable);
            rle_revTransitionTable = null;
        }

        if (gen_revContextSplit == null)
        {
            gen_revContextSplit = ArrayRLE.booleanRLEToBoolean2D (rle_revContextSplit);
            rle_revContextSplit = null;
        }

        return;
    }




    // Constructor installs the generated tables into the ScannerTable

    public NanoGrammarScannerTable ()
    {
        super ();

        // Decode the run-length-encoded tables

        decodeRLE ();

        // Copy scanning tables into the ScannerTable superclass

        _categoryCount = gen_categoryCount;
        _charSetSize = gen_charSetSize;
        _categoryTable = gen_categoryTable;
        _tokenCount = gen_tokenCount;
        _tokenParam = gen_tokenParam;
        _contextCount = gen_contextCount;
        _contextNumber = gen_contextNumber;
        _conditionCount = gen_conditionCount;
        _fwdStateCount = gen_fwdStateCount;
        _fwdRecognitionCount = gen_fwdRecognitionCount;
        _fwdInitialState = gen_fwdInitialState;
        _fwdTransitionTable = gen_fwdTransitionTable;
        _fwdRecognitionTable = gen_fwdRecognitionTable;
        _fwdTokenListLength = gen_fwdTokenListLength;
        _fwdTokenList = gen_fwdTokenList;
        _fwdContextSplit = gen_fwdContextSplit;
        _revStateCount = gen_revStateCount;
        _revRecognitionCount = gen_revRecognitionCount;
        _revTransitionTable = gen_revTransitionTable;
        _revRecognitionTable = gen_revRecognitionTable;
        _revContextSplit = gen_revContextSplit;

        // Copy dynamic-link tables into the ScannerTable superclass

        _conditionNames = gen_conditionNames;
        _tokenNames = gen_tokenNames;
        _tokenLink = gen_tokenLink;

        return;
    }


}

