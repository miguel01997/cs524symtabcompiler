// File generated by Invisible Jacc version 1.1.
// Invisible Jacc is Copyright 1997-1998 Invisible Software, Inc.

package invisible.jacc.ex2;

import invisible.jacc.parse.ParserTable;
import invisible.jacc.util.ArrayRLE;

public class Ex2GrammarParserTable extends ParserTable
{

    // The number of symbols.

    private static final int gen_symbolCount = 13;

    // The number of productions.

    private static final int gen_productionCount = 10;

    // The symbol on the left hand side of each production.

    private static final int[] gen_productionLHSSymbol = 
    {8, 7, 7, 9, 10, 10, 10, 11, 11, 12};

    // The length of the right hand side of each production.

    private static final int[] gen_productionRHSLength = 
    {1, 0, 2, 2, 1, 3, 3, 1, 3, 2};

    // The parameter for each production.

    private static final int[] gen_productionParam = 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    // The maximum number of insertions during error repair.

    private static final int gen_maxInsertion = 100;

    // The maximum number of deletions during error repair.

    private static final int gen_maxDeletion = 200;

    // The validation length for error repair.

    private static final int gen_validationLength = 5;

    // The number of single-point insertions for error repair.

    private static final int gen_singlePointInsertionCount = 6;

    // The list of symbols for single-point insertions.

    private static final int[] gen_singlePointInsertions = 
    {1, 2, 3, 4, 5, 6};

    // The goal production.

    private static final int gen_goalProduction = 9;

    // The end-of-file symbol.

    private static final int gen_eofSymbol = 0;

    // Insertion cost of each symbol for error repair.

    private static final int[] gen_insertionCost = 
    {1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0};

    // Deletion cost of each symbol for error repair.

    private static final int[] gen_deletionCost = 
    {1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0};

    // The number of LR(1) states.

    private static final int gen_stateCount = 9;

    // Parsing action table.

    private static short[][] gen_actionTable = null;
    private static short[] rle_actionTable = 
    {9, 14, 1, 20, 1, -32510, 20, 1, 21, 22, -32509, 20, 1, 14, 0, 20, 23, -32510, 20, 17,
    -32511, 20, 12, 24, 14, 20, 0, 14, 9, -32501, 20, 25, 14, -32511, 20, 23, -32510, 20, 17, -32510,
    20, 26, 14, 20, 17, 14, 20, 13, -32511, 20, 27, 28, -32506, 20, 13, 14, -32500, 20, 9, 14,
    -32510, 20, 18, 27, 28, -32506, 20, 18, 14, -32511, 20, 23, -32510, 20, 17, -32509, 20, 15, 20, 17,
    14, -32511, 20, 23, -32510, 20, 17, -32509, 20, 16, 20, 17};

    // Unwinding action table for error repair.

    private static final int[] gen_unwindingTable = 
    {1, 0, 10, 16, 11, 9, 13, 16, 16};

    // The names of symbols.

    private static final String[] gen_symbols = 
    {
        "%%EOF",
        ";",
        "(",
        ")",
        "+",
        "-",
        "number",
        "StatementList",
        "Goal",
        "Statement",
        "Expression",
        "Primary",
        "%%Goal"
    };

    // The link name for each production.

    private static final String[] gen_productionLink = 
    {
        "",
        "",
        "",
        "",
        "primary",
        "add",
        "subtract",
        "number",
        "paren",
        ""
    };




    // RLE decoding function

    private static synchronized void decodeRLE ()
    {
        if (gen_actionTable == null)
        {
            gen_actionTable = ArrayRLE.shortRLEToShort2D (rle_actionTable);
            rle_actionTable = null;
        }

        return;
    }




    // Constructor installs the generated tables into the ParserTable

    public Ex2GrammarParserTable ()
    {
        super ();

        // Decode the run-length-encoded tables

        decodeRLE ();

        // Copy parsing tables into the ParserTable superclass

        _symbolCount = gen_symbolCount;
        _productionCount = gen_productionCount;
        _productionLHSSymbol = gen_productionLHSSymbol;
        _productionRHSLength = gen_productionRHSLength;
        _productionParam = gen_productionParam;
        _maxInsertion = gen_maxInsertion;
        _maxDeletion = gen_maxDeletion;
        _validationLength = gen_validationLength;
        _singlePointInsertionCount = gen_singlePointInsertionCount;
        _singlePointInsertions = gen_singlePointInsertions;
        _goalProduction = gen_goalProduction;
        _eofSymbol = gen_eofSymbol;
        _insertionCost = gen_insertionCost;
        _deletionCost = gen_deletionCost;
        _stateCount = gen_stateCount;
        _actionTable = gen_actionTable;
        _unwindingTable = gen_unwindingTable;

        // Copy dynamic-link tables into the ParserTable superclass

        _symbols = gen_symbols;
        _productionLink = gen_productionLink;

        return;
    }


}

