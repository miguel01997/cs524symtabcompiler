// File generated by Invisible Jacc version 1.1.
// Invisible Jacc is Copyright 1997-1998 Invisible Software, Inc.

package NanoSymtabCompiler;

import invisible.jacc.parse.ParserTable;
import invisible.jacc.util.ArrayRLE;

public class NanoGrammarParserTable extends ParserTable
{

    // The number of symbols.

    private static final int gen_symbolCount = 89;

    // The number of productions.

    private static final int gen_productionCount = 89;

    // The symbol on the left hand side of each production.

    private static final int[] gen_productionLHSSymbol = 
    {45, 44, 47, 47, 48, 48, 49, 49, 52, 52, 46, 53, 50, 54, 57, 57, 55, 55, 60, 60,
    56, 62, 62, 62, 64, 59, 59, 61, 61, 51, 51, 51, 51, 51, 51, 51, 51, 63, 72, 73,
    65, 74, 74, 66, 76, 76, 77, 77, 67, 67, 68, 68, 78, 79, 80, 81, 69, 70, 71, 71,
    82, 82, 75, 75, 75, 75, 83, 83, 83, 83, 58, 58, 58, 84, 84, 84, 84, 84, 86, 86,
    87, 87, 87, 87, 87, 87, 85, 85, 88};

    // The length of the right hand side of each production.

    private static final int[] gen_productionRHSLength = 
    {1, 12, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 5, 3, 1, 5, 5, 6, 4,
    7, 3, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 0, 0,
    6, 0, 3, 6, 0, 3, 1, 4, 4, 7, 2, 2, 2, 2, 5, 0, 8, 2, 5, 6,
    3, 1, 3, 3, 3, 1, 3, 3, 3, 1, 1, 2, 2, 1, 1, 1, 3, 5, 1, 4,
    1, 1, 1, 1, 1, 1, 1, 1, 2};

    // The parameter for each production.

    private static final int[] gen_productionParam = 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0};

    // The maximum number of insertions during error repair.

    private static final int gen_maxInsertion = 100;

    // The maximum number of deletions during error repair.

    private static final int gen_maxDeletion = 200;

    // The validation length for error repair.

    private static final int gen_validationLength = 5;

    // The number of single-point insertions for error repair.

    private static final int gen_singlePointInsertionCount = 43;

    // The list of symbols for single-point insertions.

    private static final int[] gen_singlePointInsertions = 
    {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42, 43};

    // The goal production.

    private static final int gen_goalProduction = 88;

    // The end-of-file symbol.

    private static final int gen_eofSymbol = 0;

    // Insertion cost of each symbol for error repair.

    private static final int[] gen_insertionCost = 
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0};

    // Deletion cost of each symbol for error repair.

    private static final int[] gen_deletionCost = 
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0};

    // The number of LR(1) states.

    private static final int gen_stateCount = 130;

    // Parsing action table.

    private static short[][] gen_actionTable = null;
    private static short[] rle_actionTable = 
    {130, 90, 178, -32510, 10, -32510, 178, 10, -32477, 178, 89, 179, 180, -32471, 178, 10, 90, 88, -32425, 178,
    181, 90, 178, -32510, 3, -32510, 178, 3, -32474, 178, 182, -32472, 178, 3, 90, -32424, 178, 88, 90, 178,
    183, -32511, 5, -32510, 178, 5, -32473, 178, 184, -32508, 178, 91, -32479, 178, 5, 90, -32472, 178, 185, -32498,
    178, 186, -32482, 178, 185, 90, -32511, 178, 187, 7, -32510, 178, 7, -32472, 178, 188, -32508, 178, 93, -32480,
    178, 7, 90, -32490, 178, 189, 178, 15, -32504, 178, 15, -32460, 178, 15, 90, -32478, 178, 190, -32460, 178,
    190, 90, -32472, 178, 191, -32498, 178, 192, -32511, 178, 193, -32485, 178, 191, 90, -32510, 178, 12, -32510, 178,
    194, -32471, 178, 195, -32508, 178, 95, -32481, 178, 12, 90, -32472, 178, 185, -32498, 178, 103, -32482, 178, 185,
    90, -32495, 178, 196, -32511, 178, 175, 176, -32510, 178, 197, -32509, 178, 198, -32504, 178, 199, 162, -32498, 178,
    200, -32488, 178, 159, 163, 164, -32511, 178, 162, 90, -32490, 178, 189, 178, 15, -32511, 178, 201, -32453, 178,
    15, 90, -32488, 178, 202, -32450, 178, 202, 90, -32488, 178, 203, -32450, 178, 203, 90, -32472, 178, 204, -32466,
    178, 204, 90, -32510, 178, 205, -32428, 178, 205, 90, -32492, 178, 175, 176, -32510, 178, 197, -32499, 178, 199,
    162, -32472, 178, 161, 163, 164, -32511, 178, 162, 90, -32495, 178, 196, -32511, 178, 175, 176, -32510, 178, 197,
    -32509, 178, 198, -32504, 178, 199, 162, -32498, 178, 158, -32497, 178, 206, -32506, 178, 207, 159, 163, 164, -32511,
    178, 162, 90, -32492, 178, 175, 176, -32510, 178, 197, -32499, 178, 199, 162, -32472, 178, 160, 163, 164, -32511,
    178, 162, 90, -32502, 178, 78, -32511, 178, -32511, 78, -32510, 178, -32511, 78, -32511, 178, -32511, 78, -32511, 178,
    78, 208, -32508, 78, 178, -32507, 78, -32465, 178, 78, 90, -32489, 178, 102, -32449, 178, 102, 90, -32471, 178,
    209, -32467, 178, 209, 90, -32508, 178, 114, 115, -32461, 178, 210, -32484, 178, 114, 90, -32508, 178, 116, 117,
    -32459, 178, 211, -32486, 178, 116, 90, -32487, 178, 212, -32451, 178, 212, 90, -32510, 178, 213, -32509, 178, 214,
    215, 216, -32511, 178, 217, -32511, 178, 219, 220, -32490, 178, 221, -32504, 178, 222, -32502, 178, 118, 178, 119,
    120, 121, 122, 123, 124, 125, -32507, 178, 223, -32503, 178, 219, 90, -32493, 178, 225, -32507, 178, 165, -32511,
    178, 226, 227, -32510, 178, 169, 174, 170, 172, 171, 173, -32467, 178, 228, 178, 165, 90, -32502, 178, 65,
    -32511, 178, -32511, 65, -32510, 178, 229, 65, -32511, 178, -32511, 65, -32511, 178, 65, 178, -32510, 65, 230, 231,
    178, -32507, 65, -32465, 178, 65, 90, -32495, 178, 196, -32511, 178, 175, 176, -32510, 178, 197, -32509, 178, 198,
    -32504, 178, 199, 162, -32498, 178, 158, -32497, 178, 232, -32506, 178, 207, 159, 163, 164, -32511, 178, 162, 90,
    -32484, 178, 233, -32454, 178, 233, 90, -32489, 178, 105, -32449, 178, 105, 90, -32489, 178, 106, -32449, 178, 106,
    90, -32486, 178, 23, -32500, 178, 185, -32498, 178, 234, -32509, 178, 235, 178, 236, -32489, 178, 23, 90, 178,
    -32509, 38, -32510, 178, -32510, 38, -32511, 178, 38, -32511, 178, -32511, 38, -32490, 178, 38, -32483, 178, 237, -32497,
    178, 38, 90, -32487, 178, 238, -32451, 178, 238, 90, -32487, 178, 239, -32451, 178, 239, 90, -32495, 178, 196,
    -32511, 178, 175, 176, -32510, 178, 197, -32509, 178, 198, -32504, 178, 199, 162, -32498, 178, 158, -32497, 178, 240,
    -32506, 178, 207, 159, 163, 164, -32511, 178, 162, 90, -32472, 178, 241, -32466, 178, 241, 90, -32472, 178, 242,
    -32466, 178, 242, 90, -32489, 178, 146, -32449, 178, 146, 90, -32472, 178, 243, -32466, 178, 243, 90, -32485, 178,
    244, -32508, 178, 245, -32459, 178, 245, 90, -32510, 178, -32511, 9, -32510, 178, -32510, 9, -32511, 178, 9, -32511,
    178, -32511, 9, -32490, 178, 9, -32503, 178, 246, -32477, 178, 9, 90, -32502, 178, 247, -32446, 178, 139, 140,
    -32505, 178, 247, 90, -32502, 178, 248, -32446, 178, 139, 140, -32505, 178, 248, 90, -32495, 178, 196, -32511, 178,
    175, 176, -32510, 178, 197, -32509, 178, 198, -32504, 178, 199, 162, -32498, 178, 158, -32489, 178, 249, 159, 163,
    164, -32511, 178, 162, 90, -32495, 178, 196, -32511, 178, 175, 176, -32510, 178, 197, -32509, 178, 198, -32504, 178,
    199, 162, -32498, 178, 158, -32489, 178, 250, 159, 163, 164, -32511, 178, 162, 90, -32495, 178, 196, -32511, 178,
    175, 176, -32510, 178, 197, -32509, 178, 198, -32504, 178, 199, 162, -32498, 178, 158, -32489, 178, 251, 159, 163,
    164, -32511, 178, 162, 90, -32495, 178, 196, -32511, 178, 175, 176, -32510, 178, 197, -32509, 178, 198, -32504, 178,
    199, 162, -32498, 178, 158, -32497, 178, 252, -32506, 178, 207, 159, 163, 164, -32511, 178, 162, 90, -32495, 178,
    196, -32511, 178, 175, 176, -32510, 178, 197, -32509, 178, 198, -32504, 178, 199, 162, -32498, 178, 157, -32488, 178,
    159, 163, 164, -32511, 178, 162, 90, -32495, 178, 196, -32511, 178, 175, 176, -32510, 178, 197, -32509, 178, 198,
    -32504, 178, 199, 162, -32498, 178, 155, -32488, 178, 159, 163, 164, -32511, 178, 162, 90, -32495, 178, 196, -32511,
    178, 175, 176, -32510, 178, 197, -32509, 178, 198, -32504, 178, 199, 162, -32498, 178, 156, -32488, 178, 159, 163,
    164, -32511, 178, 162, 90, -32493, 178, 225, -32505, 178, 168, 226, 227, -32456, 178, 168, 90, -32490, 178, 253,
    178, 19, -32450, 178, 19, 90, -32488, 178, 254, -32450, 178, 254, 90, -32486, 178, 255, -32452, 178, 255, 90,
    -32489, 178, 256, -32511, 178, 22, -32452, 178, 22, 90, 178, -32509, 3, -32510, 178, -32510, 3, -32511, 178, 3,
    -32511, 178, -32511, 3, -32490, 178, 3, -32508, 178, 257, -32472, 178, 3, 90, -32470, 178, 258, -32468, 178, 258,
    90, -32470, 178, 259, -32468, 178, 259, 90, -32502, 178, 52, -32505, 178, 225, -32504, 178, 226, 227, -32456, 178,
    52, 90, -32479, 178, 260, -32459, 178, 260, 90, -32479, 178, 261, -32459, 178, 261, 90, -32487, 178, 262, -32451,
    178, 262, 90, -32495, 178, 196, -32511, 178, 175, 176, -32510, 178, 197, -32509, 178, 198, -32504, 178, 199, 162,
    -32498, 178, 158, -32497, 178, 263, -32506, 178, 207, 159, 163, 164, -32511, 178, 162, 90, -32495, 178, 196, -32511,
    178, 175, 176, -32510, 178, 197, -32509, 178, 198, -32504, 178, 199, 162, -32498, 178, 158, -32497, 178, 264, -32506,
    178, 207, 159, 163, 164, -32511, 178, 162, 90, -32510, 178, 213, 265, -32510, 178, 214, 215, 216, -32511, 178,
    217, -32511, 178, 219, 220, -32490, 178, 221, -32504, 178, 97, -32502, 178, 118, 178, 119, 120, 121, 122, 123,
    124, 125, -32507, 178, 223, -32503, 178, 265, 90, -32510, 178, 213, -32509, 178, 214, 215, 216, -32511, 178, 218,
    -32511, 178, 219, 220, -32490, 178, 221, -32504, 178, 266, -32502, 178, 118, 178, 119, 120, 121, 122, 123, 124,
    125, -32507, 178, 224, -32503, 178, 219, 90, -32510, 178, 213, -32509, 178, 214, 215, 216, -32511, 178, 218, -32511,
    178, 219, 220, -32490, 178, 221, -32504, 178, 267, -32502, 178, 118, 178, 119, 120, 121, 122, 123, 124, 125,
    -32507, 178, 224, -32503, 178, 219, 90, -32502, 178, 64, -32511, 178, -32511, 64, -32510, 178, 229, 64, -32511, 178,
    -32511, 64, -32511, 178, 64, 178, -32510, 64, 230, 231, 178, -32507, 64, -32465, 178, 64, 90, -32502, 178, 62,
    -32511, 178, -32511, 62, -32510, 178, 229, 62, -32511, 178, -32511, 62, -32511, 178, 62, 178, -32510, 62, 230, 231,
    178, -32507, 62, -32465, 178, 62, 90, -32502, 178, 63, -32511, 178, -32511, 63, -32510, 178, 229, 63, -32511, 178,
    -32511, 63, -32511, 178, 63, 178, -32510, 63, 230, 231, 178, -32507, 63, -32465, 178, 63, 90, -32493, 178, 225,
    -32507, 178, 166, -32511, 178, 226, 227, -32456, 178, 166, 90, -32472, 178, 268, -32495, 178, 107, -32485, 178, 268,
    90, -32508, 178, 114, 115, -32461, 178, 113, -32484, 178, 114, 90, -32489, 178, 269, -32449, 178, 269, 90, -32486,
    178, 23, -32500, 178, 185, -32498, 178, 234, -32509, 178, 110, 178, 236, -32489, 178, 23, 90, 178, 183, -32510,
    5, -32510, 178, -32510, 5, -32511, 178, 5, -32511, 178, -32511, 5, -32490, 178, 5, -32507, 178, 270, -32508, 178,
    91, -32479, 178, 5, 90, -32490, 178, 41, -32510, 178, 41, -32467, 178, 271, -32499, 178, 41, 90, -32490, 178,
    44, -32510, 178, 44, -32465, 178, 272, -32501, 178, 44, 90, -32495, 178, 196, -32511, 178, 175, 176, -32510, 178,
    197, -32509, 178, 198, -32504, 178, 199, 162, -32498, 178, 158, -32497, 178, 273, -32506, 178, 207, 159, 163, 164,
    -32511, 178, 162, 90, -32495, 178, 196, -32511, 178, 175, 176, -32510, 178, 197, -32509, 178, 198, -32504, 178, 199,
    162, -32498, 178, 158, -32497, 178, 274, -32506, 178, 207, 159, 163, 164, -32511, 178, 162, 90, -32495, 178, 196,
    -32511, 178, 175, 176, -32510, 178, 197, 275, -32510, 178, 198, -32504, 178, 199, 162, -32498, 178, 158, -32497, 178,
    276, -32507, 178, 277, 207, 159, 163, 164, -32511, 178, 275, 90, -32493, 178, 225, -32505, 178, 278, 226, 227,
    -32456, 178, 278, 90, -32493, 178, 225, -32510, 178, 137, -32508, 178, 226, 227, -32456, 178, 137, 90, -32489, 178,
    11, -32485, 178, 279, -32478, 178, 11, 90, -32510, 178, -32511, 53, -32510, 178, -32510, 53, 178, 280, 53, -32511,
    178, -32511, 53, -32490, 178, 53, -32466, 178, 53, 90, -32510, 178, -32511, 53, -32510, 178, -32510, 53, 178, 281,
    53, -32511, 178, -32511, 53, -32490, 178, 53, -32466, 178, 53, 90, -32485, 178, 201, -32453, 178, 201, 90, -32510,
    178, 213, -32454, 178, 109, -32488, 178, 213, 90, -32511, 178, 187, -32511, 12, -32510, 178, -32510, 12, -32511, 178,
    12, -32511, 178, -32511, 12, -32490, 178, 12, -32505, 178, 282, -32509, 178, 93, -32480, 178, 12, 90, -32490, 178,
    283, -32510, 178, 284, -32452, 178, 284, 90, -32490, 178, 285, -32510, 178, 286, -32452, 178, 286, 90, -32499, 178,
    287, -32508, 178, 225, -32504, 178, 226, 227, -32456, 178, 287, 90, -32499, 178, 288, -32508, 178, 225, -32504, 178,
    226, 227, -32456, 178, 288, 90, -32489, 178, 147, -32449, 178, 147, 90, -32493, 178, 225, -32511, 178, 289, -32510,
    178, 61, -32511, 178, 226, 227, -32456, 178, 61, 90, -32486, 178, 290, -32452, 178, 290, 90, -32479, 178, 291,
    -32459, 178, 291, 90, -32489, 178, 12, -32488, 178, 292, -32475, 178, 12, 90, -32510, 178, 55, -32509, 178, -32510,
    55, -32511, 178, 55, -32511, 178, -32511, 55, -32490, 178, 55, -32474, 178, 293, -32506, 178, 55, 90, -32510, 178,
    55, -32509, 178, -32510, 55, -32511, 178, 55, -32511, 178, -32511, 55, -32490, 178, 55, -32474, 178, 294, -32506, 178,
    55, 90, -32510, 178, -32511, 9, -32510, 178, -32510, 9, -32511, 178, 9, -32511, 178, -32511, 9, -32490, 178, 9,
    -32503, 178, 295, -32477, 178, 9, 90, -32495, 178, 196, -32511, 178, 175, 176, -32510, 178, 197, -32509, 178, 198,
    -32504, 178, 199, 162, -32498, 178, 158, -32497, 178, 296, -32506, 178, 207, 159, 163, 164, -32511, 178, 162, 90,
    -32489, 178, 129, -32449, 178, 129, 90, -32472, 178, 297, -32478, 178, 134, -32502, 178, 297, 90, -32489, 178, 132,
    -32449, 178, 132, 90, -32495, 178, 196, -32511, 178, 175, 176, -32510, 178, 197, -32509, 178, 198, -32504, 178, 199,
    162, -32498, 178, 158, -32497, 178, 298, -32506, 178, 207, 159, 163, 164, -32511, 178, 162, 90, -32495, 178, 196,
    -32511, 178, 175, 176, -32510, 178, 197, -32509, 178, 198, -32504, 178, 199, 162, -32498, 178, 158, -32497, 178, 299,
    -32506, 178, 207, 159, 163, 164, -32511, 178, 162, 90, -32495, 178, 196, -32511, 178, 175, 176, -32510, 178, 197,
    -32509, 178, 198, -32504, 178, 199, 162, -32498, 178, 158, -32497, 178, 276, -32507, 178, 149, 207, 159, 163, 164,
    -32511, 178, 162, 90, -32489, 178, 148, -32449, 178, 148, 90, -32495, 178, 196, -32511, 178, 175, 176, -32510, 178,
    197, -32509, 178, 198, -32504, 178, 199, 162, -32498, 178, 158, -32497, 178, 300, -32506, 178, 207, 159, 163, 164,
    -32511, 178, 162, 90, -32489, 178, 90, -32449, 178, 90, 90, -32510, 178, 213, -32509, 178, 214, 215, 216, -32511,
    178, 217, -32511, 178, 219, 220, -32490, 178, 221, -32504, 178, 143, -32502, 178, 118, 178, 119, 120, 121, 122,
    123, 124, 125, -32507, 178, 223, -32503, 178, 219, 90, -32510, 178, 213, -32509, 178, 214, 215, 216, -32511, 178,
    218, -32511, 178, 219, 220, -32490, 178, 221, -32504, 178, 143, -32502, 178, 118, 178, 119, 120, 121, 122, 123,
    124, 125, -32507, 178, 224, -32503, 178, 219, 90, -32510, 178, 213, 301, -32510, 178, 214, 215, 216, -32511, 178,
    217, -32511, 178, 219, 220, -32490, 178, 221, -32504, 178, 97, -32502, 178, 118, 178, 119, 120, 121, 122, 123,
    124, 125, -32507, 178, 223, -32503, 178, 301, 90, -32493, 178, 225, -32511, 178, 42, -32510, 178, 42, -32511, 178,
    226, 227, -32456, 178, 42, 90, -32490, 178, 46, -32510, 178, 46, 302, -32453, 178, 46, 90, -32498, 178, 303,
    -32509, 178, 225, -32504, 178, 226, 227, -32456, 178, 303, 90, -32498, 178, 304, -32509, 178, 225, -32504, 178, 226,
    227, -32456, 178, 304, 90, -32493, 178, 225, -32510, 178, 138, -32508, 178, 226, 227, -32456, 178, 138, 90, -32489,
    178, 39, -32465, 178, 305, -32498, 178, 39, 90, -32495, 178, 196, -32511, 178, 175, 176, -32510, 178, 197, -32509,
    178, 198, -32504, 178, 199, 162, -32498, 178, 158, -32497, 178, 306, -32506, 178, 207, 159, 163, 164, -32511, 178,
    162, 90, -32510, 178, 213, -32509, 178, 214, 215, 216, -32511, 178, 217, -32511, 178, 219, 220, -32490, 178, 221,
    -32504, 178, 145, -32502, 178, 118, 178, 119, 120, 121, 122, 123, 124, 125, -32507, 178, 223, -32503, 178, 219,
    90, -32510, 178, 213, -32509, 178, 214, 215, 216, -32511, 178, 218, -32511, 178, 219, 220, -32490, 178, 221, -32504,
    178, 145, -32502, 178, 118, 178, 119, 120, 121, 122, 123, 124, 125, -32507, 178, 224, -32503, 178, 219, 90,
    -32489, 178, 12, -32488, 178, 307, -32475, 178, 12, 90, -32493, 178, 225, -32505, 178, 136, 226, 227, -32456, 178,
    136, 90, -32489, 178, 126, -32449, 178, 126};

    // Unwinding action table for error repair.

    private static final int[] gen_unwindingTable = 
    {10, 89, 3, 88, 5, 130, 7, 15, 124, 130, 12, 130, 131, 15, 114, 114, 130, 92, 131, 131,
    131, 78, 113, 131, 94, 94, 115, 105, 116, 65, 131, 118, 113, 113, 23, 38, 115, 115, 131, 130,
    130, 113, 130, 123, 9, 100, 100, 131, 131, 131, 131, 131, 131, 131, 118, 19, 114, 116, 22, 3,
    132, 132, 52, 123, 123, 115, 131, 131, 93, 105, 105, 64, 62, 63, 116, 130, 94, 113, 23, 5,
    41, 44, 131, 131, 116, 118, 113, 11, 53, 53, 117, 92, 12, 116, 116, 103, 103, 113, 61, 116,
    123, 12, 55, 55, 9, 131, 113, 130, 113, 131, 131, 131, 113, 131, 113, 105, 105, 93, 42, 46,
    104, 104, 113, 39, 131, 105, 105, 12, 118, 113};

    // The names of symbols.

    private static final String[] gen_symbols = 
    {
        "%%EOF",
        "const",
        "var",
        "begin",
        "end",
        "integer",
        "boolean",
        "procedure",
        "print",
        "read",
        "if",
        "then",
        "else",
        "for",
        "to",
        "do",
        "return",
        "call",
        "not",
        "and",
        "or",
        "true",
        "false",
        "comma",
        "semicolon",
        "colon",
        "lparen",
        "rparen",
        "lbracket",
        "rbracket",
        "plus",
        "minus",
        "star",
        "slash",
        "assign",
        "equals",
        "notEquals",
        "lessThan",
        "lessThanEquals",
        "greaterThan",
        "greaterThanEquals",
        "id",
        "intConst",
        "stringConst",
        "program",
        "Goal",
        "startMainBlock",
        "constDecList",
        "varDecList",
        "procDecList",
        "showSymbolTable",
        "statement",
        "statementList",
        "endMainBlock",
        "constDec",
        "varDec",
        "procDec",
        "idList",
        "factor",
        "scalarType",
        "arrayIdList",
        "arrayType",
        "formalList",
        "blockStmnt",
        "formal",
        "printStmnt",
        "readStmnt",
        "asgnStmnt",
        "Cond",
        "forStmnt",
        "returnStmnt",
        "callStmnt",
        "startNewBlock",
        "endCurrentBlock",
        "printExprList",
        "expr",
        "inputTargetList",
        "inputTarget",
        "CondIfPart",
        "CondThenPartUM",
        "CondThenPartM",
        "CondElseJump",
        "exprList",
        "term",
        "prim",
        "boolConst",
        "value",
        "relop",
        "%%Goal"
    };

    // The link name for each production.

    private static final String[] gen_productionLink = 
    {
        "",
        "",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "",
        "",
        "",
        "idList",
        "list",
        "single",
        "idList",
        "arrayIdList",
        "list",
        "single",
        "",
        "list",
        "single",
        "empty",
        "",
        "integer",
        "boolean",
        "integer",
        "boolean",
        "blockStmnt",
        "printStmnt",
        "readStmnt",
        "asgnStmnt",
        "condStmnt",
        "forStmnt",
        "returnStmnt",
        "callStmnt",
        "",
        "",
        "",
        "",
        "empty",
        "nonempty",
        "",
        "empty",
        "nonempty",
        "id",
        "idArray",
        "int",
        "intArray",
        "unmatched",
        "matched",
        "",
        "",
        "",
        "",
        "",
        "",
        "nothing",
        "exprList",
        "list",
        "single",
        "plus",
        "minus",
        "or",
        "term",
        "star",
        "slash",
        "and",
        "factor",
        "positive",
        "negative",
        "not",
        "const",
        "boolConst",
        "value",
        "expr",
        "relop",
        "id",
        "expr",
        "equals",
        "lessThan",
        "greaterThan",
        "lessThanEquals",
        "greaterThanEquals",
        "notEquals",
        "true",
        "false",
        ""
    };




    // RLE decoding function

    private static synchronized void decodeRLE ()
    {
        if (gen_actionTable == null)
        {
            gen_actionTable = ArrayRLE.shortRLEToShort2D (rle_actionTable);
            rle_actionTable = null;
        }

        return;
    }




    // Constructor installs the generated tables into the ParserTable

    public NanoGrammarParserTable ()
    {
        super ();

        // Decode the run-length-encoded tables

        decodeRLE ();

        // Copy parsing tables into the ParserTable superclass

        _symbolCount = gen_symbolCount;
        _productionCount = gen_productionCount;
        _productionLHSSymbol = gen_productionLHSSymbol;
        _productionRHSLength = gen_productionRHSLength;
        _productionParam = gen_productionParam;
        _maxInsertion = gen_maxInsertion;
        _maxDeletion = gen_maxDeletion;
        _validationLength = gen_validationLength;
        _singlePointInsertionCount = gen_singlePointInsertionCount;
        _singlePointInsertions = gen_singlePointInsertions;
        _goalProduction = gen_goalProduction;
        _eofSymbol = gen_eofSymbol;
        _insertionCost = gen_insertionCost;
        _deletionCost = gen_deletionCost;
        _stateCount = gen_stateCount;
        _actionTable = gen_actionTable;
        _unwindingTable = gen_unwindingTable;

        // Copy dynamic-link tables into the ParserTable superclass

        _symbols = gen_symbols;
        _productionLink = gen_productionLink;

        return;
    }


}

