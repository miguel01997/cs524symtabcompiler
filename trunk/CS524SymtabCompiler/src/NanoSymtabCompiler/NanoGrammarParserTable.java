// File generated by Invisible Jacc version 1.1.
// Invisible Jacc is Copyright 1997-1998 Invisible Software, Inc.

package NanoSymtabCompiler;

import invisible.jacc.parse.ParserTable;
import invisible.jacc.util.ArrayRLE;

public class NanoGrammarParserTable extends ParserTable
{

    // The number of symbols.

    private static final int gen_symbolCount = 82;

    // The number of productions.

    private static final int gen_productionCount = 81;

    // The symbol on the left hand side of each production.

    private static final int[] gen_productionLHSSymbol = 
    {44, 43, 46, 46, 47, 47, 48, 48, 51, 51, 45, 52, 49, 53, 56, 56, 54, 54, 59, 59,
    55, 60, 60, 60, 62, 58, 58, 50, 50, 50, 50, 50, 50, 50, 50, 61, 70, 71, 63, 72,
    72, 64, 74, 74, 75, 75, 65, 65, 66, 66, 67, 68, 69, 69, 76, 76, 73, 73, 73, 73,
    77, 77, 77, 77, 57, 57, 57, 78, 78, 78, 78, 78, 79, 79, 80, 80, 80, 80, 80, 80,
    81};

    // The length of the right hand side of each production.

    private static final int[] gen_productionRHSLength = 
    {1, 12, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 5, 3, 1, 5, 5, 6, 4,
    7, 3, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 0, 0, 6, 0,
    3, 6, 0, 3, 1, 4, 4, 7, 4, 6, 8, 2, 5, 6, 3, 1, 3, 3, 3, 1,
    3, 3, 3, 1, 1, 2, 2, 1, 1, 1, 3, 5, 1, 4, 1, 1, 1, 1, 1, 1,
    2};

    // The parameter for each production.

    private static final int[] gen_productionParam = 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0};

    // The maximum number of insertions during error repair.

    private static final int gen_maxInsertion = 100;

    // The maximum number of deletions during error repair.

    private static final int gen_maxDeletion = 200;

    // The validation length for error repair.

    private static final int gen_validationLength = 5;

    // The number of single-point insertions for error repair.

    private static final int gen_singlePointInsertionCount = 42;

    // The list of symbols for single-point insertions.

    private static final int[] gen_singlePointInsertions = 
    {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42};

    // The goal production.

    private static final int gen_goalProduction = 80;

    // The end-of-file symbol.

    private static final int gen_eofSymbol = 0;

    // Insertion cost of each symbol for error repair.

    private static final int[] gen_insertionCost = 
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0};

    // Deletion cost of each symbol for error repair.

    private static final int[] gen_deletionCost = 
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0};

    // The number of LR(1) states.

    private static final int gen_stateCount = 128;

    // Parsing action table.

    private static short[][] gen_actionTable = null;
    private static short[] rle_actionTable = 
    {128, 83, 162, -32510, 10, -32510, 162, 10, -32478, 162, 81, 163, 164, -32477, 162, 10, 83, 80, -32432, 162,
    165, 83, 162, -32510, 3, -32510, 162, 3, -32475, 162, 166, -32478, 162, 3, 83, -32431, 162, 80, 83, 162,
    167, -32511, 5, -32510, 162, 5, -32474, 162, 168, -32508, 162, 83, -32485, 162, 5, 83, -32474, 162, 169, -32497,
    162, 170, -32488, 162, 169, 83, -32511, 162, 171, 7, -32510, 162, 7, -32473, 162, 172, -32508, 162, 85, -32486,
    162, 7, 83, -32492, 162, 173, 162, 15, -32504, 162, 15, -32465, 162, 15, 83, -32480, 162, 174, -32465, 162,
    174, 83, -32474, 162, 175, -32497, 162, 176, -32511, 162, 177, -32491, 162, 175, 83, -32510, 162, 12, -32510, 162,
    178, -32472, 162, 179, -32508, 162, 87, -32487, 162, 12, 83, -32474, 162, 169, -32497, 162, 95, -32488, 162, 169,
    83, -32495, 162, 180, -32508, 162, 181, -32509, 162, 182, -32504, 162, 183, 148, 149, -32498, 162, 184, -32493, 162,
    145, 150, -32511, 162, 148, 83, -32492, 162, 173, 162, 15, -32511, 162, 185, -32458, 162, 15, 83, -32490, 162,
    186, -32455, 162, 186, 83, -32490, 162, 187, -32455, 162, 187, 83, -32474, 162, 188, -32471, 162, 188, 83, -32510,
    162, 189, -32435, 162, 189, 83, -32489, 162, 181, -32499, 162, 183, 148, 149, -32477, 162, 147, 150, -32511, 162,
    148, 83, -32495, 162, 180, -32508, 162, 181, -32509, 162, 182, -32504, 162, 183, 148, 149, -32498, 162, 144, -32498,
    162, 190, -32510, 162, 191, 145, 150, -32511, 162, 148, 83, -32489, 162, 181, -32499, 162, 183, 148, 149, -32477,
    162, 146, 150, -32511, 162, 148, 83, -32502, 162, 72, -32511, 162, -32511, 72, -32510, 162, -32509, 72, -32511, 162,
    72, 192, -32508, 72, 162, -32507, 72, -32470, 162, 72, 83, -32491, 162, 94, -32454, 162, 94, 83, -32473, 162,
    193, -32472, 162, 193, 83, -32508, 162, 106, 107, -32462, 162, 194, -32490, 162, 106, 83, -32508, 162, 106, 107,
    -32462, 162, 195, -32490, 162, 106, 83, -32489, 162, 196, -32456, 162, 196, 83, -32510, 162, 197, -32509, 162, 198,
    199, 200, -32511, 162, 202, -32511, 162, 204, 205, -32492, 162, 206, -32503, 162, 207, -32503, 162, 108, 162, 109,
    110, 111, 112, 113, 114, 115, -32501, 162, 204, 83, -32493, 162, 208, -32509, 162, 151, -32511, 162, 209, 210,
    -32510, 162, 155, 160, 156, 158, 157, 159, -32472, 162, 211, 162, 151, 83, -32502, 162, 59, -32511, 162, -32511,
    59, -32510, 162, 212, -32510, 59, -32511, 162, 59, 162, -32510, 59, 213, 214, 162, -32507, 59, -32470, 162, 59,
    83, -32495, 162, 180, -32508, 162, 181, -32509, 162, 182, -32504, 162, 183, 148, 149, -32498, 162, 144, -32498, 162,
    215, -32510, 162, 191, 145, 150, -32511, 162, 148, 83, -32486, 162, 216, -32459, 162, 216, 83, -32491, 162, 97,
    -32454, 162, 97, 83, -32491, 162, 98, -32454, 162, 98, 83, -32488, 162, 23, -32500, 162, 169, -32497, 162, 217,
    -32510, 162, 218, 162, 219, -32494, 162, 23, 83, 162, -32509, 36, -32510, 162, -32510, 36, -32511, 162, 36, -32511,
    162, -32511, 36, -32492, 162, 36, -32483, 162, 220, -32502, 162, 36, 83, -32489, 162, 221, -32456, 162, 221, 83,
    -32489, 162, 222, -32456, 162, 222, 83, -32495, 162, 180, -32508, 162, 181, -32509, 162, 182, -32504, 162, 183, 148,
    149, -32498, 162, 144, -32498, 162, 223, -32510, 162, 191, 145, 150, -32511, 162, 148, 83, -32495, 162, 180, -32508,
    162, 181, -32509, 162, 182, -32504, 162, 183, 148, 149, -32498, 162, 144, -32498, 162, 224, -32510, 162, 191, 145,
    150, -32511, 162, 148, 83, -32474, 162, 225, -32471, 162, 225, 83, -32474, 162, 226, -32471, 162, 226, 83, -32491,
    162, 132, -32454, 162, 132, 83, -32474, 162, 227, -32471, 162, 227, 83, -32487, 162, 228, -32508, 162, 229, -32464,
    162, 229, 83, -32510, 162, -32511, 9, -32510, 162, -32510, 9, -32511, 162, 9, -32511, 162, -32511, 9, -32492, 162,
    9, -32502, 162, 230, -32483, 162, 9, 83, -32495, 162, 180, -32508, 162, 181, -32509, 162, 182, -32504, 162, 183,
    148, 149, -32498, 162, 144, -32494, 162, 231, 145, 150, -32511, 162, 148, 83, -32495, 162, 180, -32508, 162, 181,
    -32509, 162, 182, -32504, 162, 183, 148, 149, -32498, 162, 144, -32494, 162, 232, 145, 150, -32511, 162, 148, 83,
    -32495, 162, 180, -32508, 162, 181, -32509, 162, 182, -32504, 162, 183, 148, 149, -32498, 162, 144, -32494, 162, 233,
    145, 150, -32511, 162, 148, 83, -32495, 162, 180, -32508, 162, 181, -32509, 162, 182, -32504, 162, 183, 148, 149,
    -32498, 162, 144, -32498, 162, 234, -32510, 162, 191, 145, 150, -32511, 162, 148, 83, -32495, 162, 180, -32508, 162,
    181, -32509, 162, 182, -32504, 162, 183, 148, 149, -32498, 162, 143, -32493, 162, 145, 150, -32511, 162, 148, 83,
    -32495, 162, 180, -32508, 162, 181, -32509, 162, 182, -32504, 162, 183, 148, 149, -32498, 162, 141, -32493, 162, 145,
    150, -32511, 162, 148, 83, -32495, 162, 180, -32508, 162, 181, -32509, 162, 182, -32504, 162, 183, 148, 149, -32498,
    162, 142, -32493, 162, 145, 150, -32511, 162, 148, 83, -32493, 162, 208, -32507, 162, 154, 209, 210, -32461, 162,
    154, 83, -32492, 162, 235, 162, 19, -32455, 162, 19, 83, -32490, 162, 236, -32455, 162, 236, 83, -32488, 162,
    237, -32457, 162, 237, 83, -32491, 162, 238, -32511, 162, 22, -32457, 162, 22, 83, 162, -32509, 3, -32510, 162,
    -32510, 3, -32511, 162, 3, -32511, 162, -32511, 3, -32492, 162, 3, -32507, 162, 239, -32478, 162, 3, 83, -32471,
    162, 240, -32474, 162, 240, 83, -32471, 162, 241, -32474, 162, 241, 83, -32502, 162, 242, -32505, 162, 208, -32506,
    162, 209, 210, -32461, 162, 242, 83, -32502, 162, 243, -32505, 162, 208, -32506, 162, 209, 210, -32461, 162, 243,
    83, -32481, 162, 244, -32464, 162, 244, 83, -32481, 162, 245, -32464, 162, 245, 83, -32489, 162, 246, -32456, 162,
    246, 83, -32495, 162, 180, -32508, 162, 181, -32509, 162, 182, -32504, 162, 183, 148, 149, -32498, 162, 144, -32498,
    162, 247, -32510, 162, 191, 145, 150, -32511, 162, 148, 83, -32495, 162, 180, -32508, 162, 181, -32509, 162, 182,
    -32504, 162, 183, 148, 149, -32498, 162, 144, -32498, 162, 248, -32510, 162, 191, 145, 150, -32511, 162, 148, 83,
    -32510, 162, 197, 249, -32510, 162, 198, 199, 200, -32511, 162, 202, -32511, 162, 204, 205, -32492, 162, 206, -32503,
    162, 89, -32503, 162, 108, 162, 109, 110, 111, 112, 113, 114, 115, -32501, 162, 249, 83, -32502, 162, 58,
    -32511, 162, -32511, 58, -32510, 162, 212, -32510, 58, -32511, 162, 58, 162, -32510, 58, 213, 214, 162, -32507, 58,
    -32470, 162, 58, 83, -32502, 162, 56, -32511, 162, -32511, 56, -32510, 162, 212, -32510, 56, -32511, 162, 56, 162,
    -32510, 56, 213, 214, 162, -32507, 56, -32470, 162, 56, 83, -32502, 162, 57, -32511, 162, -32511, 57, -32510, 162,
    212, -32510, 57, -32511, 162, 57, 162, -32510, 57, 213, 214, 162, -32507, 57, -32470, 162, 57, 83, -32493, 162,
    208, -32509, 162, 152, -32511, 162, 209, 210, -32461, 162, 152, 83, -32474, 162, 250, -32494, 162, 99, -32491, 162,
    250, 83, -32508, 162, 106, 107, -32462, 162, 105, -32490, 162, 106, 83, -32491, 162, 251, -32454, 162, 251, 83,
    -32488, 162, 23, -32500, 162, 169, -32497, 162, 217, -32510, 162, 102, 162, 219, -32494, 162, 23, 83, 162, 167,
    -32510, 5, -32510, 162, -32510, 5, -32511, 162, 5, -32511, 162, -32511, 5, -32492, 162, 5, -32506, 162, 252, -32508,
    162, 83, -32485, 162, 5, 83, -32492, 162, 39, -32510, 162, 39, -32467, 162, 253, -32504, 162, 39, 83, -32492,
    162, 42, -32510, 162, 42, -32465, 162, 254, -32506, 162, 42, 83, -32510, 162, 197, -32509, 162, 198, 199, 201,
    -32511, 162, 203, -32511, 162, 204, 205, -32492, 162, 206, -32503, 162, 255, -32503, 162, 108, 162, 109, 110, 111,
    112, 113, 114, 115, -32501, 162, 204, 83, -32510, 162, 197, -32509, 162, 198, 199, 201, -32511, 162, 203, -32511,
    162, 204, 205, -32492, 162, 206, -32503, 162, 256, -32503, 162, 108, 162, 109, 110, 111, 112, 113, 114, 115,
    -32501, 162, 204, 83, -32495, 162, 180, -32508, 162, 181, -32509, 162, 182, -32504, 162, 183, 148, 149, -32498, 162,
    144, -32498, 162, 257, -32510, 162, 191, 145, 150, -32511, 162, 148, 83, -32495, 162, 180, -32508, 162, 181, -32509,
    162, 182, -32504, 162, 183, 148, 149, -32498, 162, 144, -32498, 162, 258, -32510, 162, 191, 145, 150, -32511, 162,
    148, 83, -32495, 162, 180, -32508, 162, 181, 259, -32510, 162, 182, -32504, 162, 183, 148, 149, -32498, 162, 144,
    -32498, 162, 260, -32511, 162, 261, 191, 145, 150, -32511, 162, 259, 83, -32493, 162, 208, -32507, 162, 262, 209,
    210, -32461, 162, 262, 83, -32493, 162, 208, 162, 127, -32508, 162, 209, 210, -32461, 162, 127, 83, -32491, 162,
    11, -32484, 162, 263, -32484, 162, 11, 83, -32487, 162, 185, -32458, 162, 185, 83, -32510, 162, 197, -32456, 162,
    101, -32493, 162, 197, 83, -32511, 162, 171, -32511, 12, -32510, 162, -32510, 12, -32511, 162, 12, -32511, 162, -32511,
    12, -32492, 162, 12, -32504, 162, 264, -32509, 162, 85, -32486, 162, 12, 83, -32492, 162, 265, -32510, 162, 266,
    -32457, 162, 266, 83, -32492, 162, 267, -32510, 162, 268, -32457, 162, 268, 83, -32510, 162, -32511, 48, -32510, 162,
    -32510, 48, 162, 269, 48, -32511, 162, -32511, 48, -32492, 162, 48, -32471, 162, 48, 83, -32510, 162, -32511, 48,
    -32510, 162, -32510, 48, 162, 270, 48, -32511, 162, -32511, 48, -32492, 162, 48, -32471, 162, 48, 83, -32499, 162,
    271, -32508, 162, 208, -32506, 162, 209, 210, -32461, 162, 271, 83, -32499, 162, 272, -32508, 162, 208, -32506, 162,
    209, 210, -32461, 162, 272, 83, -32491, 162, 133, -32454, 162, 133, 83, -32493, 162, 208, 273, -32510, 162, 55,
    -32511, 162, 209, 210, -32461, 162, 55, 83, -32488, 162, 274, -32457, 162, 274, 83, -32481, 162, 275, -32464, 162,
    275, 83, -32491, 162, 12, -32487, 162, 276, -32481, 162, 12, 83, -32510, 162, -32511, 9, -32510, 162, -32510, 9,
    -32511, 162, 9, -32511, 162, -32511, 9, -32492, 162, 9, -32502, 162, 277, -32483, 162, 9, 83, -32495, 162, 180,
    -32508, 162, 181, -32509, 162, 182, -32504, 162, 183, 148, 149, -32498, 162, 144, -32498, 162, 278, -32510, 162, 191,
    145, 150, -32511, 162, 148, 83, -32491, 162, 119, -32454, 162, 119, 83, -32474, 162, 279, -32478, 162, 124, -32507,
    162, 279, 83, -32491, 162, 122, -32454, 162, 122, 83, -32510, 162, 197, -32509, 162, 198, 199, 200, -32511, 162,
    202, -32511, 162, 204, 205, -32492, 162, 206, -32503, 162, 130, -32503, 162, 108, 162, 109, 110, 111, 112, 113,
    114, 115, -32501, 162, 204, 83, -32510, 162, 197, -32509, 162, 198, 199, 201, -32511, 162, 203, -32511, 162, 204,
    205, -32492, 162, 206, -32503, 162, 130, -32503, 162, 108, 162, 109, 110, 111, 112, 113, 114, 115, -32501, 162,
    204, 83, -32495, 162, 180, -32508, 162, 181, -32509, 162, 182, -32504, 162, 183, 148, 149, -32498, 162, 144, -32498,
    162, 280, -32510, 162, 191, 145, 150, -32511, 162, 148, 83, -32495, 162, 180, -32508, 162, 181, -32509, 162, 182,
    -32504, 162, 183, 148, 149, -32498, 162, 144, -32498, 162, 281, -32510, 162, 191, 145, 150, -32511, 162, 148, 83,
    -32495, 162, 180, -32508, 162, 181, -32509, 162, 182, -32504, 162, 183, 148, 149, -32498, 162, 144, -32498, 162, 260,
    -32511, 162, 135, 191, 145, 150, -32511, 162, 148, 83, -32491, 162, 134, -32454, 162, 134, 83, -32495, 162, 180,
    -32508, 162, 181, -32509, 162, 182, -32504, 162, 183, 148, 149, -32498, 162, 144, -32498, 162, 282, -32510, 162, 191,
    145, 150, -32511, 162, 148, 83, -32491, 162, 82, -32454, 162, 82, 83, -32510, 162, 197, 283, -32510, 162, 198,
    199, 200, -32511, 162, 202, -32511, 162, 204, 205, -32492, 162, 206, -32503, 162, 89, -32503, 162, 108, 162, 109,
    110, 111, 112, 113, 114, 115, -32501, 162, 283, 83, -32493, 162, 208, 40, -32510, 162, 40, -32511, 162, 209,
    210, -32461, 162, 40, 83, -32492, 162, 44, -32510, 162, 44, 284, -32458, 162, 44, 83, -32498, 162, 285, -32509,
    162, 208, -32506, 162, 209, 210, -32461, 162, 285, 83, -32498, 162, 286, -32509, 162, 208, -32506, 162, 209, 210,
    -32461, 162, 286, 83, -32493, 162, 208, 162, 128, -32508, 162, 209, 210, -32461, 162, 128, 83, -32491, 162, 37,
    -32465, 162, 287, -32503, 162, 37, 83, -32495, 162, 180, -32508, 162, 181, -32509, 162, 182, -32504, 162, 183, 148,
    149, -32498, 162, 144, -32498, 162, 288, -32510, 162, 191, 145, 150, -32511, 162, 148, 83, -32510, 162, 197, -32509,
    162, 198, 199, 200, -32511, 162, 202, -32511, 162, 204, 205, -32492, 162, 206, -32503, 162, 131, -32503, 162, 108,
    162, 109, 110, 111, 112, 113, 114, 115, -32501, 162, 204, 83, -32510, 162, 197, -32509, 162, 198, 199, 201,
    -32511, 162, 203, -32511, 162, 204, 205, -32492, 162, 206, -32503, 162, 131, -32503, 162, 108, 162, 109, 110, 111,
    112, 113, 114, 115, -32501, 162, 204, 83, -32491, 162, 12, -32487, 162, 289, -32481, 162, 12, 83, -32493, 162,
    208, -32507, 162, 126, 209, 210, -32461, 162, 126, 83, -32491, 162, 116, -32454, 162, 116};

    // Unwinding action table for error repair.

    private static final int[] gen_unwindingTable = 
    {10, 81, 3, 80, 5, 120, 7, 15, 114, 120, 12, 120, 121, 15, 104, 104, 120, 84, 121, 121,
    121, 72, 103, 121, 86, 86, 105, 97, 106, 59, 121, 108, 103, 103, 23, 36, 105, 105, 121, 121,
    120, 120, 103, 120, 113, 9, 121, 121, 121, 121, 121, 121, 121, 108, 19, 104, 106, 22, 3, 123,
    123, 92, 92, 113, 113, 105, 121, 121, 85, 58, 56, 57, 106, 120, 86, 103, 23, 5, 39, 42,
    97, 97, 121, 121, 106, 108, 103, 11, 107, 84, 12, 106, 106, 48, 48, 95, 95, 103, 55, 106,
    113, 12, 9, 121, 103, 120, 103, 97, 97, 121, 121, 121, 103, 121, 103, 85, 40, 44, 96, 96,
    103, 37, 121, 97, 97, 12, 108, 103};

    // The names of symbols.

    private static final String[] gen_symbols = 
    {
        "%%EOF",
        "const",
        "var",
        "begin",
        "end",
        "integer",
        "boolean",
        "procedure",
        "print",
        "read",
        "if",
        "then",
        "else",
        "for",
        "to",
        "do",
        "return",
        "call",
        "not",
        "and",
        "or",
        "comma",
        "semicolon",
        "colon",
        "lparen",
        "rparen",
        "lbracket",
        "rbracket",
        "plus",
        "minus",
        "star",
        "slash",
        "assign",
        "equals",
        "notEquals",
        "lessThan",
        "lessThanEquals",
        "greaterThan",
        "greaterThanEquals",
        "id",
        "intConst",
        "boolConst",
        "stringConst",
        "program",
        "Goal",
        "startMainBlock",
        "constDecList",
        "varDecList",
        "procDecList",
        "showSymbolTable",
        "statement",
        "statementList",
        "endMainBlock",
        "constDec",
        "varDec",
        "procDec",
        "idList",
        "factor",
        "scalarType",
        "arrayIdList",
        "formalList",
        "blockStmnt",
        "formal",
        "printStmnt",
        "readStmnt",
        "asgnStmnt",
        "condStmnt",
        "forStmnt",
        "returnStmnt",
        "callStmnt",
        "startNewBlock",
        "endCurrentBlock",
        "printExprList",
        "expr",
        "inputTargetList",
        "inputTarget",
        "exprList",
        "term",
        "prim",
        "value",
        "relop",
        "%%Goal"
    };

    // The link name for each production.

    private static final String[] gen_productionLink = 
    {
        "",
        "",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "nonempty",
        "empty",
        "",
        "",
        "",
        "idList",
        "list",
        "single",
        "idList",
        "arrayIdList",
        "list",
        "single",
        "",
        "list",
        "single",
        "empty",
        "",
        "integer",
        "boolean",
        "blockStmnt",
        "printStmnt",
        "readStmnt",
        "asgnStmnt",
        "condStmnt",
        "forStmnt",
        "returnStmnt",
        "callStmnt",
        "",
        "",
        "",
        "",
        "empty",
        "nonempty",
        "",
        "empty",
        "nonempty",
        "id",
        "idArray",
        "int",
        "intArray",
        "ifThen",
        "ifThenElse",
        "",
        "",
        "nothing",
        "exprList",
        "list",
        "single",
        "plus",
        "minus",
        "or",
        "term",
        "star",
        "slash",
        "and",
        "factor",
        "positive",
        "negative",
        "not",
        "const",
        "boolConst",
        "value",
        "expr",
        "relop",
        "id",
        "expr",
        "equals",
        "lessThan",
        "greaterThan",
        "lessThanEquals",
        "greaterThanEquals",
        "notEquals",
        ""
    };




    // RLE decoding function

    private static synchronized void decodeRLE ()
    {
        if (gen_actionTable == null)
        {
            gen_actionTable = ArrayRLE.shortRLEToShort2D (rle_actionTable);
            rle_actionTable = null;
        }

        return;
    }




    // Constructor installs the generated tables into the ParserTable

    public NanoGrammarParserTable ()
    {
        super ();

        // Decode the run-length-encoded tables

        decodeRLE ();

        // Copy parsing tables into the ParserTable superclass

        _symbolCount = gen_symbolCount;
        _productionCount = gen_productionCount;
        _productionLHSSymbol = gen_productionLHSSymbol;
        _productionRHSLength = gen_productionRHSLength;
        _productionParam = gen_productionParam;
        _maxInsertion = gen_maxInsertion;
        _maxDeletion = gen_maxDeletion;
        _validationLength = gen_validationLength;
        _singlePointInsertionCount = gen_singlePointInsertionCount;
        _singlePointInsertions = gen_singlePointInsertions;
        _goalProduction = gen_goalProduction;
        _eofSymbol = gen_eofSymbol;
        _insertionCost = gen_insertionCost;
        _deletionCost = gen_deletionCost;
        _stateCount = gen_stateCount;
        _actionTable = gen_actionTable;
        _unwindingTable = gen_unwindingTable;

        // Copy dynamic-link tables into the ParserTable superclass

        _symbols = gen_symbols;
        _productionLink = gen_productionLink;

        return;
    }


}

